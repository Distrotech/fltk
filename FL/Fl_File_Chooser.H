// generated by Fast Light User Interface Designer (fluid) version 1.0104

#ifndef Fl_File_Chooser_H
#define Fl_File_Chooser_H
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Preferences.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_File_Browser.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Return_Button.H>
#include <FL/fl_ask.H>

/** The Fl_File_Chooser widget displays a standard file selection dialog 
 * that supports various selection modes.
 *   \image html Fl_File_Chooser.jpg
 *
 * The Fl_File_Chooser class also exports several static values that may
 * be used to localize or customize the appearance of all file 
 * chooser dialogs:
 *
 * <CENTER><TABLE BORDER="1">
 * <TR><TH>Member</TH><TH>Default value</TH></TR>
 * <TR><TD><TT>add_favorites_label</TT></TD><TD>"Add to Favorites"</TD></TR>
 * <TR><TD><TT>all_files_label</TT></TD><TD>"All Files (*)"</TD></TR>
 * <TR><TD><TT>custom_filter_label</TT></TD><TD>"Custom Filter"</TD></TR>
 * <TR><TD><TT>existing_file_label</TT></TD><TD>"Please choose an existing file!"</TD></TR>
 * <TR><TD><TT>favorites_label</TT></TD><TD>"Favorites"</TD></TR>
 * <TR><TD><TT>filename_label</TT></TD><TD>"Filename:"</TD></TR>
 * <TR><TD><TT>filesystems_label</TT></TD><TD>"My Computer" (WIN32)<BR>
 *	"File Systems" (all others)</TD></TR>
 * <TR><TD><TT>manage_favorites_label</TT></TD><TD>"Manage Favorites"</TD></TR>
 * <TR><TD><TT>preview_label</TT></TD><TD>"Preview"</TD></TR>
 * <TR><TD><TT>show_label</TT></TD><TD>"Show:"</TD></TR>
 * <TR><TD><TT>sort</TT></TD><TD>fl_numericsort</TD></TR>
 * </TABLE></CENTER>
 * 
 * The sort member specifies the sort function that is used when loading the
 * contents of a directory.
 * 
 * The Fl_File_Chooser class exports the "new directory" (newButton) and 
 * "preview" (previewButton) widgets so that application developers can
 * control their appearance and use. For more complex customization, 
 * consider copying the FLTK file chooser code and changing it accordingly.
 */
class FL_EXPORT Fl_File_Chooser {
public:
  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 };
private:
  static Fl_Preferences prefs_;
  void (*callback_)(Fl_File_Chooser*, void *);
  void *data_;
  char directory_[1024];
  char pattern_[1024];
  char preview_text_[2048];
  int type_;
  void favoritesButtonCB();
  void favoritesCB(Fl_Widget *w);
  void fileListCB();
  void fileNameCB();
  void newdir();
  static void previewCB(Fl_File_Chooser *fc);
  void showChoiceCB();
  void update_favorites();
  void update_preview();
public:
    /** The constructor creates the Fl_File_Chooser dialog pictured above. 
     * The pathname argument can be a directory name or a complete file 
     * name (in which case the corresponding file is highlighted in the list
     * and in the filename input field.)
     *
     * The pattern argument can be a \c NULL string or "*" to list all 
     * files, or it can be a series of descriptions and filter strings 
     * separated by tab characters (<tt>\\t</tt>). The format of filters is
     * either "Description text (patterns)" or just "patterns". A file
     * chooser that provides filters for HTML and image files might 
     * look like:<br>
     * <tt>  "HTML Files (*.html)\tImage Files (*.{bmp,gif,jpg,png})"</tt>
     * 
     * The file chooser will automatically add the "All Files (*)" pattern 
     * to the end of the string you pass if you do not provide one. The 
     * first filter in the string is the default filter.
     * 
     * See the FLTK documentation on fl_filename_match() for the kinds of
     * pattern strings that are supported.
     *
     * The type argument can be one of the following:
     * \arg \c SINGLE - allows the user to select a single, existing file.
     * \arg \c MULTI - allows the user to select one or more existing files.
     * \arg \c CREATE - allows the user to select a single, existing file or
     *      specify a new filename.
     * \arg \c DIRECTORY - allows the user to select a single, 
     *      existing directory.
     *
     * The title argument is used to set the title bar text for the 
     * Fl_File_Chooser window. */
  Fl_File_Chooser(const char *d, const char *p, int t, const char *title);
private:
  Fl_Double_Window *window;
  inline void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
  Fl_Choice *showChoice;
  inline void cb_showChoice_i(Fl_Choice*, void*);
  static void cb_showChoice(Fl_Choice*, void*);
  Fl_Menu_Button *favoritesButton;
  inline void cb_favoritesButton_i(Fl_Menu_Button*, void*);
  static void cb_favoritesButton(Fl_Menu_Button*, void*);
public:
  Fl_Button *newButton;
private:
  inline void cb_newButton_i(Fl_Button*, void*);
  static void cb_newButton(Fl_Button*, void*);
  inline void cb__i(Fl_Tile*, void*);
  static void cb_(Fl_Tile*, void*);
  Fl_File_Browser *fileList;
  inline void cb_fileList_i(Fl_File_Browser*, void*);
  static void cb_fileList(Fl_File_Browser*, void*);
  Fl_Box *previewBox;
public:
  Fl_Check_Button *previewButton;
private:
  inline void cb_previewButton_i(Fl_Check_Button*, void*);
  static void cb_previewButton(Fl_Check_Button*, void*);
  Fl_File_Input *fileName;
  inline void cb_fileName_i(Fl_File_Input*, void*);
  static void cb_fileName(Fl_File_Input*, void*);
  Fl_Return_Button *okButton;
  inline void cb_okButton_i(Fl_Return_Button*, void*);
  static void cb_okButton(Fl_Return_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  Fl_Double_Window *favWindow;
  Fl_File_Browser *favList;
  inline void cb_favList_i(Fl_File_Browser*, void*);
  static void cb_favList(Fl_File_Browser*, void*);
  Fl_Button *favUpButton;
  inline void cb_favUpButton_i(Fl_Button*, void*);
  static void cb_favUpButton(Fl_Button*, void*);
  Fl_Button *favDeleteButton;
  inline void cb_favDeleteButton_i(Fl_Button*, void*);
  static void cb_favDeleteButton(Fl_Button*, void*);
  Fl_Button *favDownButton;
  inline void cb_favDownButton_i(Fl_Button*, void*);
  static void cb_favDownButton(Fl_Button*, void*);
  Fl_Button *favCancelButton;
  inline void cb_favCancelButton_i(Fl_Button*, void*);
  static void cb_favCancelButton(Fl_Button*, void*);
  Fl_Return_Button *favOkButton;
  inline void cb_favOkButton_i(Fl_Return_Button*, void*);
  static void cb_favOkButton(Fl_Return_Button*, void*);
public:
  ~Fl_File_Chooser();
  void callback(void (*cb)(Fl_File_Chooser *, void *), void *d = 0);
    /** Sets the background color of the Fl_File_Browser list. */
  void color(Fl_Color c);
    /** Gets the background color of the Fl_File_Browser list. */
  Fl_Color color();
    /** Returns the number of selected files. */
  int count();
    /** Sets the current directory. */
  void directory(const char *new_directory);
    /** Gets the current directory. */
  char * directory();
    /** Sets the current filename filter pattern. */
  void filter(const char *new_pattern);
    /** Gets the current filename filter pattern. */
  const char * filter();
    /** Gets the current filename filter selection. */
  int filter_value();
    /** Sets the current filename filter selection. */
  void filter_value(int index);
    /** Hides the Fl_File_Chooser window. */
  void hide();
    /** Sets the size of the icons in the Fl_File_Browser. By default the
     * icon size is set to 1.5 times the textsize(). */
  void iconsize(uchar s);
    /** Gets the size of the icons in the Fl_File_Browser. */
  uchar iconsize();
    /** Gets the title bar text for the Fl_File_Chooser. */
  void label(const char *new_label);
    /** Gets the title bar text for the Fl_File_Chooser. */
  const char * label();
    /** Enables or disables the preview box in the file chooser. */
  void preview(int on_off);
    /** Returns the current state of the preview box. */
  int preview() const { return previewButton->value(); };
    /** Reloads the current directory in the Fl_File_Browser. */
  void rescan();
    /** Shows the Fl_File_Chooser window. */
  void show();
  int shown();
    /** Sets the current Fl_File_Browser text color. */
  void textcolor(Fl_Color new_color);
    /** ets the current Fl_File_Browser text color. */
  Fl_Color textcolor();
    /** Sets the current Fl_File_Browser text font. */
  void textfont(uchar myfont);
    /** Gets the current Fl_File_Browser text font. */
  uchar textfont();
    /** Sets the current Fl_File_Browser text size. */
  void textsize(uchar pixels);
    /** Gets the current Fl_File_Browser text size. */
  uchar textsize();
    /** Gets the current type of Fl_File_Chooser. */
  void type(int t);
    /** Sets the current type of Fl_File_Chooser. */
  int type();
    /** Gets the name of one of the the currently selected files. 
     * \see count() */
  const char *value(int index = 1);
    /** Sets the current value of the selected file. */
  void value(const char *filename);
    /** Returns 1 if the Fl_File_Chooser window is visible. */
  int visible();
  static const char *add_favorites_label;
  static const char *all_files_label;
  static const char *custom_filter_label;
  static const char *existing_file_label;
  static const char *favorites_label;
  static const char *filename_label;
  static const char *filesystems_label;
  static const char *manage_favorites_label;
  static const char *new_directory_label;
  static const char *preview_label;
  static const char *show_label;
  static Fl_File_Sort_F *sort;
};
FL_EXPORT char *fl_dir_chooser(const char *message,const char *fname,int relative=0);
FL_EXPORT char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);
FL_EXPORT void fl_file_chooser_callback(void (*cb)(const char*));
#endif
