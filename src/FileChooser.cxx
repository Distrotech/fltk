// generated by Fast Light User Interface Designer (fluid) version 2.0100

#include "FileChooser.h"
#include <fltk/draw.h>

inline void FileChooser::cb_window_i(fltk::DoubleBufferWindow*, void*) {
  fileName->value("");
  fileList->deselect();
  Fl::remove_timeout((Fl_Timeout_Handler)previewCB, this);
  window->hide();
}
void FileChooser::cb_window(fltk::DoubleBufferWindow* o, void* v) {
  ((FileChooser*)(o->user_data()))->cb_window_i(o,v);
}

inline void FileChooser::cb_showChoice_i(fltk::Choice*, void*) {
  showChoiceCB();
}
void FileChooser::cb_showChoice(fltk::Choice* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_showChoice_i(o,v);
}

inline void FileChooser::cb_newButton_i(fltk::Button*, void*) {
  newdir();
}
void FileChooser::cb_newButton(fltk::Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_newButton_i(o,v);
}

#include <fltk/xbmImage.h>
static const unsigned char bits_new[32] = {
0,0,120,0,132,0,2,1,1,254,1,128,49,128,49,128,253,128,253,128,49,128,49,128,
1,128,1,128,255,255,0,0};
static fltk::xbmImage bitmap_new(bits_new, 16, 16);

inline void FileChooser::cb_previewButton_i(fltk::CheckButton*, void*) {
  preview(previewButton->value());
}
void FileChooser::cb_previewButton(fltk::CheckButton* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->parent()->user_data()))->cb_previewButton_i(o,v);
}

inline void FileChooser::cb_okButton_i(fltk::ReturnButton*, void*) {
  // Do any callback that is registered...
  if (callback_)
    (*callback_)(this, data_);
  
  window->hide();
}
void FileChooser::cb_okButton(fltk::ReturnButton* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->parent()->user_data()))->cb_okButton_i(o,v);
}

inline void FileChooser::cb_cancelButton_i(fltk::Button*, void*) {
  fileName->value("");
  fileList->deselect();
  Fl::remove_timeout((Fl_Timeout_Handler)previewCB, this);
  window->hide();
}
void FileChooser::cb_cancelButton(fltk::Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->parent()->user_data()))->cb_cancelButton_i(o,v);
}

inline void FileChooser::cb_favUpButton_i(fltk::Button*, void*) {
  favoritesCB(favUpButton);
}
void FileChooser::cb_favUpButton(fltk::Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_favUpButton_i(o,v);
}

inline void FileChooser::cb_favDeleteButton_i(fltk::Button*, void*) {
  favoritesCB(favDeleteButton);
}
void FileChooser::cb_favDeleteButton(fltk::Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_favDeleteButton_i(o,v);
}

inline void FileChooser::cb_favDownButton_i(fltk::Button*, void*) {
  favoritesCB(favDownButton);
}
void FileChooser::cb_favDownButton(fltk::Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_favDownButton_i(o,v);
}

inline void FileChooser::cb_favCancelButton_i(fltk::Button*, void*) {
  favWindow->hide();
}
void FileChooser::cb_favCancelButton(fltk::Button* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_favCancelButton_i(o,v);
}

inline void FileChooser::cb_favOkButton_i(fltk::ReturnButton*, void*) {
  favoritesCB(favOkButton);
}
void FileChooser::cb_favOkButton(fltk::ReturnButton* o, void* v) {
  ((FileChooser*)(o->parent()->parent()->user_data()))->cb_favOkButton_i(o,v);
}

FileChooser::FileChooser(const char *d, const char *p, int t, const char *title) {
  fltk::DoubleBufferWindow* w;
   {fltk::DoubleBufferWindow* o = window = new fltk::DoubleBufferWindow(490, 380, "Choose File");
    o->type(241);
    o->callback((fltk::Callback*)cb_window, (void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(10, 10, 470, 25);
      o->begin();
       {fltk::Choice* o = showChoice = new fltk::Choice(55, 0, 215, 25, "Show:");
        o->labelfont(fltk::HELVETICA_BOLD);
        o->callback((fltk::Callback*)cb_showChoice);
        showChoice->label(show_label);
        fltk::Group::current()->resizable(o);
      }
       {fltk::Button* o = newButton = new fltk::Button(445, 0, 25, 25);
        o->image(bitmap_new);
        o->labelsize(8);
        o->callback((fltk::Callback*)cb_newButton);
        o->tooltip(new_directory_tooltip);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(10, 275, 470, 95);
      o->begin();
       {fltk::Group* o = new fltk::Group(0, 0, 470, 20);
        o->begin();
         {fltk::CheckButton* o = previewButton = new fltk::CheckButton(0, 0, 73, 20, "Preview");
          o->set_value();
          o->shortcut(0x80070);
          o->callback((fltk::Callback*)cb_previewButton);
          previewButton->label(preview_label);
        }
         {fltk::InvisibleBox* o = new fltk::InvisibleBox(105, 0, 365, 20);
          fltk::Group::current()->resizable(o);
        }
        o->end();
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 35, 105, 25, "Filename:");
        o->labelfont(fltk::HELVETICA_BOLD);
        o->align(fltk::ALIGN_RIGHT|fltk::ALIGN_INSIDE);
        o->label(filename_label);
      }
       {fltk::Group* o = new fltk::Group(0, 70, 470, 25);
        o->begin();
         {fltk::ReturnButton* o = okButton = new fltk::ReturnButton(303, 0, 85, 25, "OK");
          o->shortcut(0xff0d);
          o->callback((fltk::Callback*)cb_okButton);
          okButton->label(fl_ok);
        }
         {fltk::Button* o = cancelButton = new fltk::Button(398, 0, 72, 25, "Cancel");
          o->callback((fltk::Callback*)cb_cancelButton);
          o->label(fl_cancel);
        }
         {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 0, 30, 25);
          fltk::Group::current()->resizable(o);
        }
        o->end();
        fltk::Group::current()->resizable(o);
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
    o->end();
    if (title) window->label(title);
    o->set_modal();
  }
   {fltk::DoubleBufferWindow* o = favWindow = new fltk::DoubleBufferWindow(355, 150, "Manage Favorites");
    w = o;
    o->type(241);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(320, 10, 25, 95);
      o->set_vertical();
      o->begin();
       {fltk::Button* o = favUpButton = new fltk::Button(0, 0, 25, 25, "@8>");
        o->callback((fltk::Callback*)cb_favUpButton);
      }
       {fltk::Button* o = favDeleteButton = new fltk::Button(0, 35, 25, 25, "X");
        o->labelfont(fltk::HELVETICA_BOLD);
        o->callback((fltk::Callback*)cb_favDeleteButton);
        fltk::Group::current()->resizable(o);
      }
       {fltk::Button* o = favDownButton = new fltk::Button(0, 70, 25, 25, "@2>");
        o->callback((fltk::Callback*)cb_favDownButton);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(10, 113, 335, 29);
      o->begin();
       {fltk::Button* o = favCancelButton = new fltk::Button(263, 2, 72, 25, "Cancel");
        o->callback((fltk::Callback*)cb_favCancelButton);
        favCancelButton->label(fl_cancel);
      }
       {fltk::ReturnButton* o = favOkButton = new fltk::ReturnButton(171, 2, 79, 25, "Save");
        o->shortcut(0xff0d);
        o->callback((fltk::Callback*)cb_favOkButton);
        favOkButton->label(save_label);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 2, 161, 25);
        fltk::Group::current()->resizable(o);
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
    o->end();
    favWindow->label(manage_favorites_label);
    o->set_modal();
  }
  callback_ = 0;
  data_ = 0;
  directory_[0] = 0;
  window->size_range(window->w(), window->h(), Fl::w(), Fl::h());
  type(t);
  filter(p);
  update_favorites();
  value(d);
  type(t);
  int e;
  prefs_.get("preview", e, 1);
  preview(e);
}

FileChooser::~FileChooser() {
  Fl::remove_timeout((Fl_Timeout_Handler)previewCB, this);
  delete window;
  delete favWindow;
}

void FileChooser::callback(void (*cb)(FileChooser *, void *), void *d ) {
  callback_ = cb;
  data_     = d;
}

void FileChooser::color(Color c) {
  fileList->color(c);
}

Color FileChooser::color() {
  return (fileList->color());
}

char * FileChooser::directory() {
  return directory_;
}

const char * FileChooser::filter() {
  return (fileList->filter());
}

int FileChooser::filter_value() {
  return showChoice->value();
}

void FileChooser::filter_value(int f) {
  showChoice->value(f);
  showChoiceCB();
}

void FileChooser::hide() {
  window->hide();
}

void FileChooser::iconsize(uchar s) {
  fileList->iconsize(s);
}

uchar FileChooser::iconsize() {
  return (fileList->iconsize());
}

void FileChooser::label(const char *l) {
  window->label(l);
}

const char * FileChooser::label() {
  return (window->label());
}

void FileChooser::ok_label(const char *l) {
  okButton->label(l);
  int w=0, h=0;
  okButton->measure_label(w, h);
  okButton->resize(cancelButton->x() - 50 - w, cancelButton->y(),
                   w + 40, 25);
  okButton->parent()->init_sizes();
}

const char * FileChooser::ok_label() {
  return (okButton->label());
}

void FileChooser::show() {
  window->hotspot(fileList);
  window->show();
  Fl::flush();
  fl_cursor(CURSOR_WAIT);
  rescan();
  fl_cursor(CURSOR_DEFAULT);
  fileName->take_focus();
}

int FileChooser::shown() {
  return window->shown();
}

void FileChooser::textcolor(Color c) {
  fileList->textcolor(c);
}

Color FileChooser::textcolor() {
  return (fileList->textcolor());
}

void FileChooser::textfont(uchar f) {
  fileList->textfont(f);
}

uchar FileChooser::textfont() {
  return (fileList->textfont());
}

void FileChooser::textsize(uchar s) {
  fileList->textsize(s);
}

uchar FileChooser::textsize() {
  return (fileList->textsize());
}

void FileChooser::type(int t) {
  type_ = t;
  if (t & MULTI)
    fileList->type(MULTI_BROWSER);
  else
    fileList->type(HOLD_BROWSER);
  if (t & CREATE)
    newButton->activate();
  else
    newButton->deactivate();
  if (t & DIRECTORY)
    fileList->filetype(FileBrowser::DIRECTORIES);
  else
    fileList->filetype(FileBrowser::FILES);
}

int FileChooser::type() {
  return (type_);
}

void * FileChooser::user_data() const {
  return (data_);
}

void FileChooser::user_data(void *d) {
  data_ = d;
}

int FileChooser::visible() {
  return window->visible();
}
char *fl_dir_chooser(const char *message,const char *fname,int relative=0);
char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);
void fl_file_chooser_callback(void (*cb)(const char*));
void fl_file_chooser_ok_label(const char*l);
