// generated by Fast Light User Interface Designer (fluid) version 2.0100

#ifndef FileChooser_h
#define FileChooser_h
#include <fltk/DoubleBufferWindow.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fltk/Group.h>
#include <fltk/Choice.h>
#include <fltk/Button.h>
#include <fltk/Preferences.h>
#include <fltk/CheckButton.h>
#include <fltk/InvisibleBox.h>
#include <fltk/ReturnButton.h>
#include <FL/fl_ask.H>

class FileChooser  {
public:
  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 };
private:
  static Preferences prefs_;
  void (*callback_)(FileChooser*, void *);
  void *data_;
  char directory_[1024];
  char pattern_[1024];
  char preview_text_[2048];
  int type_;
  void favoritesButtonCB();
  void favoritesCB(Fl_Widget *w);
  void fileListCB();
  void fileNameCB();
  void newdir();
  static void previewCB(FileChooser *fc);
  void showChoiceCB();
  void update_favorites();
  void update_preview();
public:
  FileChooser(const char *d, const char *p, int t, const char *title);
private:
  fltk::DoubleBufferWindow *window;
  inline void cb_window_i(fltk::DoubleBufferWindow*, void*);
  static void cb_window(fltk::DoubleBufferWindow*, void*);
      fltk::Choice *showChoice;
      inline void cb_showChoice_i(fltk::Choice*, void*);
      static void cb_showChoice(fltk::Choice*, void*);
public:
      fltk::Button *newButton;
private:
      inline void cb_newButton_i(fltk::Button*, void*);
      static void cb_newButton(fltk::Button*, void*);
public:
        fltk::CheckButton *previewButton;
private:
        inline void cb_previewButton_i(fltk::CheckButton*, void*);
        static void cb_previewButton(fltk::CheckButton*, void*);
        fltk::ReturnButton *okButton;
        inline void cb_okButton_i(fltk::ReturnButton*, void*);
        static void cb_okButton(fltk::ReturnButton*, void*);
        fltk::Button *cancelButton;
        inline void cb_cancelButton_i(fltk::Button*, void*);
        static void cb_cancelButton(fltk::Button*, void*);
  fltk::DoubleBufferWindow *favWindow;
      fltk::Button *favUpButton;
      inline void cb_favUpButton_i(fltk::Button*, void*);
      static void cb_favUpButton(fltk::Button*, void*);
      fltk::Button *favDeleteButton;
      inline void cb_favDeleteButton_i(fltk::Button*, void*);
      static void cb_favDeleteButton(fltk::Button*, void*);
      fltk::Button *favDownButton;
      inline void cb_favDownButton_i(fltk::Button*, void*);
      static void cb_favDownButton(fltk::Button*, void*);
      fltk::Button *favCancelButton;
      inline void cb_favCancelButton_i(fltk::Button*, void*);
      static void cb_favCancelButton(fltk::Button*, void*);
      fltk::ReturnButton *favOkButton;
      inline void cb_favOkButton_i(fltk::ReturnButton*, void*);
      static void cb_favOkButton(fltk::ReturnButton*, void*);
public:
  ~FileChooser();
  void callback(void (*cb)(FileChooser *, void *), void *d = 0);
  void color(Color c);
  Color color();
  int count();
  void directory(const char *d);
  char * directory();
  void filter(const char *p);
  const char * filter();
  int filter_value();
  void filter_value(int f);
  void hide();
  void iconsize(uchar s);
  uchar iconsize();
  void label(const char *l);
  const char * label();
  void ok_label(const char *l);
  const char * ok_label();
  void preview(int e);
  int preview() const { return previewButton->value(); };
  void rescan();
  void show();
  int shown();
  void textcolor(Color c);
  Color textcolor();
  void textfont(uchar f);
  uchar textfont();
  void textsize(uchar s);
  uchar textsize();
  void type(int t);
  int type();
  void * user_data() const;
  void user_data(void *d);
  const char *value(int f = 1);
  void value(const char *filename);
  int visible();
  static const char *add_favorites_label;
  static const char *all_files_label;
  static const char *custom_filter_label;
  static const char *existing_file_label;
  static const char *favorites_label;
  static const char *filename_label;
  static const char *filesystems_label;
  static const char *manage_favorites_label;
  static const char *new_directory_label;
  static const char *new_directory_tooltip;
  static const char *preview_label;
  static const char *save_label;
  static const char *show_label;
  static Fl_File_Sort_F *sort;
};
extern char *fl_dir_chooser(const char *message,const char *fname,int relative=0);
extern char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);
extern void fl_file_chooser_callback(void (*cb)(const char*));
extern void fl_file_chooser_ok_label(const char*l);
#endif
