//
// "$Id$"
//

// 123 TODO: remove stray comments
// 123 TODO: add namespace statements
// 123 TODO: replace class name, constructors and destructor
// 123 TODO: add friend statement for Twin Class
// 123 TODO: add 'compat(FLTK2)' to constructors
// 123 TODO: add twin class with all constructors
// 123 TODO: change all arguments to the FLTK2 class name
// 123 TODO: change the source code to use the new class names
// 123 TODO: add casting to return values
// 123 TODO: move all FLTK2-only functions to the FLTK3 section and implement them
// 123 TODO: remove the FLTK1 and FLTK2 sections in the headers
// 123 TODO: 

//
// "$Id: Fl_File_Chooser.H 7007 2010-01-14 23:08:06Z greg.ercolano $"
//
// Fl_File_Chooser dialog for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2009 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef Fl_File_Chooser_H
#define Fl_File_Chooser_H
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Preferences.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_File_Browser.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Return_Button.H>
#include <FL/fl_ask.H>

class FL_EXPORT Fl_File_Chooser {
public:
  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; 
private:
  static Fl_Preferences prefs_; 
  void (*callback_)(Fl_File_Chooser*, void *); 
  void *data_; 
  char directory_[1024]; 
  char pattern_[1024]; 
  char preview_text_[2048]; 
  int type_; 
  void favoritesButtonCB(); 
  void favoritesCB(Fl_Widget *w); 
  void fileListCB(); 
  void fileNameCB(); 
  void newdir(); 
  static void previewCB(Fl_File_Chooser *fc); 
  void showChoiceCB(); 
  void update_favorites(); 
  void update_preview(); 
public:
  Fl_File_Chooser(const char *d, const char *p, int t, const char *title);
private:
  Fl_Double_Window *window;
  void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
  Fl_Choice *showChoice;
  void cb_showChoice_i(Fl_Choice*, void*);
  static void cb_showChoice(Fl_Choice*, void*);
  Fl_Menu_Button *favoritesButton;
  void cb_favoritesButton_i(Fl_Menu_Button*, void*);
  static void cb_favoritesButton(Fl_Menu_Button*, void*);
public:
  Fl_Button *newButton;
private:
  void cb_newButton_i(Fl_Button*, void*);
  static void cb_newButton(Fl_Button*, void*);
  void cb__i(Fl_Tile*, void*);
  static void cb_(Fl_Tile*, void*);
  Fl_File_Browser *fileList;
  void cb_fileList_i(Fl_File_Browser*, void*);
  static void cb_fileList(Fl_File_Browser*, void*);
  Fl_Box *previewBox;
public:
  Fl_Check_Button *previewButton;
private:
  void cb_previewButton_i(Fl_Check_Button*, void*);
  static void cb_previewButton(Fl_Check_Button*, void*);
  Fl_File_Input *fileName;
  void cb_fileName_i(Fl_File_Input*, void*);
  static void cb_fileName(Fl_File_Input*, void*);
  Fl_Return_Button *okButton;
  void cb_okButton_i(Fl_Return_Button*, void*);
  static void cb_okButton(Fl_Return_Button*, void*);
  Fl_Button *cancelButton;
  void cb_cancelButton_i(Fl_Button*, void*);
  static void cb_cancelButton(Fl_Button*, void*);
  Fl_Double_Window *favWindow;
  Fl_File_Browser *favList;
  void cb_favList_i(Fl_File_Browser*, void*);
  static void cb_favList(Fl_File_Browser*, void*);
  Fl_Button *favUpButton;
  void cb_favUpButton_i(Fl_Button*, void*);
  static void cb_favUpButton(Fl_Button*, void*);
  Fl_Button *favDeleteButton;
  void cb_favDeleteButton_i(Fl_Button*, void*);
  static void cb_favDeleteButton(Fl_Button*, void*);
  Fl_Button *favDownButton;
  void cb_favDownButton_i(Fl_Button*, void*);
  static void cb_favDownButton(Fl_Button*, void*);
  Fl_Button *favCancelButton;
  void cb_favCancelButton_i(Fl_Button*, void*);
  static void cb_favCancelButton(Fl_Button*, void*);
  Fl_Return_Button *favOkButton;
  void cb_favOkButton_i(Fl_Return_Button*, void*);
  static void cb_favOkButton(Fl_Return_Button*, void*);
public:
  ~Fl_File_Chooser();
  void callback(void (*cb)(Fl_File_Chooser *, void *), void *d = 0);
  void color(Fl_Color c);
  Fl_Color color();
  int count(); 
  void directory(const char *d); 
  char * directory();
  void filter(const char *p); 
  const char * filter();
  int filter_value();
  void filter_value(int f);
  void hide();
  void iconsize(uchar s);
  uchar iconsize();
  void label(const char *l);
  const char * label();
  void ok_label(const char *l);
  const char * ok_label();
  void preview(int e); 
  int preview() const { return previewButton->value(); }; 
  void rescan(); 
  void rescan_keep_filename(); 
  void show();
  int shown();
  void textcolor(Fl_Color c);
  Fl_Color textcolor();
  void textfont(Fl_Font f);
  Fl_Font textfont();
  void textsize(Fl_Fontsize s);
  Fl_Fontsize textsize();
  void type(int t);
  int type();
  void * user_data() const;
  void user_data(void *d);
  const char *value(int f = 1); 
  void value(const char *filename); 
  int visible();
  /**
     [standard text may be customized at run-time]
  */
  static const char *add_favorites_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *all_files_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *custom_filter_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *existing_file_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *favorites_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *filename_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *filesystems_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *manage_favorites_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *new_directory_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *new_directory_tooltip; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *preview_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *save_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *show_label; 
  /**
     the sort function that is used when loading
     the contents of a directory.
  */
  static Fl_File_Sort_F *sort; 
private:
  Fl_Widget* ext_group; 
public:
  Fl_Widget* add_extra(Fl_Widget* gr);
  Fl_File_Browser *browser(void) {return fileList; };
};
FL_EXPORT char *fl_dir_chooser(const char *message,const char *fname,int relative=0);
FL_EXPORT char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);
FL_EXPORT void fl_file_chooser_callback(void (*cb)(const char*));
FL_EXPORT void fl_file_chooser_ok_label(const char*l);
#endif

//
// End of "$Id: Fl_File_Chooser.H 7007 2010-01-14 23:08:06Z greg.ercolano $".
//

/* suggested twin class
// This is the Twin Class to fltk::FileChooser
class Fl_File_Chooser : public fltk::FileChooser {
public:
  Fl_File_Chooser(int x, int t, int w, int h, const char *label=0)
  : fltk::FileChooser(x, y, w, h, label), compat_(FLTK1) { }
};
*/

// ----- FLTK1 -----------------------------------------------------------------
#if 0
//
// "$Id: Fl_File_Chooser.H 7007 2010-01-14 23:08:06Z greg.ercolano $"
//
// Fl_File_Chooser dialog for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2009 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef Fl_File_Chooser_H
#define Fl_File_Chooser_H
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Preferences.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_File_Browser.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Return_Button.H>
#include <FL/fl_ask.H>

class FL_EXPORT Fl_File_Chooser {
public:
  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 }; 
private:
  static Fl_Preferences prefs_; 
  void (*callback_)(Fl_File_Chooser*, void *); 
  void *data_; 
  char directory_[1024]; 
  char pattern_[1024]; 
  char preview_text_[2048]; 
  int type_; 
  void favoritesButtonCB(); 
  void favoritesCB(Fl_Widget *w); 
  void fileListCB(); 
  void fileNameCB(); 
  void newdir(); 
  static void previewCB(Fl_File_Chooser *fc); 
  void showChoiceCB(); 
  void update_favorites(); 
  void update_preview(); 
public:
  Fl_File_Chooser(const char *d, const char *p, int t, const char *title);
private:
  Fl_Double_Window *window;
  void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
  Fl_Choice *showChoice;
  void cb_showChoice_i(Fl_Choice*, void*);
  static void cb_showChoice(Fl_Choice*, void*);
  Fl_Menu_Button *favoritesButton;
  void cb_favoritesButton_i(Fl_Menu_Button*, void*);
  static void cb_favoritesButton(Fl_Menu_Button*, void*);
public:
  Fl_Button *newButton;
private:
  void cb_newButton_i(Fl_Button*, void*);
  static void cb_newButton(Fl_Button*, void*);
  void cb__i(Fl_Tile*, void*);
  static void cb_(Fl_Tile*, void*);
  Fl_File_Browser *fileList;
  void cb_fileList_i(Fl_File_Browser*, void*);
  static void cb_fileList(Fl_File_Browser*, void*);
  Fl_Box *previewBox;
public:
  Fl_Check_Button *previewButton;
private:
  void cb_previewButton_i(Fl_Check_Button*, void*);
  static void cb_previewButton(Fl_Check_Button*, void*);
  Fl_File_Input *fileName;
  void cb_fileName_i(Fl_File_Input*, void*);
  static void cb_fileName(Fl_File_Input*, void*);
  Fl_Return_Button *okButton;
  void cb_okButton_i(Fl_Return_Button*, void*);
  static void cb_okButton(Fl_Return_Button*, void*);
  Fl_Button *cancelButton;
  void cb_cancelButton_i(Fl_Button*, void*);
  static void cb_cancelButton(Fl_Button*, void*);
  Fl_Double_Window *favWindow;
  Fl_File_Browser *favList;
  void cb_favList_i(Fl_File_Browser*, void*);
  static void cb_favList(Fl_File_Browser*, void*);
  Fl_Button *favUpButton;
  void cb_favUpButton_i(Fl_Button*, void*);
  static void cb_favUpButton(Fl_Button*, void*);
  Fl_Button *favDeleteButton;
  void cb_favDeleteButton_i(Fl_Button*, void*);
  static void cb_favDeleteButton(Fl_Button*, void*);
  Fl_Button *favDownButton;
  void cb_favDownButton_i(Fl_Button*, void*);
  static void cb_favDownButton(Fl_Button*, void*);
  Fl_Button *favCancelButton;
  void cb_favCancelButton_i(Fl_Button*, void*);
  static void cb_favCancelButton(Fl_Button*, void*);
  Fl_Return_Button *favOkButton;
  void cb_favOkButton_i(Fl_Return_Button*, void*);
  static void cb_favOkButton(Fl_Return_Button*, void*);
public:
  ~Fl_File_Chooser();
  void callback(void (*cb)(Fl_File_Chooser *, void *), void *d = 0);
  void color(Fl_Color c);
  Fl_Color color();
  int count(); 
  void directory(const char *d); 
  char * directory();
  void filter(const char *p); 
  const char * filter();
  int filter_value();
  void filter_value(int f);
  void hide();
  void iconsize(uchar s);
  uchar iconsize();
  void label(const char *l);
  const char * label();
  void ok_label(const char *l);
  const char * ok_label();
  void preview(int e); 
  int preview() const { return previewButton->value(); }; 
  void rescan(); 
  void rescan_keep_filename(); 
  void show();
  int shown();
  void textcolor(Fl_Color c);
  Fl_Color textcolor();
  void textfont(Fl_Font f);
  Fl_Font textfont();
  void textsize(Fl_Fontsize s);
  Fl_Fontsize textsize();
  void type(int t);
  int type();
  void * user_data() const;
  void user_data(void *d);
  const char *value(int f = 1); 
  void value(const char *filename); 
  int visible();
  /**
     [standard text may be customized at run-time]
  */
  static const char *add_favorites_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *all_files_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *custom_filter_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *existing_file_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *favorites_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *filename_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *filesystems_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *manage_favorites_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *new_directory_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *new_directory_tooltip; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *preview_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *save_label; 
  /**
     [standard text may be customized at run-time]
  */
  static const char *show_label; 
  /**
     the sort function that is used when loading
     the contents of a directory.
  */
  static Fl_File_Sort_F *sort; 
private:
  Fl_Widget* ext_group; 
public:
  Fl_Widget* add_extra(Fl_Widget* gr);
  Fl_File_Browser *browser(void) {return fileList; };
};
FL_EXPORT char *fl_dir_chooser(const char *message,const char *fname,int relative=0);
FL_EXPORT char *fl_file_chooser(const char *message,const char *pat,const char *fname,int relative=0);
FL_EXPORT void fl_file_chooser_callback(void (*cb)(const char*));
FL_EXPORT void fl_file_chooser_ok_label(const char*l);
#endif

//
// End of "$Id: Fl_File_Chooser.H 7007 2010-01-14 23:08:06Z greg.ercolano $".
//
#endif
// ----- FLTK2 -----------------------------------------------------------------
#if 0
// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef FileChooser_h
#define FileChooser_h
// Header for //\n// "$Id: FileChooser.fl 5447 2006-09-19 00:09...
#include <fltk/DoubleBufferWindow.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fltk/Group.h>
#include <fltk/Choice.h>
#include <fltk/PopupMenu.h>
#include <fltk/Button.h>
#include <fltk/Preferences.h>
#include <fltk/TiledGroup.h>
#include <fltk/FileBrowser.h>
#include <fltk/InvisibleBox.h>
#include <fltk/CheckButton.h>
#include <fltk/FileInput.h>
#include <fltk/ReturnButton.h>
#include <fltk/ask.h>

namespace fltk  {

class FL_API FileChooser  {
public:
  enum { SINGLE = 0, MULTI = 1, CREATE = 2, DIRECTORY = 4 };
private:
  static fltk::Preferences prefs_;
  void (*callback_)(FileChooser*, void *);
  void *data_;
  char directory_[1024];
  char pattern_[1024];
  char preview_text_[2048];
  int type_;
  void favoritesButtonCB();
  void favoritesCB(fltk::Widget *w);
  void fileListCB();
  void fileNameCB();
  void newdir();
  static void previewCB(FileChooser *fc);
  void showChoiceCB();
  void update_favorites();
  void update_preview();
  int favorites_showing;
public:
  FileChooser(const char *d, const char *p, int t, const char *title);
private:
  fltk::DoubleBufferWindow *window;
  inline void cb_window_i(fltk::DoubleBufferWindow*, void*);
  static void cb_window(fltk::DoubleBufferWindow*, void*);
      fltk::Choice *showChoice;
      inline void cb_showChoice_i(fltk::Choice*, void*);
      static void cb_showChoice(fltk::Choice*, void*);
      fltk::PopupMenu *favoritesButton;
      inline void cb_favoritesButton_i(fltk::PopupMenu*, void*);
      static void cb_favoritesButton(fltk::PopupMenu*, void*);
public:
      fltk::Button *newButton;
private:
      inline void cb_newButton_i(fltk::Button*, void*);
      static void cb_newButton(fltk::Button*, void*);
    inline void cb__i(fltk::TiledGroup*, void*);
    static void cb_(fltk::TiledGroup*, void*);
      fltk::FileBrowser *fileList;
      inline void cb_fileList_i(fltk::FileBrowser*, void*);
      static void cb_fileList(fltk::FileBrowser*, void*);
      fltk::InvisibleBox *previewBox;
public:
        fltk::CheckButton *previewButton;
private:
        inline void cb_previewButton_i(fltk::CheckButton*, void*);
        static void cb_previewButton(fltk::CheckButton*, void*);
public:
        fltk::CheckButton *showHiddenButton;
private:
        inline void cb_showHiddenButton_i(fltk::CheckButton*, void*);
        static void cb_showHiddenButton(fltk::CheckButton*, void*);
      fltk::FileInput *fileName;
      inline void cb_fileName_i(fltk::FileInput*, void*);
      static void cb_fileName(fltk::FileInput*, void*);
        fltk::ReturnButton *okButton;
        inline void cb_okButton_i(fltk::ReturnButton*, void*);
        static void cb_okButton(fltk::ReturnButton*, void*);
        fltk::Button *cancelButton;
        inline void cb_cancelButton_i(fltk::Button*, void*);
        static void cb_cancelButton(fltk::Button*, void*);
  fltk::DoubleBufferWindow *favWindow;
    fltk::FileBrowser *favList;
    inline void cb_favList_i(fltk::FileBrowser*, void*);
    static void cb_favList(fltk::FileBrowser*, void*);
      fltk::Button *favUpButton;
      inline void cb_favUpButton_i(fltk::Button*, void*);
      static void cb_favUpButton(fltk::Button*, void*);
      fltk::Button *favDeleteButton;
      inline void cb_favDeleteButton_i(fltk::Button*, void*);
      static void cb_favDeleteButton(fltk::Button*, void*);
      fltk::Button *favDownButton;
      inline void cb_favDownButton_i(fltk::Button*, void*);
      static void cb_favDownButton(fltk::Button*, void*);
      fltk::Button *favCancelButton;
      inline void cb_favCancelButton_i(fltk::Button*, void*);
      static void cb_favCancelButton(fltk::Button*, void*);
      fltk::ReturnButton *favOkButton;
      inline void cb_favOkButton_i(fltk::ReturnButton*, void*);
      static void cb_favOkButton(fltk::ReturnButton*, void*);
public:
  ~FileChooser();
  void callback(void (*cb)(FileChooser *, void *), void *d = 0);
  void color(Color c);
  Color color();
  int count();
  void directory(const char *d);
  char * directory();
  void filter(const char *p);
  const char * filter();
  int filter_value();
  void filter_value(int f);
  void hide();
  void icon_size(uchar s);
  uchar icon_size();
  void label(const char *l);
  const char * label();
  void ok_label(const char *l);
  const char * ok_label();
  void preview(int e);
  int preview() const { return previewButton->value(); };
  void rescan();
  void show();
  void show(int x, int y);
  bool exec(Window* p, bool grab);
  int shown();
  void textcolor(Color c);
  Color textcolor();
  void textfont(Font* f);
  Font* textfont();
  void textsize(float s);
  float textsize();
  void type(int t);
  int type();
  void * user_data() const;
  void user_data(void *d);
  const char *value(int f = 1);
  void value(const char *filename);
  int visible();
  void favorites(int e);
  int favorites() const;
  static const char *add_favorites_label;
  static const char *all_files_label;
  static const char *custom_filter_label;
  static const char *existing_file_label;
  static const char *favorites_label;
  static const char *filename_label;
  static const char *filesystems_label;
  static const char *manage_favorites_label;
  static const char *new_directory_label;
  static const char *new_directory_tooltip;
  static const char *preview_label;
  static const char *save_label;
  static const char *show_label;
  static File_Sort_F *sort;
};
extern FL_API void file_chooser_ok_label(const char*l);
}
// Header for //\n// End of "$Id: FileChooser.fl 5447 2006-09-1...
#endif
#endif
// ----- END -------------------------------------------------------------------
//
// End of "$Id$"
//
