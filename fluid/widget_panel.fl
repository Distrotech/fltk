# data file for the FLTK User Interface Designer (FLUID)
version 2.0000 
images_dir ./ 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 2
Function {make_widget_panel()} {open
} {
  Fl_Window {} {open
    xywh {119 275 380 375} resizable hotspot visible
  } {
    Fl_Tabs panel_tabs {
      callback propagate_tabs open
      xywh {10 10 360 320} resizable
    } {
      Fl_Group {} {
        label GUI
        callback propagate_group open selected
        xywh {10 35 360 295} resizable
      } {
        Fl_Input {} {
          label {Label:}
          callback label_cb
          tooltip {Text displayed on or next to the widget}
          xywh {90 45 270 20} when 1
        }
        Fl_Button {} {
          label clip
          user_data FL_ALIGN_CLIP
          callback align_cb
          tooltip {Turn on clipping to the widget's area when drawing
label.  This is slower so it should be left off if label will fit}
          xywh {130 95 40 20} type Toggle box THIN_UP_BOX labelsize 12
        }
        Fl_Button {} {
          label wrap
          user_data FL_ALIGN_WRAP
          callback align_cb
          tooltip {Word-wrap the label}
          xywh {170 95 40 20} type Toggle box THIN_UP_BOX labelsize 12
        }
        Fl_Button {} {
          label {@-1<-}
          user_data FL_ALIGN_LEFT
          callback align_cb
          tooltip {Places label on the left of the widget}
          xywh {210 95 20 20} type Toggle box THIN_UP_BOX labeltype SYMBOL_LABEL
        }
        Fl_Button {} {
          label {@-1->}
          user_data FL_ALIGN_RIGHT
          callback align_cb
          tooltip {Places label on the right of the widget}
          xywh {230 95 20 20} type Toggle box THIN_UP_BOX labeltype SYMBOL_LABEL
        }
        Fl_Button {} {
          label {@-18}
          user_data FL_ALIGN_TOP
          callback align_cb
          tooltip {Places label on the top of the widget}
          xywh {250 95 20 20} type Toggle box THIN_UP_BOX labeltype SYMBOL_LABEL
        }
        Fl_Button {} {
          label {@-12}
          user_data FL_ALIGN_BOTTOM
          callback align_cb
          tooltip {Places label on the bottom of the widget}
          xywh {270 95 20 20} type Toggle box THIN_UP_BOX labeltype SYMBOL_LABEL
        }
        Fl_Button {} {
          label {@-3square}
          user_data FL_ALIGN_INSIDE
          callback align_cb
          tooltip {Places label inside the widget}
          xywh {290 95 20 20} type Toggle box THIN_UP_BOX labeltype SYMBOL_LABEL
        }
        Fl_Box image_label {
          label {Image:}
          xywh {19 70 71 20} align 24
        }
        Fl_Button {} {
          label {Image name}
          callback image_cb
          tooltip {Select an image to label the widget}
          xywh {90 70 185 20} align 524308 box THIN_DOWN_BOX color 55
        }
        Fl_Group {} {
          label {Attributes:}
          callback propagate_group open
          xywh {90 160 245 20} align 4
        } {
          Fl_Light_Button {} {
            label Visible
            callback visible_cb
            tooltip {Determines whether the widget is initially visible}
            xywh {90 160 55 20} selection_color 1 labelsize 10
          }
          Fl_Light_Button {} {
            label Active
            callback active_cb
            tooltip {Determines whether the widget is initially active (enabled)}
            xywh {145 160 55 20} selection_color 1 labelsize 10
          }
          Fl_Light_Button {} {
            label Resizable
            callback resizable_cb
            tooltip {If on, this widget and all it's parents are resizable.  When the parent resizes it moves/resizes all it's children so that this widget's edges remain the same distance from all four sides of the parent.  If this is off this widget will not resize, unless it overlaps a resizable sibling.}
            xywh {200 160 70 20} when 1 selection_color 1 labelsize 10
          }
          Fl_Light_Button {} {
            label Hotspot
            callback hotspot_cb
            tooltip {Positions the window so this widget is under the mouse.  This is done when show() is called.}
            xywh {270 160 62 20} when 1 selection_color 1 labelsize 10
          }
        }
        Fl_Button {} {
          label {Shortcut:}
          callback shortcut_in_cb
          tooltip {To set a shortcut click here, then type the key combination you want.  To delete the shortcut type backspace.  To stop setting the shortcut click the mouse on some other field.}
          xywh {90 185 270 20} align 524292 box THIN_DOWN_BOX color 7 selection_color 7
          code0 {\#include "Shortcut_Button.h"}
          class Shortcut_Button
        }
        Fl_Input {} {
          label {X Class:}
          callback xclass_cb
          tooltip {The X class name which should be used for this widget.  This can be used to choose icons.}
          xywh {90 135 90 20} when 1
        }
        Fl_Input {} {
          label {Tooltip:}
          callback tooltip_cb
          tooltip {The pop up tooltip which should be used for the widget.}
          xywh {90 210 270 110} type Multiline
        }
        Fl_Box {} {
          label resizable
          xywh {90 210 270 110} hide deactivate resizable
        }
        Fl_Value_Input {} {
          label {Size:}
          callback slider_size_cb
          tooltip {The size of the scroller}
          xywh {255 135 55 20} align 4101 hide labelsize 10
        }
        Fl_Value_Input {} {
          label {Minimum:}
          callback min_cb
          tooltip {The minimum value for this valuator}
          xywh {145 135 55 20} align 4101 hide labelsize 10
        }
        Fl_Value_Input {} {
          label {Maximum:}
          callback max_cb
          tooltip {The maximum value for this valuator}
          xywh {200 135 55 20} align 4101 hide labelsize 10 value 1
        }
        Fl_Value_Input {} {
          label {Step:}
          callback step_cb
          tooltip {Amount to change this valuator when mouse moves 1 pixel}
          xywh {310 135 50 20} align 4101 hide labelsize 10
        }
        Fl_Value_Input {} {
          label {Value:}
          callback value_cb
          tooltip {The initial value (integer) of this widget}
          xywh {90 135 55 20} align 4101 hide labelsize 10
        }
        Fl_Button {} {
          label tiled
          user_data FL_ALIGN_TILED
          callback align_cb
          tooltip {Draw the image tiled}
          xywh {90 95 40 20} type Toggle box THIN_UP_BOX labelsize 12
        }
        Fl_Light_Button include_image_button {
          label {image inlined}
          callback image_inlined_cb
          tooltip {Include the datas of the image inlined in 
the code or keep it in an external file}
          xywh {280 70 80 20} align 524436 box THIN_UP_BOX labelsize 10
        }
        Fl_Box {} {
          label {Alignment:}
          xywh {20 95 70 20} align 24
        }
        Fl_Light_Button {} {
          label Nonmodal
          callback non_modal_cb
          tooltip {This window will stay on top of others in the application.}
          xywh {290 135 70 20} selection_color 1 labelsize 10
        }
        Fl_Light_Button {} {
          label Modal
          callback modal_cb
          tooltip {This window will stay on top of others in the
application and will prevent events from going to other windows.}
          xywh {235 135 55 20} selection_color 1 labelsize 10
        }
        Fl_Light_Button {} {
          label Border
          callback border_cb
          tooltip {Enable the window manager border}
          xywh {180 135 55 20} selection_color 1 labelsize 10
        }
      }
      Fl_Group {} {
        label Style
        callback propagate_group
        xywh {10 35 360 295} hide
      } {
        Fl_Choice {} {
          label {Label Type:}
          callback labeltype_cb
          tooltip {How to draw the label}
          xywh {95 70 220 20} box THIN_UP_BOX textsize 12
          code0 {extern Fl_Menu_Item labeltypemenu[];}
          code1 {o->menu(labeltypemenu);}
        } {}
        Fl_Choice {} {
          label {Label Font:}
          callback labelfont_cb
          tooltip {Font to use for the label}
          xywh {95 95 174 20} box THIN_UP_BOX
          code0 {extern Fl_Menu_Item fontmenu[];}
          code1 {o->menu(fontmenu);}
        } {}
        Fl_Value_Input {} {
          callback labelsize_cb
          tooltip {Size of the font to use for the label}
          xywh {269 95 46 20} maximum 100 step 1 value 14
        }
        Fl_Choice {} {
          label {Text Font:}
          callback textfont_cb
          tooltip {Font to use for text displayed inside the widget}
          xywh {95 120 174 20} box THIN_UP_BOX
          code0 {extern Fl_Menu_Item fontmenu[];}
          code1 {o->menu(fontmenu);}
        } {}
        Fl_Value_Input {} {
          callback textsize_cb
          tooltip {Size of the font to use for text displayed inside the widget}
          xywh {269 120 46 20} maximum 100 step 1 value 14
        }
        Fl_Choice {} {
          label {Box:}
          callback box_cb
          tooltip {Type of box to draw around the widget}
          xywh {95 45 220 20} box THIN_UP_BOX
          code0 {extern Fl_Menu_Item boxmenu[];}
          code1 {o->menu(boxmenu);}
        } {}
        Fl_Light_Button {} {
          label Color
          callback color_cb
          tooltip {The background color of the widget}
          xywh {95 145 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Light_Button {} {
          label {Label Color}
          callback labelcolor_cb
          tooltip {Color to draw the label}
          xywh {215 145 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Light_Button {} {
          label {Selection Color}
          callback color2_cb
          tooltip {Color to draw selected portions (usage varies)}
          xywh {95 185 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Light_Button {} {
          label {Text Color}
          callback textcolor_cb
          tooltip {Color to draw text displayed inside the widget}
          xywh {215 205 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Light_Button {} {
          label {Highlight Color}
          callback highlightcolor_cb
          tooltip {Color to use to draw the widget highlighted.  The black color in the upper-left of the color chooser disables highlighting}
          xywh {95 165 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Light_Button {} {
          label {Selected Text Color}
          callback selected_textcolor_cb
          tooltip {Color to draw selected text inside the widget}
          xywh {215 185 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Light_Button {} {
          label {Off color}
          callback color3_cb
          tooltip {Color to draw checkmarks when off}
          xywh {95 205 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Button {} {
          label {Default Style}
          callback default_cb
          tooltip {Resets the style to this widget's default values}
          xywh {20 295 95 25}
        }
        Fl_Light_Button {} {
          label {Highlight Label Color}
          callback highlight_label_color_cb
          tooltip {Color to draw the label when the widget is highlighted}
          xywh {215 165 120 20} box THIN_UP_BOX labelsize 10
          code0 {o->type(0);}
        }
        Fl_Box {} {
          label resizable
          xywh {30 235 290 30} hide deactivate resizable
        }
        Fl_Box {} {
          label {Colors:}
          xywh {30 145 65 20} align 24
        }
      }
      Fl_Group {} {
        label {C++}
        callback propagate_group
        xywh {10 35 360 295} hide
      } {
        Fl_Input {} {
          label {Name:}
          callback name_cb
          tooltip {The variable or member name in which to store a pointer to this widget.}
          xywh {90 70 217 20} when 1
        }
        Fl_Light_Button {} {
          label public
          callback name_public_cb
          tooltip {Make the variable public}
          xywh {307 70 53 20} when 1 box THIN_UP_BOX labelsize 10
        }
        Fl_Input {v_input[0]} {
          label {Extra Code:}
          user_data 0
          callback v_input_cb
          tooltip {Extra code to be exectuted when the widget is created}
          xywh {90 95 270 20}
        }
        Fl_Input {v_input[1]} {
          user_data 1
          callback v_input_cb
          tooltip {Extra code to be exectuted when the widget is created}
          xywh {90 115 270 20}
        }
        Fl_Input {v_input[2]} {
          user_data 2
          callback v_input_cb
          tooltip {Extra code to be exectuted when the widget is created}
          xywh {90 135 270 20}
        }
        Fl_Input {v_input[3]} {
          user_data 3
          callback v_input_cb
          tooltip {Extra code to be exectuted when the widget is created}
          xywh {90 155 270 20}
        }
        Fl_Box callback_label {
          label {Callback:}
          xywh {20 180 70 20} align 24
        }
        Fl_Input {} {
          callback callback_cb
          tooltip {The name of the callback function, or code body of the callback function}
          xywh {90 180 270 95} type Multiline
        }
        Fl_Input {} {
          label {User Data:}
          callback user_data_cb
          tooltip {Value passed as the second argument to the callback.  This must be of the type given below.}
          xywh {90 280 137 20}
        }
        Fl_Choice {} {
          label {When:}
          callback when_cb
          tooltip {What actions cause the callback to be called.}
          xywh {265 280 95 20} when 0 box THIN_UP_BOX labelsize 10
          code0 {extern Fl_Menu_Item whenmenu[];}
          code1 {o->menu(whenmenu);}
        } {}
        Fl_Input {} {
          label {Type:}
          callback user_data_type_cb
          tooltip {Type of the user data (must \\"long\\" or a pointer type)}
          xywh {90 300 137 20}
        }
        Fl_Light_Button {} {
          label {no change}
          callback when_button_cb
          tooltip {Further modifies When so that the callback is done even if the widget's value has not changed.}
          xywh {265 300 95 20} when 0 box THIN_UP_BOX selection_color 1 labelsize 10
        }
        Fl_Box {} {
          label resizable
          xywh {90 200 175 65} hide deactivate resizable
        }
        Fl_Input {} {
          label {Class:}
          user_data 4
          callback subclass_cb
          tooltip {This allows you to name a user-defined class that this widget is an instance of, rather than an fltk built-in class. You will need to add a \#include declaration so that the definition of your class is included in the fluid output.}
          xywh {90 45 175 20} when 1
        }
        Fl_Choice {} {
          callback subtype_cb
          tooltip {Selects a value for type() for this widget}
          xywh {265 45 95 20} box THIN_UP_BOX
        } {}
      }
    }
    Fl_Group {} {open
      xywh {150 340 220 25}
    } {
      Fl_Light_Button overlaybutton {
        label {&Overlays}
        callback overlay_cb
        tooltip {Turns overlays (red outlines)  of the selected  widgets on or off}
        xywh {150 340 90 25} selection_color 1
        code0 {extern int overlays_invisible;}
        code1 {o->value(!overlays_invisible);}
      }
      Fl_Button {} {
        label Cancel
        callback cancel_cb
        xywh {310 340 60 25}
      }
      Fl_Return_Button {} {
        label OK
        callback ok_cb
        tooltip {Closes this attribute window}
        xywh {250 340 50 25}
      }
    }
  }
} 
