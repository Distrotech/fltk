//
// "$Id$"
//
// Widget panel for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2005 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//

// generated by Fast Light User Interface Designer (fluid) version 1.0200

#include "widget_panel.h"

static void cb_(Fl_Tabs* o, void* v) {
  propagate_load((Fl_Group *)o,v);
}

Fl_Value_Input *widget_x_input=(Fl_Value_Input *)0;

Fl_Value_Input *widget_y_input=(Fl_Value_Input *)0;

Fl_Value_Input *widget_w_input=(Fl_Value_Input *)0;

Fl_Value_Input *widget_h_input=(Fl_Value_Input *)0;

Fl_Check_Button *default_labelcolor=(Fl_Check_Button *)0;

static void cb_default_labelcolor(Fl_Check_Button*, void*) {
  custom_labelcolor->do_callback(custom_labelcolor);
}

Fl_Button *custom_labelcolor=(Fl_Button *)0;

Fl_Check_Button *default_color=(Fl_Check_Button *)0;

static void cb_default_color(Fl_Check_Button*, void*) {
  custom_color->do_callback(custom_color);
}

Fl_Button *custom_color=(Fl_Button *)0;

Fl_Check_Button *default_selection_color=(Fl_Check_Button *)0;

static void cb_default_selection_color(Fl_Check_Button*, void*) {
  custom_selection_color->do_callback(custom_selection_color);
}

Fl_Button *custom_selection_color=(Fl_Button *)0;

Fl_Check_Button *default_text_color=(Fl_Check_Button *)0;

static void cb_default_text_color(Fl_Check_Button*, void*) {
  custom_text_color->do_callback(custom_text_color);
}

Fl_Button *custom_text_color=(Fl_Button *)0;

Fl_Input *v_input[4]={(Fl_Input *)0};

Fl_Double_Window* make_widget_panel() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(525, 351);
    w = o;
    o->labelsize(11);
    w->hotspot(o);
    { Fl_Tabs* o = new Fl_Tabs(0, 5, 520, 320);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_);
      o->when(FL_WHEN_NEVER);
      { Fl_Group* o = new Fl_Group(23, 30, 497, 290, "GUI");
        o->labelsize(11);
        o->callback((Fl_Callback*)propagate_load);
        o->when(FL_WHEN_NEVER);
        o->hide();
        { Fl_Group* o = new Fl_Group(23, 30, 497, 290);
          o->labelsize(11);
          o->callback((Fl_Callback*)propagate_load);
          { Fl_Group* o = new Fl_Group(105, 30, 402, 30);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(105, 35, 284, 20, "Label:");
              o->tooltip("The label text for the widget.");
              o->labelfont(1);
              o->labelsize(11);
              o->textsize(11);
              o->callback((Fl_Callback*)label_cb);
              o->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Choice* o = new Fl_Choice(398, 35, 109, 20);
              o->tooltip("The label style for the widget.");
              o->box(FL_THIN_UP_BOX);
              o->down_box(FL_BORDER_BOX);
              o->labelsize(11);
              o->textsize(11);
              o->callback((Fl_Callback*)labeltype_cb);
              o->menu(labeltypemenu);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(105, 60, 401, 25);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(105, 60, 241, 20, "Image:");
              o->tooltip("The active image for the widget.");
              o->labelfont(1);
              o->labelsize(11);
              o->textsize(11);
              o->callback((Fl_Callback*)image_cb);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Button* o = new Fl_Button(436, 60, 70, 20, "Browse...");
              o->tooltip("Click to choose the active image.");
              o->labelsize(11);
              o->callback((Fl_Callback*)image_browse_cb);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(104, 85, 416, 25);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(105, 85, 240, 20, "Inactive:");
              o->tooltip("The inactive image for the widget.");
              o->labelfont(1);
              o->labelsize(11);
              o->textsize(11);
              o->callback((Fl_Callback*)inactive_cb);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Button* o = new Fl_Button(433, 85, 70, 20, "Browse...");
              o->tooltip("Click to choose the inactive image.");
              o->labelsize(11);
              o->callback((Fl_Callback*)inactive_browse_cb);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(105, 111, 309, 20, "Alignment:");
            o->labelfont(1);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            o->align(FL_ALIGN_LEFT);
            { Fl_Button* o = new Fl_Button(105, 111, 40, 20, "Clip");
              o->tooltip("Clip the label to the inside of the widget.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_CLIP));
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(150, 111, 45, 20, "Wrap");
              o->tooltip("Wrap the label text.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_WRAP));
            }
            { Fl_Button* o = new Fl_Button(200, 111, 69, 20, "Text/Image");
              o->tooltip("Show the label text over the image.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_TEXT_OVER_IMAGE));
            }
            { Fl_Button* o = new Fl_Button(274, 111, 20, 20, "@-1<-");
              o->tooltip("Left-align the label.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->labelcolor(FL_INACTIVE_COLOR);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_LEFT));
            }
            { Fl_Button* o = new Fl_Button(299, 111, 20, 20, "@-1->");
              o->tooltip("Right-align the label.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->labelcolor(FL_INACTIVE_COLOR);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_RIGHT));
            }
            { Fl_Button* o = new Fl_Button(324, 111, 20, 20, "@-18");
              o->tooltip("Top-align the label.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->labelcolor(FL_INACTIVE_COLOR);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_TOP));
            }
            { Fl_Button* o = new Fl_Button(349, 111, 20, 20, "@-12");
              o->tooltip("Bottom-align the label.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->labelcolor(FL_INACTIVE_COLOR);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_BOTTOM));
            }
            { Fl_Button* o = new Fl_Button(374, 111, 20, 20, "@-3square");
              o->tooltip("Show the label inside the widget.");
              o->type(1);
              o->selection_color(FL_INACTIVE_COLOR);
              o->labelsize(11);
              o->labelcolor(FL_INACTIVE_COLOR);
              o->callback((Fl_Callback*)align_cb, (void*)(FL_ALIGN_INSIDE));
            }
            { Fl_Box* o = new Fl_Box(399, 111, 15, 20);
              o->labelsize(11);
              Fl_Group::current()->resizable(o);
            }
            o->end();
          }
          { Fl_Value_Input* o = widget_x_input = new Fl_Value_Input(105, 150, 60, 20, "X:");
            o->tooltip("The X position of the widget.");
            o->labelsize(11);
            o->maximum(2048);
            o->step(1);
            o->textsize(11);
            o->callback((Fl_Callback*)x_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = new Fl_Box(44, 150, 61, 20, "Position:");
            o->labelfont(1);
            o->labelsize(11);
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          }
          { Fl_Value_Input* o = widget_y_input = new Fl_Value_Input(169, 150, 60, 20, "Y:");
            o->tooltip("The Y position of the widget.");
            o->labelsize(11);
            o->maximum(2048);
            o->step(1);
            o->textsize(11);
            o->callback((Fl_Callback*)y_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Input* o = widget_w_input = new Fl_Value_Input(234, 150, 60, 20, "Width:");
            o->tooltip("The width of the widget.");
            o->labelsize(11);
            o->maximum(2048);
            o->step(1);
            o->textsize(11);
            o->callback((Fl_Callback*)w_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Input* o = widget_h_input = new Fl_Value_Input(299, 150, 60, 20, "Height:");
            o->tooltip("The height of the widget.");
            o->labelsize(11);
            o->maximum(2048);
            o->step(1);
            o->textsize(11);
            o->callback((Fl_Callback*)h_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Box* o = new Fl_Box(49, 190, 55, 20, "Values:");
            o->labelfont(1);
            o->labelsize(11);
            o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
          }
          { Fl_Value_Input* o = new Fl_Value_Input(104, 190, 55, 20, "Size:");
            o->tooltip("The size of the slider.");
            o->labelsize(11);
            o->step(0.010101);
            o->textsize(11);
            o->callback((Fl_Callback*)slider_size_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Input* o = new Fl_Value_Input(164, 190, 55, 20, "Minimum:");
            o->tooltip("The minimum value of the widget.");
            o->labelsize(11);
            o->textsize(11);
            o->callback((Fl_Callback*)min_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Input* o = new Fl_Value_Input(224, 190, 55, 20, "Maximum:");
            o->tooltip("The maximum value of the widget.");
            o->labelsize(11);
            o->value(1);
            o->textsize(11);
            o->callback((Fl_Callback*)max_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Input* o = new Fl_Value_Input(284, 190, 55, 20, "Step:");
            o->tooltip("The resolution of the widget value.");
            o->labelsize(11);
            o->textsize(11);
            o->callback((Fl_Callback*)step_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Fl_Value_Input* o = new Fl_Value_Input(344, 190, 55, 20, "Value:");
            o->tooltip("The current widget value.");
            o->labelsize(11);
            o->textsize(11);
            o->callback((Fl_Callback*)value_cb);
            o->align(FL_ALIGN_TOP_LEFT);
          }
          { Shortcut_Button* o = new Shortcut_Button(104, 215, 404, 20, "Shortcut:");
            o->tooltip("The shortcut key for the widget.");
            o->box(FL_DOWN_BOX);
            o->color(FL_BACKGROUND2_COLOR);
            o->selection_color(FL_BACKGROUND2_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->callback((Fl_Callback*)shortcut_in_cb);
            o->align(FL_ALIGN_LEFT);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Group* o = new Fl_Group(107, 240, 305, 21);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(107, 241, 101, 20, "X Class:");
              o->tooltip("The X resource class.");
              o->labelfont(1);
              o->labelsize(11);
              o->textsize(11);
              o->callback((Fl_Callback*)xclass_cb);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(213, 241, 59, 20, "Border");
              o->tooltip("Add a border around the window.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)border_cb);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(277, 241, 55, 20, "Modal");
              o->tooltip("Make the window modal.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)modal_cb);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(337, 240, 75, 21, "Nonmodal");
              o->tooltip("Make the window non-modal.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)non_modal_cb);
              o->align(132|FL_ALIGN_INSIDE);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(107, 265, 307, 20);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Light_Button* o = new Fl_Light_Button(107, 265, 57, 20, "Visible");
              o->tooltip("Show the widget.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)visible_cb);
            }
            { Fl_Box* o = new Fl_Box(107, 265, 6, 20, "Attributes:");
              o->labelfont(1);
              o->labelsize(11);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(169, 265, 56, 20, "Active");
              o->tooltip("Activate the widget.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)active_cb);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(230, 265, 74, 20, "Resizable");
              o->tooltip("Make the widget resizable.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)resizable_cb);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(309, 265, 64, 20, "Hotspot");
              o->tooltip("Center the window under this widget.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)hotspot_cb);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Box* o = new Fl_Box(394, 265, 20, 20);
              o->labelsize(11);
              Fl_Group::current()->resizable(o);
            }
            o->end();
          }
          { Fl_Input* o = new Fl_Input(107, 290, 406, 20, "Tooltip:");
            o->tooltip("The tooltip text for the widget.");
            o->labelfont(1);
            o->labelsize(11);
            o->textsize(11);
            o->callback((Fl_Callback*)tooltip_cb);
          }
          { Fl_Box* o = new Fl_Box(109, 310, 305, 10);
            o->labelsize(11);
            Fl_Group::current()->resizable(o);
          }
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = new Fl_Group(5, 31, 512, 289, "Style");
        o->labelsize(11);
        o->callback((Fl_Callback*)propagate_load);
        o->when(FL_WHEN_NEVER);
        { Fl_Group* o = new Fl_Group(5, 41, 502, 178);
          o->labelsize(11);
          o->callback((Fl_Callback*)propagate_load);
          { Fl_Group* o = new Fl_Group(66, 46, 441, 100);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Group* o = new Fl_Group(66, 46, 441, 70);
              o->labelsize(11);
              o->callback((Fl_Callback*)propagate_load);
              { Fl_Choice* o = new Fl_Choice(91, 46, 162, 20, "Label font:");
                o->tooltip("The style of the label text.");
                o->box(FL_THIN_UP_BOX);
                o->down_box(FL_BORDER_BOX);
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)labelfont_cb);
                Fl_Group::current()->resizable(o);
                o->menu(fontmenu);
              }
              { Fl_Value_Input* o = new Fl_Value_Input(251, 46, 50, 20);
                o->tooltip("The size of the label text.");
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->labelsize(11);
                o->maximum(100);
                o->step(1);
                o->value(14);
                o->textsize(11);
                o->callback((Fl_Callback*)labelsize_cb);
              }
              { Fl_Check_Button* o = default_labelcolor = new Fl_Check_Button(315, 46, 111, 20, "Label color:");
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)cb_default_labelcolor);
                o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              }
              { Fl_Button* o = custom_labelcolor = new Fl_Button(427, 46, 75, 20, "default");
                o->tooltip("The color of the label text.");
                o->labelsize(11);
                o->callback((Fl_Callback*)labelcolor_cb, (void*)(default_labelcolor));
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(66, 71, 441, 25);
              o->labelsize(11);
              o->callback((Fl_Callback*)propagate_load);
              { Fl_Choice* o = new Fl_Choice(91, 71, 210, 20, "Box:");
                o->tooltip("The \"up\" box of the widget.");
                o->box(FL_THIN_UP_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)box_cb);
                Fl_Group::current()->resizable(o);
                o->menu(boxmenu);
              }
              { Fl_Check_Button* o = default_color = new Fl_Check_Button(320, 71, 106, 20, "Color:");
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)cb_default_color);
                o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              }
              { Fl_Button* o = custom_color = new Fl_Button(427, 71, 75, 20, "default");
                o->tooltip("The background color of the widget.");
                o->labelsize(11);
                o->callback((Fl_Callback*)color_cb, (void*)(default_color));
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(66, 96, 441, 25);
              o->labelsize(11);
              o->callback((Fl_Callback*)propagate_load);
              { Fl_Choice* o = new Fl_Choice(91, 96, 210, 20, "Selection box:");
                o->tooltip("The \"down\" box of the widget.");
                o->box(FL_THIN_UP_BOX);
                o->down_box(FL_BORDER_BOX);
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)down_box_cb);
                Fl_Group::current()->resizable(o);
                o->menu(boxmenu);
              }
              { Fl_Check_Button* o = default_selection_color = new Fl_Check_Button(315, 96, 111, 20, "Selection color:");
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)cb_default_selection_color);
                o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              }
              { Fl_Button* o = custom_selection_color = new Fl_Button(427, 96, 75, 20, "default");
                o->tooltip("The selection color of the widget.");
                o->labelsize(11);
                o->callback((Fl_Callback*)color2_cb, (void*)(default_selection_color));
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(75, 116, 432, 30);
              o->labelsize(11);
              o->callback((Fl_Callback*)propagate_load);
              { Fl_Choice* o = new Fl_Choice(91, 121, 160, 20, "Text font:");
                o->tooltip("The value text style.");
                o->box(FL_DOWN_BOX);
                o->down_box(FL_BORDER_BOX);
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)textfont_cb);
                Fl_Group::current()->resizable(o);
                o->menu(fontmenu);
              }
              { Fl_Value_Input* o = new Fl_Value_Input(250, 121, 50, 20);
                o->tooltip("The value text size.");
                o->color(FL_BACKGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->labelsize(11);
                o->maximum(100);
                o->step(1);
                o->value(14);
                o->textsize(11);
                o->callback((Fl_Callback*)textsize_cb);
              }
              { Fl_Check_Button* o = default_text_color = new Fl_Check_Button(315, 121, 111, 20, "Text color:");
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)cb_default_text_color);
                o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
              }
              { Fl_Button* o = custom_text_color = new Fl_Button(427, 121, 75, 20, "default");
                o->tooltip("The value text color.");
                o->labelsize(11);
                o->callback((Fl_Callback*)textcolor_cb, (void*)(default_text_color));
              }
              o->end();
            }
            o->end();
          }
          { Fl_Box* o = new Fl_Box(107, 151, 295, 68);
            o->labelsize(11);
            Fl_Group::current()->resizable(o);
          }
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(25, 30, 454, 295, "C++");
        o->labelsize(11);
        o->callback((Fl_Callback*)propagate_load);
        o->when(FL_WHEN_NEVER);
        o->hide();
        { Fl_Group* o = new Fl_Group(115, 35, 364, 137);
          o->labelsize(11);
          o->callback((Fl_Callback*)propagate_load);
          { Fl_Group* o = new Fl_Group(115, 35, 364, 25);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(120, 35, 219, 20, "Class:");
              o->tooltip("The widget subclass.");
              o->labelfont(1);
              o->labelsize(11);
              o->textfont(4);
              o->textsize(11);
              o->callback((Fl_Callback*)subclass_cb, (void*)(4));
              Fl_Group::current()->resizable(o);
            }
            { Fl_Choice* o = new Fl_Choice(344, 35, 135, 20);
              o->tooltip("The widget subtype.");
              o->box(FL_THIN_UP_BOX);
              o->down_box(FL_BORDER_BOX);
              o->labelsize(11);
              o->callback((Fl_Callback*)subtype_cb);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(115, 60, 364, 25);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(120, 60, 300, 20, "Name:");
              o->tooltip("The name of the widget.");
              o->labelfont(1);
              o->labelsize(11);
              o->textsize(11);
              o->callback((Fl_Callback*)name_cb);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(425, 60, 54, 20, "public");
              o->tooltip("Make the widget publicly accessible.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)name_public_cb);
              o->when(FL_WHEN_CHANGED);
            }
            o->end();
          }
          { Fl_Input* o = v_input[0] = new Fl_Input(120, 85, 359, 19, "Extra Code:");
            o->tooltip("Extra initialization code for the widget.");
            o->labelfont(1);
            o->labelsize(11);
            o->textfont(4);
            o->textsize(11);
            o->callback((Fl_Callback*)v_input_cb, (void*)(0));
          }
          { Fl_Input* o = v_input[1] = new Fl_Input(120, 105, 359, 19);
            o->tooltip("Extra initialization code for the widget.");
            o->labelsize(11);
            o->textfont(4);
            o->textsize(11);
            o->callback((Fl_Callback*)v_input_cb, (void*)(1));
          }
          { Fl_Input* o = v_input[2] = new Fl_Input(120, 125, 359, 17);
            o->tooltip("Extra initialization code for the widget.");
            o->labelsize(11);
            o->textfont(4);
            o->textsize(11);
            o->callback((Fl_Callback*)v_input_cb, (void*)(2));
          }
          { Fl_Input* o = v_input[3] = new Fl_Input(120, 147, 359, 20);
            o->tooltip("Extra initialization code for the widget.");
            o->labelsize(11);
            o->textfont(4);
            o->textsize(11);
            o->callback((Fl_Callback*)v_input_cb, (void*)(3));
          }
          o->end();
        }
        { CodeEditor* o = new CodeEditor(120, 174, 359, 88, "Callback:");
          o->tooltip("The callback function or code for the widget.");
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->textfont(4);
          o->textsize(11);
          o->callback((Fl_Callback*)callback_cb);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_RELEASE);
        }
        { Fl_Group* o = new Fl_Group(115, 265, 364, 60);
          o->labelsize(11);
          o->callback((Fl_Callback*)propagate_load);
          { Fl_Group* o = new Fl_Group(115, 265, 364, 25);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(120, 270, 186, 20, "User Data:");
              o->tooltip("The user data to pass into the callback code.");
              o->labelfont(1);
              o->labelsize(11);
              o->textfont(4);
              o->textsize(11);
              o->callback((Fl_Callback*)user_data_cb);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Choice* o = new Fl_Choice(375, 270, 104, 20, "When:");
              o->tooltip("When to call the callback function.");
              o->box(FL_THIN_UP_BOX);
              o->down_box(FL_BORDER_BOX);
              o->color(FL_BACKGROUND_COLOR);
              o->labelfont(1);
              o->labelsize(11);
              o->callback((Fl_Callback*)when_cb);
              o->when(FL_WHEN_CHANGED);
              o->menu(whenmenu);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(115, 290, 364, 35);
            o->labelsize(11);
            o->callback((Fl_Callback*)propagate_load);
            { Fl_Input* o = new Fl_Input(120, 295, 186, 25, "Type:");
              o->tooltip("The type of the user data.");
              o->labelfont(1);
              o->labelsize(11);
              o->textfont(4);
              o->textsize(11);
              o->callback((Fl_Callback*)user_data_type_cb);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Light_Button* o = new Fl_Light_Button(373, 295, 106, 25, "No Change");
              o->tooltip("Call the callback even if the value has not changed.");
              o->selection_color((Fl_Color)1);
              o->labelsize(11);
              o->callback((Fl_Callback*)when_button_cb);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Group* o = new Fl_Group(8, 330, 512, 19);
      o->labelsize(11);
      { Fl_Box* o = new Fl_Box(8, 339, 20, 0);
        o->labelsize(11);
        Fl_Group::current()->resizable(o);
      }
      { Fl_Button* o = new Fl_Button(13, 330, 80, 19, "Hide &Overlays");
        o->tooltip("Hide the widget overlay box.");
        o->labelsize(11);
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)overlay_cb);
      }
      { Fl_Button* o = new Fl_Button(159, 339, 80, 0, "Revert");
        o->labelsize(11);
        o->callback((Fl_Callback*)revert_cb);
        o->hide();
      }
      { Fl_Return_Button* o = new Fl_Return_Button(450, 330, 65, 19, "Close");
        o->labelsize(11);
        o->callback((Fl_Callback*)ok_cb);
      }
      { Fl_Button* o = new Fl_Button(329, 339, 70, 0, "Cancel");
        o->labelsize(11);
        o->callback((Fl_Callback*)cancel_cb);
        o->hide();
      }
      o->end();
    }
    o->end();
  }
  return w;
}

//
// End of "$Id$".
//
