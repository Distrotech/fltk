//
// "$Id$"
//
// Code dialogs for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2010 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "function_panel.h"
#include <fltk3/Pixmap.h>
#include "Fl_Type.h"
#include "undo.h"
extern class Fl_Pixmap *pixmap[];
extern class Fl_Type *Fl_Type_make(const char*);
extern void select_only(Fl_Type*);
extern void exit_cb(fltk3::Widget*, void*);
extern void toggle_widgetbin_cb(fltk3::Widget*, void*);

fltk3::DoubleWindow *function_panel=(fltk3::DoubleWindow *)0;

fltk3::Choice *f_public_member_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_f_public_member_choice[] = {
 {"private", 0,  0, (void*)(0), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"public", 0,  0, (void*)(1), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"protected", 0,  0, (void*)(2), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::Choice *f_public_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_f_public_choice[] = {
 {"local", 0,  0, (void*)(0), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"global", 0,  0, (void*)(1), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::LightButton *f_c_button=(fltk3::LightButton *)0;

fltk3::Input *f_name_input=(fltk3::Input *)0;

fltk3::Input *f_return_type_input=(fltk3::Input *)0;

fltk3::ReturnButton *f_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *f_panel_cancel=(fltk3::Button *)0;

Fl_Text_Editor *f_comment_input=(Fl_Text_Editor *)0;

fltk3::DoubleWindow* make_function_panel() {
  { function_panel = new fltk3::DoubleWindow(343, 232, "Function/Method Properties");
    { fltk3::Group* o = new fltk3::Group(10, 10, 270, 20);
      { f_public_member_choice = new fltk3::Choice(10, 10, 75, 20);
        f_public_member_choice->tooltip("Change member access attribute.");
        f_public_member_choice->down_box(fltk3::BORDER_BOX);
        f_public_member_choice->labelsize(11);
        f_public_member_choice->textsize(11);
        f_public_member_choice->when(fltk3::WHEN_CHANGED);
        f_public_member_choice->menu(menu_f_public_member_choice);
      } // fltk3::Choice* f_public_member_choice
      { f_public_choice = new fltk3::Choice(10, 10, 75, 20);
        f_public_choice->tooltip("Change widget accessibility.");
        f_public_choice->down_box(fltk3::BORDER_BOX);
        f_public_choice->labelsize(11);
        f_public_choice->textsize(11);
        f_public_choice->when(fltk3::WHEN_CHANGED);
        f_public_choice->menu(menu_f_public_choice);
      } // fltk3::Choice* f_public_choice
      { f_c_button = new fltk3::LightButton(95, 10, 80, 20, "C declaration");
        f_c_button->tooltip("Declare with a C interface instead of C++.");
        f_c_button->labelsize(11);
      } // fltk3::LightButton* f_c_button
      { fltk3::Box* o = new fltk3::Box(235, 10, 45, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { f_name_input = new fltk3::Input(10, 50, 320, 20, "Name(args): (blank for main())");
      f_name_input->tooltip("The name of the function or method.");
      f_name_input->labelfont(1);
      f_name_input->labelsize(11);
      f_name_input->textfont(4);
      f_name_input->textsize(11);
      f_name_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      f_name_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* f_name_input
    { f_return_type_input = new fltk3::Input(10, 90, 320, 20, "Return Type: (blank to return outermost widget)");
      f_return_type_input->tooltip("The return type of the function or method.");
      f_return_type_input->labelfont(1);
      f_return_type_input->labelsize(11);
      f_return_type_input->textfont(4);
      f_return_type_input->textsize(11);
      f_return_type_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      f_return_type_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* f_return_type_input
    { fltk3::Group* o = new fltk3::Group(10, 200, 320, 20);
      { f_panel_ok = new fltk3::ReturnButton(220, 200, 50, 20, "OK");
        f_panel_ok->tooltip("Apply the changes.");
        f_panel_ok->labelsize(11);
        f_panel_ok->window()->hotspot(f_panel_ok);
      } // fltk3::ReturnButton* f_panel_ok
      { f_panel_cancel = new fltk3::Button(280, 200, 50, 20, "Cancel");
        f_panel_cancel->tooltip("Cancel the changes.");
        f_panel_cancel->shortcut(0xff1b);
        f_panel_cancel->labelsize(11);
      } // fltk3::Button* f_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 200, 205, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { f_comment_input = new Fl_Text_Editor(10, 125, 320, 65, "Comment:");
      f_comment_input->tooltip("Function comment in Doxygen format");
      f_comment_input->box(fltk3::DOWN_BOX);
      f_comment_input->labelfont(1);
      f_comment_input->labelsize(11);
      f_comment_input->textfont(4);
      f_comment_input->textsize(11);
      f_comment_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      fltk3::Group::current()->resizable(f_comment_input);
      f_comment_input->buffer(new Fl_Text_Buffer());
    } // Fl_Text_Editor* f_comment_input
    function_panel->set_modal();
    function_panel->end();
  } // fltk3::DoubleWindow* function_panel
  return function_panel;
}

fltk3::DoubleWindow *code_panel=(fltk3::DoubleWindow *)0;

CodeEditor *code_input=(CodeEditor *)0;

fltk3::ReturnButton *code_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *code_panel_cancel=(fltk3::Button *)0;

fltk3::DoubleWindow* make_code_panel() {
  { fltk3::DoubleWindow* o = code_panel = new fltk3::DoubleWindow(540, 180, "Code Properties");
    code_panel->labelsize(11);
    { CodeEditor* o = code_input = new CodeEditor(10, 10, 520, 130);
      code_input->box(fltk3::DOWN_BOX);
      code_input->color(fltk3::BACKGROUND2_COLOR);
      code_input->selection_color(fltk3::SELECTION_COLOR);
      code_input->labeltype(fltk3::NORMAL_LABEL);
      code_input->labelfont(0);
      code_input->labelsize(11);
      code_input->labelcolor(fltk3::FOREGROUND_COLOR);
      code_input->textfont(4);
      code_input->textsize(11);
      code_input->align(fltk3::Align(fltk3::ALIGN_TOP));
      code_input->when(fltk3::WHEN_RELEASE);
      fltk3::Group::current()->resizable(code_input);
      o->when(fltk3::WHEN_ENTER_KEY_CHANGED|fltk3::WHEN_RELEASE);
    } // CodeEditor* code_input
    { fltk3::Group* o = new fltk3::Group(10, 150, 520, 20);
      o->labelsize(11);
      { code_panel_ok = new fltk3::ReturnButton(400, 150, 60, 20, "OK");
        code_panel_ok->labelsize(11);
        code_panel_ok->window()->hotspot(code_panel_ok);
      } // fltk3::ReturnButton* code_panel_ok
      { code_panel_cancel = new fltk3::Button(470, 150, 60, 20, "Cancel");
        code_panel_cancel->shortcut(0xff1b);
        code_panel_cancel->labelsize(11);
      } // fltk3::Button* code_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 150, 380, 20);
        o->labelsize(11);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    o->size_range(200, 150);
    code_panel->set_modal();
    code_panel->end();
  } // fltk3::DoubleWindow* code_panel
  return code_panel;
}

fltk3::DoubleWindow *codeblock_panel=(fltk3::DoubleWindow *)0;

fltk3::Input *code_before_input=(fltk3::Input *)0;

fltk3::Input *code_after_input=(fltk3::Input *)0;

fltk3::ReturnButton *codeblock_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *codeblock_panel_cancel=(fltk3::Button *)0;

fltk3::DoubleWindow* make_codeblock_panel() {
  { fltk3::DoubleWindow* o = codeblock_panel = new fltk3::DoubleWindow(300, 115, "Code Block Properties");
    codeblock_panel->labelsize(11);
    { code_before_input = new fltk3::Input(10, 15, 280, 20, "Conditional code block");
      code_before_input->tooltip("#ifdef or similar conditional code block.");
      code_before_input->labelsize(11);
      code_before_input->textfont(4);
      code_before_input->textsize(11);
      code_before_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      code_before_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* code_before_input
    { code_after_input = new fltk3::Input(10, 55, 280, 20, "\"{...child code...}\" is inserted here");
      code_after_input->tooltip("#endif or similar conditional code block.");
      code_after_input->labelsize(11);
      code_after_input->textfont(4);
      code_after_input->textsize(11);
      code_after_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      code_after_input->when(fltk3::WHEN_NEVER);
      fltk3::Group::current()->resizable(code_after_input);
    } // fltk3::Input* code_after_input
    { fltk3::Group* o = new fltk3::Group(10, 85, 280, 20);
      { codeblock_panel_ok = new fltk3::ReturnButton(160, 85, 60, 20, "OK");
        codeblock_panel_ok->labelsize(11);
        codeblock_panel_ok->window()->hotspot(codeblock_panel_ok);
      } // fltk3::ReturnButton* codeblock_panel_ok
      { codeblock_panel_cancel = new fltk3::Button(230, 85, 60, 20, "Cancel");
        codeblock_panel_cancel->shortcut(0xff1b);
        codeblock_panel_cancel->labelsize(11);
      } // fltk3::Button* codeblock_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 85, 140, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    o->size_range(o->w(), o->h(), fltk3::w(), o->h());
    codeblock_panel->set_modal();
    codeblock_panel->end();
  } // fltk3::DoubleWindow* codeblock_panel
  return codeblock_panel;
}

fltk3::DoubleWindow *declblock_panel=(fltk3::DoubleWindow *)0;

fltk3::Choice *declblock_public_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_declblock_public_choice[] = {
 {"in source code only", 0,  0, (void*)(0), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"in header and source", 0,  0, (void*)(1), 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::LightButton *declblock_public_button_x=(fltk3::LightButton *)0;

fltk3::Input *decl_before_input=(fltk3::Input *)0;

fltk3::Input *decl_after_input=(fltk3::Input *)0;

fltk3::ReturnButton *declblock_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *declblock_panel_cancel=(fltk3::Button *)0;

fltk3::DoubleWindow* make_declblock_panel() {
  { fltk3::DoubleWindow* o = declblock_panel = new fltk3::DoubleWindow(300, 135, "Declaration Block Properties");
    declblock_panel->labelsize(11);
    { fltk3::Group* o = new fltk3::Group(10, 10, 280, 20);
      { declblock_public_choice = new fltk3::Choice(10, 10, 140, 20);
        declblock_public_choice->tooltip("Change widget accessibility.");
        declblock_public_choice->down_box(fltk3::BORDER_BOX);
        declblock_public_choice->labelsize(11);
        declblock_public_choice->textsize(11);
        declblock_public_choice->when(fltk3::WHEN_NEVER);
        declblock_public_choice->menu(menu_declblock_public_choice);
      } // fltk3::Choice* declblock_public_choice
      { declblock_public_button_x = new fltk3::LightButton(10, 10, 60, 20, "public");
        declblock_public_button_x->tooltip("Make the declaration publicly accessible.");
        declblock_public_button_x->labelsize(11);
        declblock_public_button_x->when(fltk3::WHEN_NEVER);
        declblock_public_button_x->hide();
      } // fltk3::LightButton* declblock_public_button_x
      { fltk3::Box* o = new fltk3::Box(155, 10, 135, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { decl_before_input = new fltk3::Input(10, 40, 280, 20);
      decl_before_input->tooltip("#ifdef or similar conditional declaration block.");
      decl_before_input->labelsize(11);
      decl_before_input->textfont(4);
      decl_before_input->textsize(11);
      decl_before_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      decl_before_input->when(fltk3::WHEN_NEVER);
      fltk3::Group::current()->resizable(decl_before_input);
    } // fltk3::Input* decl_before_input
    { decl_after_input = new fltk3::Input(10, 75, 280, 20, "\"\\n...child code...\\n\" is inserted here");
      decl_after_input->tooltip("#endif or similar declaration code block.");
      decl_after_input->labelsize(11);
      decl_after_input->textfont(4);
      decl_after_input->textsize(11);
      decl_after_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      decl_after_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* decl_after_input
    { fltk3::Group* o = new fltk3::Group(10, 105, 280, 20);
      { declblock_panel_ok = new fltk3::ReturnButton(160, 105, 60, 20, "OK");
        declblock_panel_ok->labelsize(11);
        declblock_panel_ok->window()->hotspot(declblock_panel_ok);
      } // fltk3::ReturnButton* declblock_panel_ok
      { declblock_panel_cancel = new fltk3::Button(230, 105, 60, 20, "Cancel");
        declblock_panel_cancel->shortcut(0xff1b);
        declblock_panel_cancel->labelsize(11);
      } // fltk3::Button* declblock_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 105, 140, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    o->size_range(o->w(), o->h(), fltk3::w(), o->h());
    declblock_panel->set_modal();
    declblock_panel->end();
  } // fltk3::DoubleWindow* declblock_panel
  return declblock_panel;
}

fltk3::DoubleWindow *decl_panel=(fltk3::DoubleWindow *)0;

fltk3::Choice *decl_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_decl_choice[] = {
 {"in source file only", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"in header file only", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"\"static\" in source file", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"in source and \"extern\" in header", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::Choice *decl_class_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_decl_class_choice[] = {
 {"private", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"public", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"protected", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::Input *decl_input=(fltk3::Input *)0;

fltk3::ReturnButton *decl_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *decl_panel_cancel=(fltk3::Button *)0;

Fl_Text_Editor *decl_comment_input=(Fl_Text_Editor *)0;

fltk3::DoubleWindow* make_decl_panel() {
  { decl_panel = new fltk3::DoubleWindow(343, 237, "Declaration Properties");
    decl_panel->align(fltk3::Align(fltk3::ALIGN_CLIP|fltk3::ALIGN_INSIDE));
    { fltk3::Group* o = new fltk3::Group(10, 10, 270, 20);
      { fltk3::Box* o = new fltk3::Box(200, 10, 80, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      { decl_choice = new fltk3::Choice(10, 10, 185, 20);
        decl_choice->down_box(fltk3::BORDER_BOX);
        decl_choice->labelsize(11);
        decl_choice->textsize(11);
        decl_choice->menu(menu_decl_choice);
      } // fltk3::Choice* decl_choice
      { decl_class_choice = new fltk3::Choice(10, 10, 75, 20);
        decl_class_choice->down_box(fltk3::BORDER_BOX);
        decl_class_choice->labelsize(11);
        decl_class_choice->textsize(11);
        decl_class_choice->menu(menu_decl_class_choice);
      } // fltk3::Choice* decl_class_choice
      o->end();
    } // fltk3::Group* o
    { decl_input = new fltk3::Input(10, 40, 320, 20, "This can be any declaration, like \"int x;\", an external symbol like \"exter\
n int foo();\", a #directive like \"#include <foo.h>\", a comment like \"//foo\
\" or \"/*foo*/\", or typedef like \"typedef char byte;\" or \"using std::list\
;\".");
      decl_input->tooltip("Declaration text.");
      decl_input->labelsize(11);
      decl_input->textfont(4);
      decl_input->textsize(11);
      decl_input->align(fltk3::Align(134));
      decl_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* decl_input
    { fltk3::Group* o = new fltk3::Group(10, 205, 320, 20);
      { decl_panel_ok = new fltk3::ReturnButton(200, 205, 60, 20, "OK");
        decl_panel_ok->labelsize(11);
        decl_panel_ok->window()->hotspot(decl_panel_ok);
      } // fltk3::ReturnButton* decl_panel_ok
      { decl_panel_cancel = new fltk3::Button(270, 205, 60, 20, "Cancel");
        decl_panel_cancel->shortcut(0xff1b);
        decl_panel_cancel->labelsize(11);
      } // fltk3::Button* decl_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 205, 185, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { decl_comment_input = new Fl_Text_Editor(10, 130, 320, 65, "Comment:");
      decl_comment_input->tooltip("Declaration comment in Doxygen format");
      decl_comment_input->box(fltk3::DOWN_BOX);
      decl_comment_input->labelfont(1);
      decl_comment_input->labelsize(11);
      decl_comment_input->textfont(4);
      decl_comment_input->textsize(11);
      decl_comment_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      fltk3::Group::current()->resizable(decl_comment_input);
      decl_comment_input->buffer(new Fl_Text_Buffer());
    } // Fl_Text_Editor* decl_comment_input
    decl_panel->size_range(343, 237);
    decl_panel->end();
  } // fltk3::DoubleWindow* decl_panel
  return decl_panel;
}

fltk3::DoubleWindow *data_panel=(fltk3::DoubleWindow *)0;

fltk3::Choice *data_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_data_choice[] = {
 {"in source file only", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"in header file only", 0,  0, 0, 16, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"\"static\" in source file", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"in source and \"extern\" in header", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::Choice *data_class_choice=(fltk3::Choice *)0;

fltk3::MenuItem menu_data_class_choice[] = {
 {"private", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"public", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {"protected", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

fltk3::Input *data_input=(fltk3::Input *)0;

fltk3::Input *data_filename=(fltk3::Input *)0;

fltk3::Button *data_filebrowser=(fltk3::Button *)0;

fltk3::ReturnButton *data_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *data_panel_cancel=(fltk3::Button *)0;

Fl_Text_Editor *data_comment_input=(Fl_Text_Editor *)0;

fltk3::DoubleWindow* make_data_panel() {
  { data_panel = new fltk3::DoubleWindow(343, 237, "Binary Data Properties");
    data_panel->align(fltk3::Align(fltk3::ALIGN_CLIP|fltk3::ALIGN_INSIDE));
    { fltk3::Group* o = new fltk3::Group(10, 10, 270, 20);
      { fltk3::Box* o = new fltk3::Box(200, 10, 80, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      { data_choice = new fltk3::Choice(10, 10, 185, 20);
        data_choice->down_box(fltk3::BORDER_BOX);
        data_choice->labelsize(11);
        data_choice->textsize(11);
        data_choice->menu(menu_data_choice);
      } // fltk3::Choice* data_choice
      { data_class_choice = new fltk3::Choice(10, 10, 75, 20);
        data_class_choice->down_box(fltk3::BORDER_BOX);
        data_class_choice->labelsize(11);
        data_class_choice->textsize(11);
        data_class_choice->menu(menu_data_class_choice);
      } // fltk3::Choice* data_class_choice
      o->end();
    } // fltk3::Group* o
    { data_input = new fltk3::Input(10, 52, 320, 20, "Variable Name:");
      data_input->tooltip("Binary Data variables are declared \"const unsigned char []\".");
      data_input->labelfont(1);
      data_input->labelsize(11);
      data_input->textfont(4);
      data_input->textsize(11);
      data_input->align(fltk3::Align(133));
      data_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* data_input
    { data_filename = new fltk3::Input(10, 90, 280, 20, "Filename:");
      data_filename->tooltip("Name and path of binary file that will be included.");
      data_filename->labelfont(1);
      data_filename->labelsize(11);
      data_filename->textfont(4);
      data_filename->textsize(11);
      data_filename->align(fltk3::Align(133));
      data_filename->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* data_filename
    { data_filebrowser = new fltk3::Button(290, 90, 40, 20, "@fileopen");
      data_filebrowser->labelcolor((fltk3::Color)134);
    } // fltk3::Button* data_filebrowser
    { fltk3::Group* o = new fltk3::Group(10, 205, 320, 20);
      { data_panel_ok = new fltk3::ReturnButton(200, 205, 60, 20, "OK");
        data_panel_ok->labelsize(11);
        data_panel_ok->window()->hotspot(data_panel_ok);
      } // fltk3::ReturnButton* data_panel_ok
      { data_panel_cancel = new fltk3::Button(270, 205, 60, 20, "Cancel");
        data_panel_cancel->shortcut(0xff1b);
        data_panel_cancel->labelsize(11);
      } // fltk3::Button* data_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 205, 185, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { data_comment_input = new Fl_Text_Editor(10, 130, 320, 65, "Comment:");
      data_comment_input->tooltip("Declaration comment in Doxygen format");
      data_comment_input->box(fltk3::DOWN_BOX);
      data_comment_input->labelfont(1);
      data_comment_input->labelsize(11);
      data_comment_input->textfont(4);
      data_comment_input->textsize(11);
      data_comment_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      fltk3::Group::current()->resizable(data_comment_input);
      data_comment_input->buffer(new Fl_Text_Buffer());
    } // Fl_Text_Editor* data_comment_input
    data_panel->size_range(343, 237);
    data_panel->end();
  } // fltk3::DoubleWindow* data_panel
  return data_panel;
}

fltk3::DoubleWindow *class_panel=(fltk3::DoubleWindow *)0;

fltk3::LightButton *c_public_button=(fltk3::LightButton *)0;

fltk3::Input *c_name_input=(fltk3::Input *)0;

fltk3::Input *c_subclass_input=(fltk3::Input *)0;

Fl_Text_Editor *c_comment_input=(Fl_Text_Editor *)0;

fltk3::ReturnButton *c_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *c_panel_cancel=(fltk3::Button *)0;

fltk3::DoubleWindow* make_class_panel() {
  { class_panel = new fltk3::DoubleWindow(342, 196, "Class Properties");
    class_panel->labelsize(11);
    { fltk3::Group* o = new fltk3::Group(10, 10, 280, 20);
      o->hide();
      { c_public_button = new fltk3::LightButton(10, 10, 60, 20, "public");
        c_public_button->tooltip("Make the class publicly accessible.");
        c_public_button->labelsize(11);
        c_public_button->when(fltk3::WHEN_NEVER);
        c_public_button->hide();
      } // fltk3::LightButton* c_public_button
      { fltk3::Box* o = new fltk3::Box(80, 10, 210, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { c_name_input = new fltk3::Input(10, 20, 320, 20, "Name:");
      c_name_input->tooltip("Name of class.");
      c_name_input->labelfont(1);
      c_name_input->labelsize(11);
      c_name_input->textfont(4);
      c_name_input->textsize(11);
      c_name_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      c_name_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* c_name_input
    { c_subclass_input = new fltk3::Input(10, 55, 320, 20, "Subclass of (text between : and {)");
      c_subclass_input->tooltip("Name of subclass.");
      c_subclass_input->labelfont(1);
      c_subclass_input->labelsize(11);
      c_subclass_input->textfont(4);
      c_subclass_input->textsize(11);
      c_subclass_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      c_subclass_input->when(fltk3::WHEN_NEVER);
    } // fltk3::Input* c_subclass_input
    { c_comment_input = new Fl_Text_Editor(10, 90, 320, 65, "Comment:");
      c_comment_input->tooltip("Class comment in Doxygen format");
      c_comment_input->box(fltk3::DOWN_BOX);
      c_comment_input->labelfont(1);
      c_comment_input->labelsize(11);
      c_comment_input->textfont(4);
      c_comment_input->textsize(11);
      c_comment_input->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
      fltk3::Group::current()->resizable(c_comment_input);
      c_comment_input->buffer(new Fl_Text_Buffer());
    } // Fl_Text_Editor* c_comment_input
    { fltk3::Group* o = new fltk3::Group(10, 165, 320, 20);
      { c_panel_ok = new fltk3::ReturnButton(200, 165, 60, 20, "OK");
        c_panel_ok->labelsize(11);
        c_panel_ok->window()->hotspot(c_panel_ok);
      } // fltk3::ReturnButton* c_panel_ok
      { c_panel_cancel = new fltk3::Button(270, 165, 60, 20, "Cancel");
        c_panel_cancel->shortcut(0xff1b);
        c_panel_cancel->labelsize(11);
      } // fltk3::Button* c_panel_cancel
      { fltk3::Box* o = new fltk3::Box(10, 165, 185, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    class_panel->set_modal();
    class_panel->size_range(343, 188);
    class_panel->end();
  } // fltk3::DoubleWindow* class_panel
  return class_panel;
}

fltk3::DoubleWindow *comment_panel=(fltk3::DoubleWindow *)0;

CodeEditor *comment_input=(CodeEditor *)0;

fltk3::ReturnButton *comment_panel_ok=(fltk3::ReturnButton *)0;

fltk3::Button *comment_panel_cancel=(fltk3::Button *)0;

fltk3::LightButton *comment_in_source=(fltk3::LightButton *)0;

fltk3::LightButton *comment_in_header=(fltk3::LightButton *)0;

fltk3::MenuButton *comment_predefined=(fltk3::MenuButton *)0;

fltk3::Button *comment_load=(fltk3::Button *)0;

fltk3::DoubleWindow* make_comment_panel() {
  { fltk3::DoubleWindow* o = comment_panel = new fltk3::DoubleWindow(550, 280, "Comment Properties");
    comment_panel->labelsize(11);
    { CodeEditor* o = comment_input = new CodeEditor(110, 10, 430, 230);
      comment_input->box(fltk3::DOWN_BOX);
      comment_input->color(fltk3::BACKGROUND2_COLOR);
      comment_input->selection_color(fltk3::SELECTION_COLOR);
      comment_input->labeltype(fltk3::NORMAL_LABEL);
      comment_input->labelfont(0);
      comment_input->labelsize(11);
      comment_input->labelcolor(fltk3::FOREGROUND_COLOR);
      comment_input->textfont(4);
      comment_input->textsize(11);
      comment_input->align(fltk3::Align(fltk3::ALIGN_TOP));
      comment_input->when(fltk3::WHEN_RELEASE);
      fltk3::Group::current()->resizable(comment_input);
      o->when(fltk3::WHEN_ENTER_KEY_CHANGED|fltk3::WHEN_RELEASE);
    } // CodeEditor* comment_input
    { fltk3::Group* o = new fltk3::Group(110, 250, 430, 20);
      o->labelsize(11);
      { comment_panel_ok = new fltk3::ReturnButton(370, 250, 80, 20, "OK");
        comment_panel_ok->labelsize(11);
        comment_panel_ok->window()->hotspot(comment_panel_ok);
      } // fltk3::ReturnButton* comment_panel_ok
      { comment_panel_cancel = new fltk3::Button(460, 250, 80, 20, "Cancel");
        comment_panel_cancel->shortcut(0xff1b);
        comment_panel_cancel->labelsize(11);
      } // fltk3::Button* comment_panel_cancel
      { fltk3::Box* o = new fltk3::Box(110, 250, 250, 20);
        o->labelsize(11);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(10, 10, 90, 243);
      o->labelsize(11);
      { comment_in_source = new fltk3::LightButton(10, 10, 90, 20, "In Source");
        comment_in_source->tooltip("Put the comment into the source (.cxx) file.");
        comment_in_source->labelsize(11);
        comment_in_source->when(fltk3::WHEN_NEVER);
      } // fltk3::LightButton* comment_in_source
      { comment_in_header = new fltk3::LightButton(10, 40, 90, 20, "In Header");
        comment_in_header->tooltip("Put the comment into the header (.h) file.");
        comment_in_header->labelsize(11);
        comment_in_header->when(fltk3::WHEN_NEVER);
      } // fltk3::LightButton* comment_in_header
      { comment_predefined = new fltk3::MenuButton(10, 70, 90, 20, "Predefined");
        comment_predefined->labelsize(11);
        comment_predefined->textsize(11);
      } // fltk3::MenuButton* comment_predefined
      { comment_load = new fltk3::Button(10, 100, 90, 20, "Import...");
        comment_load->labelsize(11);
      } // fltk3::Button* comment_load
      { fltk3::Box* o = new fltk3::Box(10, 132, 90, 121);
        o->labelsize(11);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    o->size_range(320, 180);
    comment_panel->set_modal();
    comment_panel->end();
  } // fltk3::DoubleWindow* comment_panel
  return comment_panel;
}

void type_make_cb(fltk3::Widget*,void*d) {
  undo_checkpoint();
    Fl_Type *t = Fl_Type_make((char*)d);
    if (t) {
      select_only(t);
      set_modflag(1);
      t->open();
    } else {
      undo_current --;
      undo_last --;
    }
}

fltk3::Window *widgetbin_panel=(fltk3::Window *)0;

static void cb_widgetbin_panel(fltk3::Window* o, void* v) {
  if (fltk3::event()==fltk3::SHORTCUT && fltk3::event_key()==fltk3::EscapeKey)
  exit_cb((fltk3::Widget*)o, v);
else  
  toggle_widgetbin_cb((fltk3::Widget*)o, v);
}

fltk3::Window* make_widgetbin() {
  { widgetbin_panel = new fltk3::Window(574, 85, "Widget Bin");
    widgetbin_panel->callback((fltk3::Callback*)cb_widgetbin_panel);
    widgetbin_panel->align(fltk3::Align(fltk3::ALIGN_CLIP|fltk3::ALIGN_INSIDE));
    { fltk3::Group* o = new fltk3::Group(3, 3, 79, 79);
      { fltk3::Button* o = new fltk3::Button(5, 5, 24, 24);
        o->tooltip("Function");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Function"));
        o->image(pixmap[7]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(30, 5, 24, 24);
        o->tooltip("Class");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Class"));
        o->image(pixmap[12]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(55, 5, 24, 24);
        o->tooltip("Comment");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("comment"));
        o->image(pixmap[46]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(5, 30, 24, 24);
        o->tooltip("Code");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Code"));
        o->image(pixmap[8]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(30, 30, 24, 24);
        o->tooltip("Code Block");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("CodeBlock"));
        o->image(pixmap[9]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(55, 30, 24, 24);
        o->tooltip("Widget Class");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("widget_class"));
        o->image(pixmap[48]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(5, 55, 24, 24);
        o->tooltip("Declaration");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("decl"));
        o->image(pixmap[10]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(30, 55, 24, 24);
        o->tooltip("Declaration Block");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("declblock"));
        o->image(pixmap[11]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(55, 55, 24, 24);
        o->tooltip("Binary Data");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("data"));
        o->image(pixmap[49]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(87, 3, 79, 79);
      { fltk3::Button* o = new fltk3::Button(89, 5, 24, 24);
        o->tooltip("Window");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Window"));
        o->image(pixmap[1]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(114, 5, 24, 24);
        o->tooltip("Group");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Group"));
        o->image(pixmap[6]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(139, 5, 24, 24);
        o->tooltip("Pack");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::PackedGroup"));
        o->image(pixmap[22]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(89, 30, 24, 24);
        o->tooltip("Tabs");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Tabs"));
        o->image(pixmap[13]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(114, 30, 24, 24);
        o->tooltip("Scroll");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::ScrollGroup"));
        o->image(pixmap[19]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(139, 30, 24, 24);
        o->tooltip("Table");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Table"));
        o->image(pixmap[51]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(89, 55, 24, 24);
        o->tooltip("Tile");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::TiledGroup"));
        o->image(pixmap[20]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(114, 55, 24, 24);
        o->tooltip("Wizard");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Wizard"));
        o->image(pixmap[21]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(171, 3, 54, 79);
      { fltk3::Button* o = new fltk3::Button(173, 5, 24, 24);
        o->tooltip("Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Button"));
        o->image(pixmap[2]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(198, 5, 24, 24);
        o->tooltip("Return Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::ReturnButton"));
        o->image(pixmap[23]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(173, 30, 24, 24);
        o->tooltip("Light Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::LightButton"));
        o->image(pixmap[24]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(198, 30, 24, 24);
        o->tooltip("Repeat Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::RepeatButton"));
        o->image(pixmap[25]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(173, 55, 24, 24);
        o->tooltip("Check Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::CheckButton"));
        o->image(pixmap[3]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(198, 55, 24, 24);
        o->tooltip("Round Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::RoundButton"));
        o->image(pixmap[4]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(230, 3, 104, 79);
      { fltk3::Button* o = new fltk3::Button(232, 5, 24, 24);
        o->tooltip("Slider");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Slider"));
        o->image(pixmap[37]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(257, 5, 24, 24);
        o->tooltip("Scroll Bar");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Scrollbar"));
        o->image(pixmap[38]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(282, 5, 24, 24);
        o->tooltip("Value Slider");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::ValueSlider"));
        o->image(pixmap[39]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(307, 5, 24, 24);
        o->tooltip("Value Output");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Value_Output"));
        o->image(pixmap[45]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(232, 30, 24, 24);
        o->tooltip("Adjuster");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Adjuster"));
        o->image(pixmap[40]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(257, 30, 24, 24);
        o->tooltip("Counter");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Counter"));
        o->image(pixmap[41]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(282, 30, 24, 24);
        o->tooltip("Dial");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Dial"));
        o->image(pixmap[42]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(232, 55, 24, 24);
        o->tooltip("Roller");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Roller"));
        o->image(pixmap[43]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(257, 55, 24, 24);
        o->tooltip("Spinner");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Spinner"));
        o->image(pixmap[47]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(282, 55, 24, 24);
        o->tooltip("Value Input");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Value_Input"));
        o->image(pixmap[44]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(339, 3, 54, 79);
      { fltk3::Button* o = new fltk3::Button(341, 5, 24, 24);
        o->tooltip("Input");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Input"));
        o->image(pixmap[14]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(366, 5, 24, 24);
        o->tooltip("Output");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Output"));
        o->image(pixmap[27]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(341, 30, 24, 24);
        o->tooltip("Text Edit");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Text_Editor"));
        o->image(pixmap[29]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(366, 30, 24, 24);
        o->tooltip("Text Display");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Text_Display"));
        o->image(pixmap[28]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(341, 55, 24, 24);
        o->tooltip("File Input");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_File_Input"));
        o->image(pixmap[30]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(398, 3, 54, 79);
      { fltk3::Button* o = new fltk3::Button(400, 5, 24, 24);
        o->tooltip("Menu Bar");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::MenuBar"));
        o->image(pixmap[17]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(425, 5, 24, 24);
        o->tooltip("Input Choice");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::InputChoice"));
        o->image(pixmap[15]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(400, 30, 24, 24);
        o->tooltip("Menu Button");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::MenuButton"));
        o->image(pixmap[26]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(425, 30, 24, 24);
        o->tooltip("Menu Item");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("menuitem"));
        o->image(pixmap[16]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(400, 55, 24, 24);
        o->tooltip("Choice");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Choice"));
        o->image(pixmap[15]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(425, 55, 24, 24);
        o->tooltip("Sub Menu");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("submenu"));
        o->image(pixmap[18]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(457, 3, 54, 79);
      { fltk3::Button* o = new fltk3::Button(459, 5, 24, 24);
        o->tooltip("Browser");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Browser"));
        o->image(pixmap[31]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(484, 5, 24, 24);
        o->tooltip("Tree");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Tree"));
        o->image(pixmap[50]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(459, 30, 24, 24);
        o->tooltip("Check Browser");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Check_Browser"));
        o->image(pixmap[32]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(459, 55, 24, 24);
        o->tooltip("File Browser");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_File_Browser"));
        o->image(pixmap[33]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(515, 3, 55, 79);
      { fltk3::Button* o = new fltk3::Button(517, 5, 24, 24);
        o->tooltip("Box");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Box"));
        o->image(pixmap[5]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(542, 5, 24, 24);
        o->tooltip("Clock");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("fltk3::Clock"));
        o->image(pixmap[34]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(517, 30, 24, 24);
        o->tooltip("Help Browser");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Help_View"));
        o->image(pixmap[35]);
      } // fltk3::Button* o
      { fltk3::Button* o = new fltk3::Button(517, 55, 24, 24);
        o->tooltip("Progress");
        o->box(fltk3::THIN_UP_BOX);
        o->callback((fltk3::Callback*)type_make_cb, (void*)("Fl_Progress"));
        o->image(pixmap[36]);
      } // fltk3::Button* o
      o->end();
    } // fltk3::Group* o
    widgetbin_panel->set_non_modal();
    widgetbin_panel->end();
  } // fltk3::Window* widgetbin_panel
  return widgetbin_panel;
}

fltk3::DoubleWindow *sourceview_panel=(fltk3::DoubleWindow *)0;

Fl_Tabs *sv_tab=(Fl_Tabs *)0;

CodeViewer *sv_source=(CodeViewer *)0;

CodeViewer *sv_header=(CodeViewer *)0;

fltk3::LightButton *sv_autorefresh=(fltk3::LightButton *)0;

fltk3::LightButton *sv_autoposition=(fltk3::LightButton *)0;

fltk3::DoubleWindow* make_sourceview() {
  { sourceview_panel = new fltk3::DoubleWindow(520, 490, "Code View");
    sourceview_panel->callback((fltk3::Callback*)toggle_sourceview_cb);
    sourceview_panel->align(fltk3::Align(fltk3::ALIGN_CLIP|fltk3::ALIGN_INSIDE));
    { sv_tab = new Fl_Tabs(10, 10, 500, 440);
      sv_tab->selection_color((fltk3::Color)4);
      sv_tab->labelcolor(fltk3::BACKGROUND2_COLOR);
      sv_tab->callback((fltk3::Callback*)update_sourceview_position_cb);
      { fltk3::Group* o = new fltk3::Group(10, 35, 500, 415, "Source");
        o->labelsize(13);
        o->hide();
        { sv_source = new CodeViewer(20, 50, 480, 390);
          sv_source->box(fltk3::DOWN_FRAME);
          sv_source->color(fltk3::BACKGROUND2_COLOR);
          sv_source->selection_color(fltk3::SELECTION_COLOR);
          sv_source->labeltype(fltk3::NORMAL_LABEL);
          sv_source->labelfont(0);
          sv_source->labelsize(14);
          sv_source->labelcolor(fltk3::FOREGROUND_COLOR);
          sv_source->textfont(4);
          sv_source->textsize(11);
          sv_source->align(fltk3::Align(fltk3::ALIGN_TOP));
          sv_source->when(fltk3::WHEN_RELEASE);
          fltk3::Group::current()->resizable(sv_source);
        } // CodeViewer* sv_source
        o->end();
        fltk3::Group::current()->resizable(o);
      } // fltk3::Group* o
      { fltk3::Group* o = new fltk3::Group(10, 35, 500, 415, "Header");
        o->labelsize(13);
        { sv_header = new CodeViewer(20, 50, 480, 390);
          sv_header->box(fltk3::DOWN_FRAME);
          sv_header->color(fltk3::BACKGROUND2_COLOR);
          sv_header->selection_color(fltk3::SELECTION_COLOR);
          sv_header->labeltype(fltk3::NORMAL_LABEL);
          sv_header->labelfont(0);
          sv_header->labelsize(14);
          sv_header->labelcolor(fltk3::FOREGROUND_COLOR);
          sv_header->textfont(4);
          sv_header->textsize(11);
          sv_header->align(fltk3::Align(fltk3::ALIGN_TOP));
          sv_header->when(fltk3::WHEN_RELEASE);
          fltk3::Group::current()->resizable(sv_header);
        } // CodeViewer* sv_header
        o->end();
      } // fltk3::Group* o
      sv_tab->end();
      fltk3::Group::current()->resizable(sv_tab);
    } // Fl_Tabs* sv_tab
    { fltk3::Group* o = new fltk3::Group(10, 460, 500, 20);
      { fltk3::Button* o = new fltk3::Button(10, 460, 61, 20, "Refresh");
        o->labelsize(11);
        o->callback((fltk3::Callback*)update_sourceview_cb);
      } // fltk3::Button* o
      { fltk3::LightButton* o = sv_autorefresh = new fltk3::LightButton(76, 460, 91, 20, "Auto-Refresh");
        sv_autorefresh->labelsize(11);
        o->callback((fltk3::Callback*)update_sourceview_cb);
      } // fltk3::LightButton* sv_autorefresh
      { sv_autoposition = new fltk3::LightButton(172, 460, 89, 20, "Auto-Position");
        sv_autoposition->labelsize(11);
      } // fltk3::LightButton* sv_autoposition
      { fltk3::Button* o = new fltk3::Button(460, 460, 50, 20, "Close");
        o->labelsize(11);
        o->callback((fltk3::Callback*)toggle_sourceview_b_cb);
      } // fltk3::Button* o
      { fltk3::Box* o = new fltk3::Box(265, 460, 190, 20);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      o->end();
    } // fltk3::Group* o
    sourceview_panel->size_range(384, 120);
    sourceview_panel->end();
  } // fltk3::DoubleWindow* sourceview_panel
  return sourceview_panel;
}

//
// End of "$Id$".
//
