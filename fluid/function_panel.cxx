// generated by Fast Light User Interface Designer (fluid) version 2.0100

#include "function_panel.h"

fltk::Window* function_panel;

fltk::CheckButton* f_public_button;

fltk::CheckButton* f_c_button;

fltk::Input* f_name_input;

fltk::Input* f_attributes_input;

fltk::Input* f_return_type_input;

fltk::ReturnButton* f_panel_ok;

fltk::Button* f_panel_cancel;

static void cb_static(fltk::Item*, void*) {
  f_attributes_input->value("static");
}

static void cb_virtual(fltk::Item*, void*) {
  f_attributes_input->value("virtual");
}

static void cb_const(fltk::Item*, void*) {
  f_attributes_input->value("const");
}

static void cb_inline(fltk::Item*, void*) {
  f_attributes_input->value("inline");
}

static void cb_export(fltk::Item*, void*) {
  f_attributes_input->value("export");
}

static void cb___declspec(fltk::Item*, void*) {
  f_attributes_input->value("__declspec(dllexport)");
}

static void cb___declspec1(fltk::Item*, void*) {
  f_attributes_input->value("__declspec(dllimport)");
}

static void cb___stdcall(fltk::Item*, void*) {
  f_attributes_input->value("__stdcall");
}

static void cb_Set(fltk::Button*, void*) {
  f_name_input->value("");
  f_attributes_input->value("");
  f_return_type_input->value("");
  f_public_button->value(1);
  f_c_button->value(0);
}

fltk::Window* make_function_panel() {
  fltk::Window* w;
   {fltk::Window* o = function_panel = new fltk::Window(400, 208, "function/method");
    w = o;
    o->begin();
     {fltk::CheckButton* o = f_public_button = new fltk::CheckButton(13, 15, 95, 25, "public");
      o->box(fltk::THIN_DOWN_BOX);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::CheckButton* o = f_c_button = new fltk::CheckButton(129, 15, 133, 25, "C declaration");
      o->box(fltk::THIN_DOWN_BOX);
    }
     {fltk::Input* o = f_name_input = new fltk::Input(13, 55, 237, 22, "Name(args): (blank for main())");
      o->box(fltk::THIN_DOWN_BOX);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = f_attributes_input = new fltk::Input(13, 99, 237, 22, "Attributes (virtual, static, __declspec, ...)");
      o->box(fltk::THIN_DOWN_BOX);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = f_return_type_input = new fltk::Input(13, 143, 383, 22, "Return Type: (blank to return outermost widget)");
      o->box(fltk::THIN_DOWN_BOX);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = f_panel_ok = new fltk::ReturnButton(153, 176, 118, 22, "OK");
      o->buttonbox(fltk::THIN_UP_BOX);
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = f_panel_cancel = new fltk::Button(281, 176, 115, 22, "Cancel");
      o->box(fltk::THIN_UP_BOX);
      o->buttonbox(fltk::DOWN_BOX);
      o->shortcut(0xff1b);
    }
     {fltk::Choice* o = new fltk::Choice(278, 99, 111, 22, "attr:");
      o->box(fltk::THIN_DOWN_BOX);
      o->begin();
       {fltk::Item* o = new fltk::Item("static");
        o->callback((fltk::Callback*)cb_static);
      }
       {fltk::Item* o = new fltk::Item("virtual");
        o->callback((fltk::Callback*)cb_virtual);
      }
       {fltk::Item* o = new fltk::Item("const");
        o->callback((fltk::Callback*)cb_const);
      }
       {fltk::Item* o = new fltk::Item("inline");
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb_inline);
      }
       {fltk::Item* o = new fltk::Item("export");
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb_export);
      }
       {fltk::Item* o = new fltk::Item("__declspec(dllexport)");
        o->set_vertical();
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb___declspec);
      }
       {fltk::Item* o = new fltk::Item("__declspec(dllimport)");
        o->set_vertical();
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb___declspec1);
      }
       {fltk::Item* o = new fltk::Item("__stdcall");
        o->set_vertical();
        o->buttonbox(fltk::THIN_UP_BOX);
        o->callback((fltk::Callback*)cb___stdcall);
      }
      o->end();
    }
     {fltk::Button* o = new fltk::Button(269, 55, 120, 22, "Set main()");
      o->box(fltk::THIN_UP_BOX);
      o->buttonbox(fltk::DOWN_BOX);
      o->callback((fltk::Callback*)cb_Set);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* code_panel;

fltk::MultiLineInput* code_input;

fltk::ReturnButton* code_panel_ok;

fltk::Button* code_panel_cancel;

fltk::Window* make_code_panel() {
  fltk::Window* w;
   {fltk::Window* o = code_panel = new fltk::Window(290, 175, "code");
    w = o;
    o->begin();
     {fltk::MultiLineInput* o = code_input = new fltk::MultiLineInput(6, 5, 280, 138);
      o->type(4);
      o->align(fltk::ALIGN_CENTER);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::ReturnButton* o = code_panel_ok = new fltk::ReturnButton(115, 148, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = code_panel_cancel = new fltk::Button(205, 148, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
  }
  return  w;
}

fltk::Window* codeblock_panel;

fltk::Input* code_before_input;

fltk::Input* code_after_input;

fltk::ReturnButton* codeblock_panel_ok;

fltk::Button* codeblock_panel_cancel;

fltk::Window* make_codeblock_panel() {
  fltk::Window* w;
   {fltk::Window* o = codeblock_panel = new fltk::Window(290, 131, "codeblock");
    w = o;
    o->begin();
     {fltk::Input* o = code_before_input = new fltk::Input(10, 11, 270, 22);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Widget* o = new fltk::Widget(10, 33, 270, 33, "\"{...child code...}\" is inserted here");
      o->box(fltk::NO_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
    }
     {fltk::Input* o = code_after_input = new fltk::Input(10, 65, 270, 23);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = codeblock_panel_ok = new fltk::ReturnButton(110, 99, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = codeblock_panel_cancel = new fltk::Button(200, 99, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* declblock_panel;

fltk::Input* decl_before_input;

fltk::Input* decl_after_input;

fltk::ReturnButton* declblock_panel_ok;

fltk::Button* declblock_panel_cancel;

fltk::Window* make_declblock_panel() {
  fltk::Window* w;
   {fltk::Window* o = declblock_panel = new fltk::Window(290, 131, "declaration block");
    w = o;
    o->begin();
     {fltk::Input* o = decl_before_input = new fltk::Input(10, 11, 270, 22);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Widget* o = new fltk::Widget(10, 33, 270, 33, "\"\\n...child code...\\n\" is inserted here");
      o->box(fltk::NO_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
    }
     {fltk::Input* o = decl_after_input = new fltk::Input(10, 66, 270, 22);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = declblock_panel_ok = new fltk::ReturnButton(110, 99, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = declblock_panel_cancel = new fltk::Button(200, 99, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* decl_panel;

fltk::CheckButton* decl_public_button;

fltk::Input* decl_input;

fltk::ReturnButton* decl_panel_ok;

fltk::Button* decl_panel_cancel;

fltk::Window* make_decl_panel() {
  fltk::Window* w;
   {fltk::Window* o = decl_panel = new fltk::Window(290, 175, "declaration");
    w = o;
    o->begin();
     {fltk::CheckButton* o = decl_public_button = new fltk::CheckButton(10, 11, 65, 22, "public");
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = decl_input = new fltk::Input(10, 44, 270, 22, "can be any declartion, like \"int x;\",\nan external symbol like \"extern int\
 foo();\",\na #directive like \"#include <foo.h>\",\nor a comment like \"//foo\
\" or \"/*foo*/\"");
      o->align(fltk::ALIGN_BOTTOM|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::ReturnButton* o = decl_panel_ok = new fltk::ReturnButton(110, 143, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = decl_panel_cancel = new fltk::Button(200, 143, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
  }
  return  w;
}

fltk::Window* class_panel;

fltk::CheckButton* c_public_button;

fltk::Input* c_name_input;

fltk::Input* c_subclass_input;

fltk::ReturnButton* c_panel_ok;

fltk::Button* c_panel_cancel;

fltk::Window* make_class_panel() {
  fltk::Window* w;
   {fltk::Window* o = class_panel = new fltk::Window(280, 164, "class");
    w = o;
    o->begin();
     {fltk::CheckButton* o = c_public_button = new fltk::CheckButton(10, 11, 65, 22, "public");
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = c_name_input = new fltk::Input(10, 44, 260, 22, "name:");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::Input* o = c_subclass_input = new fltk::Input(10, 89, 260, 21, "subclass of (text between : and {)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = c_panel_ok = new fltk::ReturnButton(100, 132, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = c_panel_cancel = new fltk::Button(190, 132, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
  }
  return  w;
}

fltk::Window* namespace_panel;

fltk::Input* namespace_input;

fltk::ReturnButton* namespace_panel_ok;

fltk::Button* namespace_panel_cancel;

fltk::Window* make_namespace_panel() {
  fltk::Window* w;
   {fltk::Window* o = namespace_panel = new fltk::Window(298, 140, "namespace");
    w = o;
    o->begin();
     {fltk::Input* o = namespace_input = new fltk::Input(21, 10, 270, 22, "default is  \"fltk\", can be declared at the root or  imbricated into another\
 namespace");
      o->align(fltk::ALIGN_BOTTOM|fltk::ALIGN_LEFT|fltk::ALIGN_WRAP);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::ReturnButton* o = namespace_panel_ok = new fltk::ReturnButton(112, 96, 83, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = namespace_panel_cancel = new fltk::Button(205, 96, 83, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
  }
  return  w;
}
