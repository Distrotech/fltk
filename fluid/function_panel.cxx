// generated by Fast Light User Interface Designer (fluid) version 2.0002

#include "function_panel.h"

fltk::Window* function_panel;

fltk::CheckButton* f_public_button;

fltk::CheckButton* f_c_button;

fltk::Input* f_name_input;

fltk::Input* f_attributes_input;

fltk::Input* f_return_type_input;

fltk::ReturnButton* f_panel_ok;

fltk::Button* f_panel_cancel;

fltk::Window* make_function_panel() {
  fltk::Window* w;
   {fltk::Window* o = function_panel = new fltk::Window(320, 208, "function/method");
    w = o;
    o->begin();
     {fltk::CheckButton* o = f_public_button = new fltk::CheckButton(10, 15, 74, 25, "public");
      o->when(fltk::WHEN_NEVER);
    }
    f_c_button = new fltk::CheckButton(101, 15, 104, 25, "C declaration");
     {fltk::Input* o = f_name_input = new fltk::Input(10, 55, 300, 22, "Name(args): (blank for main())");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = f_attributes_input = new fltk::Input(10, 99, 300, 22, "Attributes (virtual, static, __declspec, ...)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = f_return_type_input = new fltk::Input(10, 143, 300, 22, "Return Type: (blank to return outermost widget)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = f_panel_ok = new fltk::ReturnButton(120, 176, 92, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = f_panel_cancel = new fltk::Button(220, 176, 90, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* code_panel;

fltk::MultiLineInput* code_input;

fltk::ReturnButton* code_panel_ok;

fltk::Button* code_panel_cancel;

fltk::Window* make_code_panel() {
  fltk::Window* w;
   {fltk::Window* o = code_panel = new fltk::Window(290, 175, "code");
    w = o;
    o->begin();
     {fltk::MultiLineInput* o = code_input = new fltk::MultiLineInput(6, 5, 280, 138);
      o->type(4);
      o->align(fltk::ALIGN_CENTER);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = code_panel_ok = new fltk::ReturnButton(115, 148, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = code_panel_cancel = new fltk::Button(205, 148, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* codeblock_panel;

fltk::Input* code_before_input;

fltk::Input* code_after_input;

fltk::ReturnButton* codeblock_panel_ok;

fltk::Button* codeblock_panel_cancel;

fltk::Window* make_codeblock_panel() {
  fltk::Window* w;
   {fltk::Window* o = codeblock_panel = new fltk::Window(290, 131, "codeblock");
    w = o;
    o->begin();
     {fltk::Input* o = code_before_input = new fltk::Input(10, 11, 270, 22);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Widget* o = new fltk::Widget(10, 33, 270, 33, "\"{...child code...}\" is inserted here");
      o->box(fltk::NO_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
    }
     {fltk::Input* o = code_after_input = new fltk::Input(10, 65, 270, 23);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = codeblock_panel_ok = new fltk::ReturnButton(110, 99, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = codeblock_panel_cancel = new fltk::Button(200, 99, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* declblock_panel;

fltk::Input* decl_before_input;

fltk::Input* decl_after_input;

fltk::ReturnButton* declblock_panel_ok;

fltk::Button* declblock_panel_cancel;

fltk::Window* make_declblock_panel() {
  fltk::Window* w;
   {fltk::Window* o = declblock_panel = new fltk::Window(290, 131, "declaration block");
    w = o;
    o->begin();
     {fltk::Input* o = decl_before_input = new fltk::Input(10, 11, 270, 22);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Widget* o = new fltk::Widget(10, 33, 270, 33, "\"\\n...child code...\\n\" is inserted here");
      o->box(fltk::NO_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
    }
     {fltk::Input* o = decl_after_input = new fltk::Input(10, 66, 270, 22);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = declblock_panel_ok = new fltk::ReturnButton(110, 99, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = declblock_panel_cancel = new fltk::Button(200, 99, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
    o->resizable(o);
  }
  return  w;
}

fltk::Window* decl_panel;

fltk::CheckButton* decl_public_button;

fltk::Input* decl_input;

fltk::ReturnButton* decl_panel_ok;

fltk::Button* decl_panel_cancel;

fltk::Window* make_decl_panel() {
  fltk::Window* w;
   {fltk::Window* o = decl_panel = new fltk::Window(290, 175, "declaration");
    w = o;
    o->begin();
     {fltk::CheckButton* o = decl_public_button = new fltk::CheckButton(10, 11, 65, 22, "public");
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = decl_input = new fltk::Input(10, 44, 270, 22, "can be any declartion, like \"int x;\",\nan external symbol like \"extern int\
 foo();\",\na #directive like \"#include <foo.h>\",\nor a comment like \"//foo\
\" or \"/*foo*/\"");
      o->align(fltk::ALIGN_BOTTOM|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::ReturnButton* o = decl_panel_ok = new fltk::ReturnButton(110, 143, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = decl_panel_cancel = new fltk::Button(200, 143, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
  }
  return  w;
}

fltk::Window* class_panel;

fltk::CheckButton* c_public_button;

fltk::Input* c_name_input;

fltk::Input* c_subclass_input;

fltk::ReturnButton* c_panel_ok;

fltk::Button* c_panel_cancel;

fltk::Window* make_class_panel() {
  fltk::Window* w;
   {fltk::Window* o = class_panel = new fltk::Window(280, 164, "class");
    w = o;
    o->begin();
     {fltk::CheckButton* o = c_public_button = new fltk::CheckButton(10, 11, 65, 22, "public");
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::Input* o = c_name_input = new fltk::Input(10, 44, 260, 22, "name:");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
      fltk::Group::current()->resizable(o);
    }
     {fltk::Input* o = c_subclass_input = new fltk::Input(10, 89, 260, 21, "subclass of (text between : and {)");
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
      o->when(fltk::WHEN_NEVER);
    }
     {fltk::ReturnButton* o = c_panel_ok = new fltk::ReturnButton(100, 132, 80, 22, "OK");
      o->shortcut(0xff0d);
      ((fltk::Window*)(o->parent()))->hotspot(o);
    }
     {fltk::Button* o = c_panel_cancel = new fltk::Button(190, 132, 80, 22, "Cancel");
      o->shortcut(0xff1b);
    }
    o->end();
    o->set_modal();
  }
  return  w;
}
