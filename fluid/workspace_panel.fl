# data file for the Fltk User Interface Designer (fluid)
version 3.0000 
header_name {.h} 
code_name {.cxx}
comment {//
// "$Id$"
//
// Workspace Panels for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2011 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems to "fltk-bugs@fltk.org".
//
} {in_source in_header
} 

decl {\#include "WorkspaceType.h"} {public global
} 

decl {\#include "panel.h"} {public global
} 

decl {\#include "fluid.h"} {private global
} 

decl {\#include <fltk3/FileChooser.h>} {private global
} 

decl {\#include <fltk3/Pixmap.h>} {public global
} 

decl {\#include <fltk3/MultiLabel.h>} {public global
} 

decl {extern fltk3::Pixmap menu_none_pixmap;} {public global
} 

decl {extern fltk3::Pixmap menu_multi_pixmap;} {public global
} 

decl {extern fltk3::Pixmap menu_all_pixmap;} {public global
} 

widget_class Fl_Environment_Choice {open
  xywh {820 144 200 25} type Double
  class {fltk3::Group} visible position_relative
} {
  decl {unsigned int pEnv;} {protected local
  }
  {fltk3::MenuButton} pEnvMenu {
    label {- unknown -} open
    xywh {0 0 200 26} labelsize 9 align 192
  } {
    MenuItem pMenuAll {
      label {All Environments}
      user_data FL_ENV_ALL
      callback {// this is what we want to set or clear, pEnv is what we currently have
unsigned int e = (int)(long)v;
// find a good logic for settting, clearing, and partial values
if ( (pEnv&e)==e ) {
  // if all bits in the menu are set, toggle the bits off
  pEnv = pEnv ^ e;
} else {
  // some bits don't match, so switch all bits on
  pEnv = pEnv | e;
}

update_all();

if (callback())
  do_callback();}
      xywh {0 0 100 20} labelsize 12 divider
    }
    Submenu {} {
      label {Command Line} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data FL_ENV_ALL_SHELL
        callback cb_pMenuAll
        xywh {10 10 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {Makefile (make, gmake)}
        user_data FL_ENV_MAKE
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {CMake File (cmake)}
        user_data FL_ENV_CMAKE
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
    Submenu {} {
      label {MS Windows} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data FL_ENV_ALL_VC
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {VisualC 6}
        user_data FL_ENV_VC6
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {VisualC 2008}
        user_data FL_ENV_VC2008
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {VisualC 2010}
        user_data FL_ENV_VC2010
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
    Submenu {} {
      label {Apple OS X} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label {Xcode 3 && 4}
        user_data FL_ENV_XC4
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
  }
  code {pEnvMenu->copy(menu_pEnvMenu);
fltk3::MenuItem *mi = (fltk3::MenuItem*)pEnvMenu->menu();
int level = 0;
while (mi->label()) {
  unsigned int me = (int)(long)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = new fltk3::MultiLabel;
    ml->labela = (char*)&menu_none_pixmap;
    ml->labelb = mi->text;
    ml->typea = fltk3::IMAGE_LABEL;
    ml->typeb = fltk3::NORMAL_LABEL;
    ml->label( mi );  
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}} {}
  Function {update_all()} {open protected return_type void
  } {
    code {// now update all menus
unsigned int e = pEnv;
fltk3::MenuItem *mi = (fltk3::MenuItem*)pEnvMenu->menu();
int level = 0;
while (mi->label()) {
  unsigned int me = (int)(long)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = (fltk3::MultiLabel*)mi->label();
    if ( (me&e)==0 ) {
      ml->labela = (char*)&menu_none_pixmap;
    } else if ( (me&e)==me ) {
      ml->labela = (char*)&menu_all_pixmap;
    } else {
      ml->labela = (char*)&menu_multi_pixmap;
    }
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}

// update the text
if (pEnv==FL_ENV_ALL) {
  pEnvMenu->label("- all -");
} else if (pEnv==FL_ENV_NONE) {
  pEnvMenu->label("- none -");
} else {
  char buf[1024]; buf[0] = 0;
  if (pEnv&FL_ENV_MAKE) strcat(buf, "make, ");
  if (pEnv&FL_ENV_CMAKE) strcat(buf, "cmake, ");
  if (pEnv&FL_ENV_VC6) strcat(buf, "VC6, ");
  if (pEnv&FL_ENV_VC2008) strcat(buf, "VC2008, ");
  if (pEnv&FL_ENV_VC2010) strcat(buf, "VC2010, ");
  if (pEnv&FL_ENV_XC4) strcat(buf, "Xcode3 && 4, ");
  int n = strlen(buf);
  if (n>2) buf[n-2] = 0;
  pEnvMenu->copy_label(buf);
}} {}
  }
  Function {value(unsigned int v)} {
    comment {Set the environment flags} open return_type void
  } {
    code {pEnv = v;
update_all();} {}
  }
  Function {value()} {
    comment {Get the environment flags} open return_type {unsigned int}
  } {
    code {return pEnv;} {}
  }
} 

decl {extern Fl_Panel *the_workspace_panel;} {private global
} 

Function {workspace_panel_set_cb(fltk3::Widget*, void *v)} {open return_type void
} {
  code {if (v == Fl_Panel::LOAD) {
  } else {
    fltk3::Widget*const* a = the_workspace_panel->array();
    for (int i=the_workspace_panel->children(); i--;) {
      fltk3::Widget* o = *a++;
      if (o->changed()) {
        o->do_callback();
        //if (haderror) return;
        o->clear_changed();
      }
    }
  }} {}
} 

Function {make_workspace_panel()} {open
} {
  {fltk3::Window} {} {
    label {File Properties} open
    xywh {452 231 420 450} type Double labelsize 11 align 80 resizable hotspot
    class Fl_Panel non_modal visible
  } {
    {fltk3::ScrollGroup} pScrollGroup {
      callback {Fl_Panel::propagate_load} open
      xywh {10 10 400 400} box FLAT_BOX color 50 resizable
    } {
      {fltk3::PackedGroup} {} {
        callback {if (v == Fl_Panel::LOAD) {
  int i, n = o->children();
  for (i=0; i<n; i++) {
    o->child(i)->hide();
  }
  wSpacer->show();
  Fl_Panel::propagate_load(o, v);
  o->layout();
  // TODO: if the window grows taller than the screen height,
  // we can use the pScrollGroup to keep the entire panell accesible.
  o->window()->size(o->window()->w(), 10+o->h()+15+25+10);
  pScrollGroup->resize(10, 10, o->w(), o->h());
  pCloseGroup->resize(10, 10+o->h()+15, o->w(), pCloseGroup->h());
  o->window()->init_sizes();
  
  static char buf[1024];
  if (Fl_Panel::numselected != 1)
    sprintf(buf, "Workspace Properties (%d items)", Fl_Panel::numselected);
  else
    sprintf(buf, "%s Properties", Fl_Panel::selected_type()->name());
  the_workspace_panel->label(buf);
}} open
        xywh {0 0 400 400} resizable
      } {
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && !t->is_file()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 0 400 30} labelsize 12 align 4
        } {
          {fltk3::Input} {} {
            label {Name }
            callback {if (v == Fl_Panel::LOAD) {
    if (Fl_Panel::numselected != 1 || Fl_Panel::selected_type==0) {
      o->static_value("<Multiple Values>");
      o->deactivate();
    } else {
      o->static_value(Fl_Panel::selected_type()->name());
      o->activate();
    }
  } else {
    if (Fl_Panel::numselected == 1) {
      Fl_Panel::selected_type()->name(o->value());
      if (o->changed()) set_modflag(1);
    }
  }}
            tooltip {name and path of the file} xywh {100 5 290 20} labelsize 12 when 1 textsize 12 resizable
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_target()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 30 400 30} labelsize 12 align 4
        } {
          {fltk3::Input} {} {
            label {Destination Path }
            callback {if (v == Fl_Panel::LOAD) {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_target()) {
        o->value(((Fl_Target_Type*)t)->target_path());
      }
    }
  } else {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_target()) {
        ((Fl_Target_Type*)t)->target_path(o->value());
      }
    }
    set_modflag(1);
  }}
            tooltip {name and path of the file} xywh {100 5 290 20} labelsize 12 when 1 textsize 12 resizable
          }
        }
        {fltk3::Group} pFileNameGroup {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_file()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 89 400 30} labelsize 12 align 4
        } {
          {fltk3::Input} pFileName {
            label {File Name }
            callback {if (v == Fl_Panel::LOAD) {
    if (Fl_Panel::numselected != 1 || Fl_Panel::selected_file()==0L) {
      o->static_value("<Multiple Values>");
      pFileNameGroup->deactivate();
    } else {
      o->static_value(Fl_Panel::selected_file()->filename());
      pFileNameGroup->activate();
    }
  } else {
    if (Fl_Panel::numselected == 1) {
      Fl_Panel::selected_file()->filename(o->value());
      if (o->changed()) set_modflag(1);
    }
  }}
            tooltip {name and path of the file} xywh {100 5 250 20} labelsize 12 when 1 textsize 12 resizable
          }
          {fltk3::Button} {} {
            label {@-3filenew}
            callback {// FIXME: relative to...

if (v == Fl_Panel::LOAD) {
  } else {
    const char *fn = fltk3::file_chooser("Select file:", "*", pFileName->value());
    if (fn) {
      pFileName->value(fn);
      pFileName->do_callback();
    }
  }} selected
            xywh {350 5 40 20} color 52 labelcolor 43 align 16 deactivate
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_file()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 119 400 30}
        } {
          {fltk3::Group} {} {
            label {File Type }
            callback {Fl_Panel::propagate_load} open
            xywh {100 5 200 20} labelsize 12 align 4
          } {
            {fltk3::MenuButton} {} {
              label Unknown
              callback {if (v == Fl_Panel::LOAD) {
  } else {
    int mod = 0;
    const fltk3::MenuItem *mi = o->mvalue();
    int e = mi->argument();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->filetype() != e) {
          if (e==FL_FILE_EXPLICIT)
            ((Fl_File_Type*)t)->set_default_type();
          else
            ((Fl_File_Type*)t)->filetype(e|FL_FILE_EXPLICIT);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }
  
  char buf[64];
  Fl_File_Type *ff = Fl_Panel::selected_file();
  if (ff) {
    unsigned int ft = ff->filetype();
    if (ft&FL_FILE_EXPLICIT) {
      strcpy(buf, "explicit - ");
    } else {
      strcpy(buf, "default - ");
    }
    ft = ft & 0x7fff;
    for (const fltk3::MenuItem *mi = o->menu(); ; mi++) {
      if (!mi->label()) {
        strcat(buf, "<unknown>");
        break;
      }
      if (mi->argument()==(int)ft) {
        strcat(buf, mi->label());
        break;
      }
    }
    o->copy_label(buf);
  }} open
              xywh {0 0 200 20} labelsize 12
            } {
              MenuItem {} {
                label Default
                user_data FL_FILE_EXPLICIT user_data_type long
                xywh {-93 -119 31 20} labelsize 12 divider
              }
              MenuItem {} {
                label {C Source Code}
                user_data FL_FILE_C_SOURCE user_data_type long
                xywh {-103 -129 31 20} labelsize 12
              }
              MenuItem {} {
                label {C Header}
                user_data FL_FILE_C_HEADER user_data_type long
                xywh {-93 -119 31 20} labelsize 12
              }
              MenuItem {} {
                label {C++ Source Code}
                user_data FL_FILE_CPP_SOURCE user_data_type long
                xywh {-83 -109 31 20} labelsize 12
              }
              MenuItem {} {
                label {C++ Header}
                user_data FL_FILE_CPP_HEADER user_data_type long
                xywh {-73 -99 31 20} labelsize 12
              }
              MenuItem {} {
                label {ObjectiveC Source}
                user_data FL_FILE_OBJC_SOURCE user_data_type long
                xywh {-63 -89 31 20} labelsize 12
              }
              MenuItem {} {
                label {ObjectiveC Header}
                user_data FL_FILE_OBJC_HEADER user_data_type long
                xywh {-53 -79 31 20} labelsize 12
              }
              MenuItem {} {
                label Text
                user_data FL_FILE_TEXT user_data_type long
                xywh {-43 -69 31 20} labelsize 12
              }
              MenuItem {} {
                label {Shell Script}
                user_data FL_FILE_TEXT_SCRIPT user_data_type long
                xywh {-33 -59 31 20} labelsize 12
              }
              MenuItem {} {
                label {OS X Framework}
                user_data FL_FILE_FRAMEWORK user_data_type long
                xywh {-23 -49 31 20} labelsize 12
              }
              MenuItem {} {
                label Library
                user_data FL_FILE_LIBRARY user_data_type long
                xywh {-13 -39 31 20} labelsize 12
              }
              MenuItem {} {
                label {Fluid UI Design}
                user_data FL_FILE_FLUID_UI user_data_type long
                xywh {-13 -39 31 20} labelsize 12 divider
              }
              MenuItem {} {
                label Unknown
                user_data FL_FILE_UNKNOWN user_data_type long
                xywh {-23 -49 31 20} labelsize 12
              }
            }
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_file()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 149 400 30} labelsize 12 align 4
        } {
          {fltk3::Group} {} {
            label {Location }
            callback {Fl_Panel::propagate_load} open
            xywh {100 5 200 20} labelsize 12 align 4
          } {
            {fltk3::MenuButton} {} {
              label {Relative to Workspace}
              callback {if (v == Fl_Panel::LOAD) {
  /*...*/
  } else {
    int mod = 0;
    const fltk3::MenuItem *mi = o->mvalue();
    int e = mi->argument();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->location() != e) {
          ((Fl_File_Type*)t)->location(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }

  // FIXME: we should show <multiple values> if required
  Fl_File_Type *ff = Fl_Panel::selected_file();
  if (ff) {
    unsigned int fl =ff->location();
    for (const fltk3::MenuItem *mi = o->menu(); ; mi++) {
      if (!mi->label()) break;
      if (mi->argument()==(int)fl) {
        o->label(mi->label());
        break;
      }
    }
  }} open
              xywh {0 0 200 20} labelsize 12
            } {
              MenuItem {} {
                label {Relative to Workspace}
                user_data FL_LOCATION_WORKSPACE user_data_type long
                xywh {-83 -139 31 20} labelsize 12
              }
              MenuItem {} {
                label {Absolute Path}
                user_data FL_LOCATION_ABSOLUTE user_data_type long
                xywh {-93 -149 31 20} labelsize 12
              }
              MenuItem {} {
                label {Relative to IDE}
                user_data FL_LOCATION_IDE user_data_type long
                tooltip {Xcode: relative to Developer Directory, used for Frameworks} xywh {-83 -139 31 20} labelsize 12
              }
              MenuItem {} {
                label {Relative to SDK}
                user_data FL_LOCATION_SDK user_data_type long
                xywh {-73 -129 31 20} labelsize 12
              }
            }
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_tool() && !t->is_folder() && !t->is_category()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 179 400 30}
        } {
          {fltk3::MenuButton} {} {
            label {Build in }
            callback {if (v == Fl_Panel::LOAD) {
    o->value(Fl_Panel::selected_tool()->build_env());
  } else {
    int mod = 0;
    unsigned int e = o->value();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_tool()) {
        if (((Fl_Tool_Type*)t)->build_env() != e) {
          ((Fl_Tool_Type*)t)->build_env(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }} open
            xywh {100 3 200 26} box FLAT_BOX labelsize 12 align 4
            class Fl_Environment_Choice
          } {}
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && (t->is_file() || t->is_folder() || t->is_category())) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 209 400 30}
        } {
          {fltk3::MenuButton} {} {
            label {List in }
            callback {if (v == Fl_Panel::LOAD) {
    o->value(Fl_Panel::selected_tool()->list_env());
  } else {
    int mod = 0;
    unsigned int e = o->value();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_tool()) {
        if (((Fl_Tool_Type*)t)->list_env() != e) {
          ((Fl_Tool_Type*)t)->list_env(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }} open
            xywh {100 5 200 25} box FLAT_BOX labelsize 12 align 4
            class Fl_Environment_Choice
          } {}
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_target()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 60 400 30} labelsize 12 align 4
        } {
          {fltk3::Input} {} {
            label {Makefile Path }
            callback {if (v == Fl_Panel::LOAD) {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_target()) {
        o->value(((Fl_Target_Type*)t)->makefile_path());
      }
    }
  } else {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_target()) {
        ((Fl_Target_Type*)t)->makefile_path(o->value());
      }
    }
    set_modflag(1);
  }}
            xywh {100 5 290 20} labelsize 12 when 1 textsize 12 resizable
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_target()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 247 400 30} labelsize 12 align 4
        } {
          {fltk3::Input} {} {
            label {Value }
            callback {if (v == Fl_Panel::LOAD) {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_target()) {
        o->value(((Fl_Target_Type*)t)->makefile_path());
      }
    }
  } else {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_target()) {
        ((Fl_Target_Type*)t)->makefile_path(o->value());
      }
    }
    set_modflag(1);
  }}
            xywh {100 5 290 20} labelsize 12 when 1 textsize 12 resizable
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_option()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 282 400 30} labelsize 12 align 4
        } {
          {fltk3::Input} {} {
            label {Option Value }
            callback {if (v == Fl_Panel::LOAD) {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_option()) {
        o->value(((Fl_Option_Type*)t)->value());
      }
    }
  } else {
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_option()) {
        ((Fl_Option_Type*)t)->value(o->value());
      }
    }
    set_modflag(1);
  }}
            tooltip {name and path of the file} xywh {100 5 290 20} labelsize 12 when 1 textsize 12 resizable
          }
        }
        {fltk3::Group} {} {
          callback {if (v == Fl_Panel::LOAD) {
  for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
    if (t->selected && t->is_option()) {
      o->show();
      break;
    }
  }
  if (o->visible())
    Fl_Panel::propagate_load(o, v);
}} open
          xywh {0 312 400 30}
        } {
          {fltk3::Choice} {} {
            label {Option Type }
            callback {if (v == Fl_Panel::LOAD) {
    int type = 0;
    if (Fl_Type::current && Fl_Type::current->is_option()) {
      type = ((Fl_Option_Type*)Fl_Type::current)->value_type();
    } else {
      for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
        if (t->selected && t->is_option()) {
          type = ((Fl_Option_Type*)t)->value_type();
          break;
        }
      }
    }
    for (const fltk3::MenuItem *mi = o->menu(); ; mi++) {
      if (!mi->label()) break;
      if (mi->argument()==type) {
        o->value(mi);
        break;
      }
    }
  } else {
    const fltk3::MenuItem *mi = o->mvalue();
    if (mi) {
      for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
        if (t->selected && t->is_option()) {
          ((Fl_Option_Type*)t)->value_type(mi->argument());
        }
      }
    }
    set_modflag(1);
  }} open
            xywh {100 5 200 20} down_box BORDER_BOX labelsize 12 textsize 12
          } {
            MenuItem {} {
              label {Compiler Item}
              user_data FL_OPTION_COMPILER user_data_type long
              tooltip FL_OPTION_COMPILER xywh {-106 -327 31 20} labelsize 12
            }
            MenuItem {} {
              label {Linker Item}
              user_data FL_OPTION_LINKER user_data_type long
              tooltip FL_OPTION_LINKER xywh {-96 -317 31 20} labelsize 12 divider
            }
            MenuItem {} {
              label Other
              user_data FL_OPTION_OTHER user_data_type long
              tooltip FL_OPTION_OTHER xywh {-86 -307 31 20} labelsize 12
            }
          }
        }
        {fltk3::Group} wSpacer {open
          xywh {4 390 400 10}
        } {}
      }
    }
    {fltk3::Group} pCloseGroup {
      callback {Fl_Panel::propagate_load} open
      xywh {10 420 400 25} labelsize 11
    } {
      {fltk3::Widget} {} {
        xywh {0 0 290 25} labelsize 11 resizable
      }
      {fltk3::Button} {} {
        label Close
        callback {if (v == Fl_Panel::LOAD) {
  } else {
    workspace_panel_set_cb(0, 0);
    the_workspace_panel->hide();
  }}
        xywh {290 0 110 25}
      }
    }
  }
} 

comment {
//
// End of "$Id$".
//} {in_source in_header
} 
