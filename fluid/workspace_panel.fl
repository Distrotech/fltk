# data file for the Fltk User Interface Designer (fluid)
version 3.0000 
header_name {.h} 
code_name {.cxx} 
wks_name FLTK
comment {//
// "$Id$"
//
// Workspace Panels for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2011 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems to "fltk-bugs@fltk.org".
//
} {in_source in_header
} 

decl {\#include "Fl_Type.h"} {public global
} 

decl {\#include <fltk3/Pixmap.h>} {public global
} 

decl {\#include <fltk3/MultiLabel.h>} {public global
} 

decl {extern fltk3::Pixmap menu_none_pixmap;} {public global
} 

decl {extern fltk3::Pixmap menu_multi_pixmap;} {public global
} 

decl {extern fltk3::Pixmap menu_all_pixmap;} {public global
} 

widget_class Fl_Environment_Choice {
  xywh {494 182 170 40} type Double
  class {fltk3::Group} visible position_relative
} {
  decl {unsigned int pEnv;} {protected local
  }
  decl {enum { ENV_NONE=0, ENV_ALL=0x007f, ENV_ALL_SHELL=0x0003, ENV_MAKE=0x0001, ENV_CMAKE=0x0002, ENV_ALL_VC=0x001c, ENV_VC6=0x0004, ENV_VC2008=0x0008, ENV_VC2010=0x0010, ENV_ALL_XC=0x0060, ENV_XC3=0x0020, ENV_XC4=0x0040 };} {public local
  }
  {fltk3::MenuButton} pEnvMenu {
    label Environent open
    xywh {0 0 170 20} labelsize 12
  } {
    MenuItem pMenuAll {
      label {All Environments}
      user_data ENV_ALL
      callback {// this is what we want to set or clear, pEnv is what we currently have
unsigned int e = (intptr_t)v;
// find a good logic for settting, clearing, and partial values
if ( (pEnv&e)==e ) {
  // if all bits in the menu are set, toggle the bits off
  pEnv = pEnv ^ e;
} else {
  // some bits don't match, so switch all bits on
  pEnv = pEnv | e;
}

// now update all menus
e = pEnv;
fltk3::MenuItem *mi = menu_pEnvMenu;
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = (fltk3::MultiLabel*)mi->label();
    if ( (me&e)==0 ) {
      ml->labela = (char*)&menu_none_pixmap;
    } else if ( (me&e)==me ) {
      ml->labela = (char*)&menu_all_pixmap;
    } else {
      ml->labela = (char*)&menu_multi_pixmap;
    }
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}

// update the text
if (pEnv==ENV_ALL) {
  pEnvList->label("- all -");
} else if (pEnv==ENV_NONE) {
  pEnvList->label("- none -");
} else {
  char buf[1024]; buf[0] = 0;
  if (pEnv&ENV_MAKE) strcat(buf, "make, ");
  if (pEnv&ENV_CMAKE) strcat(buf, "cmake, ");
  if (pEnv&ENV_VC6) strcat(buf, "VC6, ");
  if (pEnv&ENV_VC2008) strcat(buf, "VC2008, ");
  if (pEnv&ENV_VC2010) strcat(buf, "VC2010, ");
  if (pEnv&ENV_XC3) strcat(buf, "Xcode3, ");
  if (pEnv&ENV_XC4) strcat(buf, "Xcode4, ");
  int n = strlen(buf);
  if (n>2) buf[n-2] = 0;
  pEnvList->copy_label(buf);
}

if (callback())
  do_callback();}
      xywh {0 0 100 20} labelsize 12 divider
    }
    Submenu {} {
      label {Command Line} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data ENV_ALL_SHELL
        callback cb_pMenuAll
        xywh {10 10 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {Makefile (make, gmake)}
        user_data ENV_MAKE
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {CMake File (cmake)}
        user_data ENV_CMAKE
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
    Submenu {} {
      label {MS Windows} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data ENV_ALL_VC
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {VisualC 6}
        user_data ENV_VC6
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {VisualC 2008}
        user_data ENV_VC2008
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {VisualC 2010}
        user_data ENV_VC2010
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
    Submenu {} {
      label {Apple OS X} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data ENV_ALL_XC
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {Xcode 3}
        user_data ENV_XC3
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {Xcode 4}
        user_data ENV_XC4
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
  }
  {fltk3::Box} pEnvList {
    label {make, cmake, Xcode3 Xcode4, VC6, VC2010, VC2008}
    xywh {0 20 170 20} labelsize 9 align 209
  }
  code {fltk3::MenuItem *mi = menu_pEnvMenu;
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = new fltk3::MultiLabel;
    ml->labela = (char*)&menu_none_pixmap;
    ml->labelb = mi->text;
    ml->typea = fltk3::IMAGE_LABEL;
    ml->typeb = fltk3::NORMAL_LABEL;
    ml->label( mi );  
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}} {}
  Function {value(unsigned int v)} {
    comment {Set the environment flags} return_type void
  } {
    code {pEnv = v;
cb_pMenuAll_i(0, 0);} {}
  }
  Function {value()} {
    comment {Get the environment flags} return_type {unsigned int}
  } {
    code {return pEnv;} {}
  }
} 

Function {show_workspace_panel()} {} {
  codeblock {if (!workspace_panel)} {open
  } {
    {fltk3::Window} workspace_panel {
      label {Workspace Properties} open
      xywh {832 211 274 173} type Double modal visible
    } {
      {fltk3::Input} pName {
        label {Name:}
        tooltip {name of the target - this will be used in the IDEs and as a general reference.} xywh {85 15 170 25} labelsize 12 textsize 12
      }
      {fltk3::Box} {} {
        label {Create Build Enviroments for:}
        xywh {10 50 288 2} box THIN_DOWN_FRAME labelsize 12 align 6
      }
      {fltk3::MenuButton} pEnv {open
        xywh {85 71 170 40} box FLAT_BOX
        class Fl_Environment_Choice
      } {}
      {fltk3::Button} {} {
        label OK
        callback {if (wks_name) free(wks_name);
wks_name = strdup(pName->value());
wks_env = pEnv->value();
workspace_panel->hide();}
        xywh {160 130 95 25} labelsize 12
      }
    }
  }
  code {if (wks_name) 
  pName->value(wks_name);
else
  pName->value("unnamed workspace");
if (wks_env)  
  pEnv->value(wks_env);  
else
  pEnv->value(Fl_Environment_Choice::ENV_ALL);
workspace_panel->show();} {}
} 

Function {make_app_target_panel()} {} {
  {fltk3::Window} {} {
    label {Application Target} open
    xywh {550 437 307 281} type Double visible
  } {
    {fltk3::Input} {} {
      label {Name:}
      tooltip {name of the target - this will be used in the IDEs and as a general reference.} xywh {70 20 213 25} labelsize 12 textsize 12
    }
    {fltk3::Input} {} {
      label {File Name:}
      tooltip {name of the final executable - the appropriate file extension will be added} xywh {70 55 213 25} labelsize 12 textsize 12 deactivate
    }
    {fltk3::Choice} {} {
      label {File Type:} open
      xywh {70 90 215 25} down_box BORDER_BOX labelsize 12 textsize 12 deactivate
    } {}
    {fltk3::Choice} {} {
      label {Location:} open
      xywh {70 125 215 25} down_box BORDER_BOX labelsize 12 textsize 12 deactivate
    } {}
    {fltk3::Output} {} {
      label {Full Path:}
      xywh {70 160 215 25} labelsize 12 textsize 12 deactivate
    }
    {fltk3::Button} {} {
      label OK
      xywh {85 240 95 25} labelsize 12
    }
    {fltk3::Button} {} {
      label Cancel
      xywh {190 240 95 25} labelsize 12
    }
    {fltk3::Choice} {} {
      label {Use:} open
      xywh {70 195 215 25} down_box BORDER_BOX labelsize 12 textsize 12 deactivate
    } {}
  }
} 

decl {extern fltk3::Window *the_file_panel;} {private global
} 

Function {file_panel_name_cb(fltk3::Input *i, void *v)} {open private return_type void
} {
  code {if (v == Fl_Panel::LOAD) {
      /*
      i->static_value(current_widget->label());
      if (strlen(i->value()) >= oldlabellen) {
        oldlabellen = strlen(i->value())+128;
        oldlabel = (char*)realloc(oldlabel,oldlabellen);
      }
      strcpy(oldlabel,i->value());
      */
    } else {
      int mod = 0;
      for (Fl_Type *o = Fl_Type::first; o; o = o->next) {
        if (o->selected && o->is_file()) {
          ((Fl_File_Type*)o)->filename(i->value());
          mod = 1;
        }
      }
      if (mod) set_modflag(1);
    }

/*
void name_cb(fltk3::Input* o, void *v) {
  if (v == LOAD) {
    static char buf[1024];
    if (numselected != 1) {
      snprintf(buf, sizeof(buf), "Widget Properties (%d widgets)", numselected);
      o->hide();
    } else {
      o->static_value(current_widget->name());
      o->show();
      snprintf(buf, sizeof(buf), "%s Properties", current_widget->title());
    }
    
    the_panel->label(buf);
  } else {
    if (numselected == 1) {
      current_widget->name(o->value());
      // I don't update window title, as it probably is being closed
      // and wm2 (a window manager) barfs if you retitle and then
      // hide a window:
      // ((fltk3::Window*)(o->parent()->parent()->parent()))->label(current_widget->title());
    }
  }
}
*/} {}
} 

Function {file_panel_env_cb(Fl_Environment_Choice *i, void *v)} {open private return_type void
} {
  code {if (v == Fl_Panel::LOAD) {
      /*
      i->static_value(current_widget->label());
      if (strlen(i->value()) >= oldlabellen) {
        oldlabellen = strlen(i->value())+128;
        oldlabel = (char*)realloc(oldlabel,oldlabellen);
      }
      strcpy(oldlabel,i->value());
      */
      // FIXME: current_widget needed
      for (Fl_Type *o = Fl_Type::first; o; o = o->next) {
        if (o->selected && o->is_file()) {
          i->value(((Fl_File_Type*)o)->environments());
          return;
        }
      }
    } else {
      int mod = 0;
      for (Fl_Type *o = Fl_Type::first; o; o = o->next) {
        if (o->selected && o->is_file()) {
          ((Fl_File_Type*)o)->environments(i->value());
          mod = 1;
        }
      }
      if (mod) set_modflag(1);
    }} {selected
  }
} 

Function {file_panel_ok_cb(fltk3::Widget*, void*)} {open private return_type void
} {
  code {fltk3::Widget*const* a = the_file_panel->array();
    for (int i=the_file_panel->children(); i--;) {
      fltk3::Widget* o = *a++;
      if (o->changed()) {
        o->do_callback();
        //if (haderror) return;
        o->clear_changed();
      }
    }
  the_file_panel->hide();} {}
} 

Function {make_file_panel()} {open
} {
  {fltk3::Window} {} {
    label {File Properties} open
    xywh {510 319 405 136} type Double labelsize 11 align 80 resizable hotspot
    code0 {o->size_range(o->w(), o->h());}
    class Fl_Panel visible
  } {
    {fltk3::Group} {} {
      label {File Name:}
      callback propagate_load open
      xywh {75 15 309 20} labelfont 1 labelsize 11 align 4
    } {
      {fltk3::Input} {} {
        callback file_panel_name_cb
        tooltip {The label text for the widget.
Use Ctrl-J for newlines.} xywh {75 15 170 20} labelfont 1 labelsize 11 when 1 textsize 11 resizable
      }
    }
    {fltk3::MenuButton} {} {
      callback file_panel_env_cb open
      xywh {75 45 170 40} box FLAT_BOX
      class Fl_Environment_Choice
    } {}
    {fltk3::Group} {} {open
      xywh {9 100 400 20} labelsize 11
    } {
      {fltk3::Box} {} {
        xywh {9 100 321 20} labelsize 11 resizable
      }
      {fltk3::ReturnButton} {} {
        label Close
        callback file_panel_ok_cb
        xywh {330 100 64 20} labelsize 11
      }
    }
  }
} 

comment {
//
// End of "$Id$".
//} {in_source in_header
} 
