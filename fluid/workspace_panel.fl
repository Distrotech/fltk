# data file for the Fltk User Interface Designer (fluid)
version 3.0000 
header_name {.h} 
code_name {.cxx} 
wks_name FLTK 
wks_env 1
comment {//
// "$Id$"
//
// Workspace Panels for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2011 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems to "fltk-bugs@fltk.org".
//
} {in_source in_header
} 

decl {\#include "Fl_Type.h"} {public global
} 

decl {\#include <stdint.h>} {public global
} 

decl {\#include <fltk3/Pixmap.h>} {public global
} 

decl {\#include <fltk3/MultiLabel.h>} {public global
} 

decl {extern fltk3::Pixmap menu_none_pixmap;} {public global
} 

decl {extern fltk3::Pixmap menu_multi_pixmap;} {public global
} 

decl {extern fltk3::Pixmap menu_all_pixmap;} {public global
} 

widget_class Fl_Environment_Choice {open
  xywh {820 144 170 25} type Double
  class {fltk3::Group} visible position_relative
} {
  decl {unsigned int pEnv;} {protected local
  }
  {fltk3::MenuButton} pEnvMenu {
    label {- unknown -} open selected
    xywh {0 0 170 25} labelsize 9 align 192
  } {
    MenuItem pMenuAll {
      label {All Environments}
      user_data ENV_ALL
      callback {// this is what we want to set or clear, pEnv is what we currently have
unsigned int e = (intptr_t)v;
// find a good logic for settting, clearing, and partial values
if ( (pEnv&e)==e ) {
  // if all bits in the menu are set, toggle the bits off
  pEnv = pEnv ^ e;
} else {
  // some bits don't match, so switch all bits on
  pEnv = pEnv | e;
}

update_all();

if (callback())
  do_callback();}
      xywh {0 0 100 20} labelsize 12 divider
    }
    Submenu {} {
      label {Command Line} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data ENV_ALL_SHELL
        callback cb_pMenuAll
        xywh {10 10 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {Makefile (make, gmake)}
        user_data ENV_MAKE
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {CMake File (cmake)}
        user_data ENV_CMAKE
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
    Submenu {} {
      label {MS Windows} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data ENV_ALL_VC
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {VisualC 6}
        user_data ENV_VC6
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {VisualC 2008}
        user_data ENV_VC2008
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {VisualC 2010}
        user_data ENV_VC2010
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
    Submenu {} {
      label {Apple OS X} open
      xywh {0 0 100 20} labelsize 12
    } {
      MenuItem {} {
        label All
        user_data ENV_ALL_XC
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12 divider
      }
      MenuItem {} {
        label {Xcode 3}
        user_data ENV_XC3
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
      MenuItem {} {
        label {Xcode 4}
        user_data ENV_XC4
        callback cb_pMenuAll
        xywh {0 0 100 20} labelsize 12
      }
    }
  }
  code {pEnvMenu->copy(menu_pEnvMenu);
fltk3::MenuItem *mi = (fltk3::MenuItem*)pEnvMenu->menu();
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = new fltk3::MultiLabel;
    ml->labela = (char*)&menu_none_pixmap;
    ml->labelb = mi->text;
    ml->typea = fltk3::IMAGE_LABEL;
    ml->typeb = fltk3::NORMAL_LABEL;
    ml->label( mi );  
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}} {}
  Function {update_all()} {open protected return_type void
  } {
    code {// now update all menus
unsigned int e = pEnv;
fltk3::MenuItem *mi = (fltk3::MenuItem*)pEnvMenu->menu();
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = (fltk3::MultiLabel*)mi->label();
    if ( (me&e)==0 ) {
      ml->labela = (char*)&menu_none_pixmap;
    } else if ( (me&e)==me ) {
      ml->labela = (char*)&menu_all_pixmap;
    } else {
      ml->labela = (char*)&menu_multi_pixmap;
    }
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}

// update the text
if (pEnv==ENV_ALL) {
  pEnvMenu->label("- all -");
} else if (pEnv==ENV_NONE) {
  pEnvMenu->label("- none -");
} else {
  char buf[1024]; buf[0] = 0;
  if (pEnv&ENV_MAKE) strcat(buf, "make, ");
  if (pEnv&ENV_CMAKE) strcat(buf, "cmake, ");
  if (pEnv&ENV_VC6) strcat(buf, "VC6, ");
  if (pEnv&ENV_VC2008) strcat(buf, "VC2008, ");
  if (pEnv&ENV_VC2010) strcat(buf, "VC2010, ");
  if (pEnv&ENV_XC3) strcat(buf, "Xcode3, ");
  if (pEnv&ENV_XC4) strcat(buf, "Xcode4, ");
  int n = strlen(buf);
  if (n>2) buf[n-2] = 0;
  pEnvMenu->copy_label(buf);
}} {}
  }
  Function {value(unsigned int v)} {
    comment {Set the environment flags} open return_type void
  } {
    code {pEnv = v;
update_all();} {}
  }
  Function {value()} {
    comment {Get the environment flags} return_type {unsigned int}
  } {
    code {return pEnv;} {}
  }
} 

Function {show_workspace_panel()} {open
} {
  codeblock {if (!workspace_panel)} {open
  } {
    {fltk3::Window} workspace_panel {
      label {Workspace Properties} open
      xywh {832 211 274 173} type Double modal visible
    } {
      {fltk3::Input} pName {
        label {Name:}
        tooltip {name of the target - this will be used in the IDEs and as a general reference.} xywh {85 15 170 25} labelsize 12 textsize 12
      }
      {fltk3::Box} {} {
        label {Create Build Enviroments for:}
        xywh {10 50 288 2} box THIN_DOWN_FRAME labelsize 12 align 6
      }
      {fltk3::MenuButton} pEnv {open
        xywh {85 71 170 40} box FLAT_BOX
        class Fl_Environment_Choice
      } {}
      {fltk3::Button} {} {
        label OK
        callback {if (wks_name) free(wks_name);
wks_name = strdup(pName->value());
wks_env = pEnv->value();
workspace_panel->hide();}
        xywh {160 130 95 25} labelsize 12
      }
    }
  }
  code {if (wks_name) 
  pName->value(wks_name);
else
  pName->value("unnamed workspace");
if (wks_env)  
  pEnv->value(wks_env);  
else
  pEnv->value(ENV_ALL);
workspace_panel->show();} {}
} 

decl {extern fltk3::Window *the_file_panel;} {private global
} 

Function {file_panel_set_cb(fltk3::Widget*, void *v)} {open return_type void
} {
  code {if (v == Fl_Panel::LOAD) {
  } else {
    fltk3::Widget*const* a = the_file_panel->array();
    for (int i=the_file_panel->children(); i--;) {
      fltk3::Widget* o = *a++;
      if (o->changed()) {
        o->do_callback();
        //if (haderror) return;
        o->clear_changed();
      }
    }
  }} {}
} 

Function {make_file_panel()} {open
} {
  {fltk3::Window} {} {
    label {File Properties} open
    xywh {718 318 291 245} type Double labelsize 11 align 80 resizable hotspot
    code0 {o->size_range(o->w(), o->h());}
    class Fl_Panel non_modal visible
  } {
    {fltk3::Group} {} {
      label {File Name:}
      callback {Fl_Panel::propagate_load} open
      xywh {75 15 309 20} labelsize 12 align 4
    } {
      {fltk3::Input} {} {
        callback {if (v == Fl_Panel::LOAD) {
    static char buf[1024];
    if (Fl_Panel::numselected != 1) {
      o->static_value("<Multiple Values>");
      o->deactivate();
      snprintf(buf, sizeof(buf), "File Properties (%d files)", Fl_Panel::numselected);
    } else {
      o->static_value(Fl_Panel::current_file()->filename());
      o->activate();
      snprintf(buf, sizeof(buf), "%s Properties", Fl_Panel::current_file()->name());
    }
    the_file_panel->label(buf);
  } else {
    if (Fl_Panel::numselected == 1) {
      Fl_Panel::current_file()->filename(o->value());
      if (o->changed()) set_modflag(1);
    }
  }}
        tooltip {The label text for the widget.
Use Ctrl-J for newlines.} xywh {75 15 170 20} labelsize 12 when 1 textsize 12 resizable
      }
    }
    {fltk3::MenuButton} {} {
      label {Build in:}
      callback {if (v == Fl_Panel::LOAD) {
    o->value(Fl_Panel::current_file()->build_env());
  } else {
    int mod = 0;
    unsigned int e = o->value();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->build_env() != e) {
          ((Fl_File_Type*)t)->build_env(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }} open
      xywh {75 45 170 25} box FLAT_BOX labelsize 12 align 4
      class Fl_Environment_Choice
    } {}
    {fltk3::MenuButton} {} {
      label {List in:}
      callback {if (v == Fl_Panel::LOAD) {
    o->value(Fl_Panel::current_file()->list_env());
  } else {
    int mod = 0;
    unsigned int e = o->value();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->list_env() != e) {
          ((Fl_File_Type*)t)->list_env(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }} open
      xywh {75 75 170 25} box FLAT_BOX labelsize 12 align 4
      class Fl_Environment_Choice
    } {}
    {fltk3::Group} {} {
      label {File Type:}
      callback {Fl_Panel::propagate_load} open
      xywh {75 105 170 20} labelsize 12 align 4
    } {
      {fltk3::MenuButton} {} {
        label Unknown
        callback {if (v == Fl_Panel::LOAD) {
  } else {
    int mod = 0;
    const fltk3::MenuItem *mi = o->mvalue();
    int e = mi->argument();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->filetype() != e) {
          if (e==FILE_EXPLICIT)
            ((Fl_File_Type*)t)->set_default_type();
          else
            ((Fl_File_Type*)t)->filetype(e|FILE_EXPLICIT);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }
      char buf[64];
      unsigned int ft = Fl_Panel::current_file()->filetype();
      if (ft&FILE_EXPLICIT) {
        strcpy(buf, "explicit - ");
      } else {
        strcpy(buf, "default - ");
      }
      ft = ft & 0x7fff;
      for (const fltk3::MenuItem *mi = o->menu(); ; mi++) {
        if (!mi->label()) {
          strcat(buf, "<unknown>");
          break;
        }
        if (mi->argument()==ft) {
          strcat(buf, mi->label());
          break;
        }
      }
      o->copy_label(buf);} open
        xywh {75 105 170 20} labelsize 12
      } {
        MenuItem {} {
          label Default
          user_data FILE_EXPLICIT user_data_type long
          xywh {10 10 31 20} labelsize 12 divider
        }
        MenuItem {} {
          label {C Source Code}
          user_data FILE_C_SOURCE user_data_type long
          xywh {0 0 31 20} labelsize 12
        }
        MenuItem {} {
          label {C Header}
          user_data FILE_C_HEADER user_data_type long
          xywh {10 10 31 20} labelsize 12
        }
        MenuItem {} {
          label {C++ Source Code}
          user_data FILE_CPP_SOURCE user_data_type long
          xywh {20 20 31 20} labelsize 12
        }
        MenuItem {} {
          label {C++ Header}
          user_data FILE_CPP_HEADER user_data_type long
          xywh {30 30 31 20} labelsize 12
        }
        MenuItem {} {
          label {ObjectiveC Source}
          user_data FILE_OBJC_SOURCE user_data_type long
          xywh {40 40 31 20} labelsize 12
        }
        MenuItem {} {
          label {ObjectiveC Header}
          user_data FILE_OBJC_HEADER user_data_type long
          xywh {50 50 31 20} labelsize 12
        }
        MenuItem {} {
          label Text
          user_data FILE_TEXT user_data_type long
          xywh {60 60 31 20} labelsize 12
        }
        MenuItem {} {
          label {Shell Script}
          user_data FILE_TEXT_SCRIPT user_data_type long
          xywh {70 70 31 20} labelsize 12
        }
        MenuItem {} {
          label Unknown
          user_data FILE_UNKNOWN user_data_type long
          xywh {80 80 31 20} labelsize 12
        }
      }
    }
    {fltk3::Group} {} {
      callback {Fl_Panel::propagate_load} open
      xywh {9 195 261 25} labelsize 11
    } {
      {fltk3::Box} {} {
        xywh {9 195 166 25} labelsize 11 resizable
      }
      {fltk3::ReturnButton} {} {
        label Close
        callback {if (v == Fl_Panel::LOAD) {
  } else {
    file_panel_set_cb(0, 0);
    the_file_panel->hide();
  }}
        xywh {175 195 94 25} labelsize 12
      }
    }
  }
} 

comment {
//
// End of "$Id$".
//} {in_source in_header
} 
