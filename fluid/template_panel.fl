# data file for the Fltk User Interface Designer (fluid)
version 3.0000 
header_name {.h} 
code_name {.cxx}
comment {//
// "$Id$"
//
// FLUID template support for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2010 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//
} {in_source in_header
} 

decl {\#include <stdio.h>} {private local
} 

decl {\#include <stdlib.h>} {private local
} 

decl {\#include "../src/fltk3/flstring.h"} {private local
} 

decl {\#include <errno.h>} {private local
} 

decl {\#include <fltk3/filename.h>} {private local
} 

decl {\#include <fltk3/ask.h>} {private local
} 

decl {\#include <fltk3/SharedImage.h>} {private local
} 

decl {\#include <fltk3/Preferences.h>} {private local
} 

declblock {\#if defined(WIN32) && !defined(__CYGWIN__)} {after {\#endif // WIN32 && !__CYGWIN__}
} {
  decl {\#include <io.h>} {private local
  }
  decl {\#else} {private local
  }
  decl {\#include <unistd.h>} {private local
  }
} 

decl {extern fltk3::Preferences fluid_prefs;} {private local
} 

Function {make_template_panel()} {open
} {
  {fltk3::Window} template_panel {
    label {New/Save Template}
    callback {fltk3::SharedImage *img = (fltk3::SharedImage *)template_preview->image();
if (img) img->release();
template_preview->image(0);

template_browser->deselect();
template_name->value("");
template_instance->value("");
template_panel->hide();} open
    xywh {340 237 460 355} type Double resizable modal visible
  } {
    {fltk3::Browser} template_browser {
      label {Available Templates:}
      callback {if (fltk3::event_clicks()) {
  template_panel->hide();
  return;
}
fltk3::SharedImage *img = (fltk3::SharedImage *)template_preview->image();
if (img) img->release();
template_preview->image(0);
template_preview->redraw();

int item = template_browser->value();

if (item <= 1) template_instance->deactivate();
else template_instance->activate();

if (item < 1) {
  template_submit->deactivate();
  template_delete->deactivate();
  return;
}

template_submit->activate();

const char *flfile = (const char *)template_browser->data(item);
if (!flfile) {
  template_delete->deactivate();
  return;
}

template_name->value(template_browser->text(item));

template_delete->activate();

char pngfile[1024], *ext;

strlcpy(pngfile, flfile, sizeof(pngfile));
if ((ext = strrchr(pngfile, '.')) == NULL) return;
strcpy(ext, ".png");

img = fltk3::SharedImage::get(pngfile);

if (img) {
  template_preview->image(img);
  template_preview->redraw();
}}
      xywh {10 28 180 250} type Hold labelfont 1 align 5 when 3
    }
    {fltk3::Widget} template_preview {
      xywh {200 28 250 250} box THIN_DOWN_BOX align 85 resizable
    }
    {fltk3::Input} template_name {
      label {Template Name:}
      callback {if (strlen(template_name->value())) {
  template_submit->activate();
  if (fltk3::event_key() == fltk3::EnterKey) template_panel->hide();
} else template_submit->deactivate();}
      xywh {124 288 326 25} labelfont 1 when 3 textfont 4
    }
    {fltk3::Input} template_instance {
      label {Instance Name:}
      xywh {124 288 326 25} labelfont 1 textfont 4 hide
    }
    {fltk3::Group} {} {open
      xywh {10 323 440 25}
    } {
      {fltk3::Button} template_delete {
        label {Delete Template}
        callback template_delete_cb
        xywh {0 0 133 25}
      }
      {fltk3::Widget} {} {
        xywh {143 0 126 25} resizable
      }
      {fltk3::Button} {} {
        label Cancel
        callback {fltk3::SharedImage *img = (fltk3::SharedImage *)template_preview->image();
if (img) img->release();
template_preview->image(0);

template_browser->deselect();
template_name->value("");
template_instance->value("");
template_panel->hide();}
        xywh {279 0 72 25}
      }
      {fltk3::ReturnButton} template_submit {
        label Save
        callback {fltk3::SharedImage *img = (fltk3::SharedImage *)template_preview->image();
if (img) img->release();
template_preview->image(0);

template_panel->hide();}
        xywh {361 0 79 25}
      }
    }
  }
} 

Function {template_clear()} {return_type void
} {
  code {int i;
void *filename;

for (i = 1; i <= template_browser->size(); i ++) {
  if ((filename = template_browser->data(i)) != NULL) free(filename);
}

template_browser->deselect();
template_browser->clear();} {}
} 

Function {template_delete_cb(fltk3::Button *, void *)} {open return_type void
} {
  code {int item = template_browser->value();
if (item < 1) return;

const char *name = template_browser->text(item);
const char *flfile = (const char *)template_browser->data(item);
if (!flfile) return;

if (!fltk3::choice("Are you sure you want to delete the template \\"%s\\"?",
               "Cancel", "Delete", 0, name)) return;

if (unlink(flfile)) {
  fltk3::alert("Unable to delete template \\"%s\\":\\n%s", name, strerror(errno));
  return;
}

template_browser->remove(item);
template_browser->do_callback();} {}
} 

Function {template_load()} {open return_type void
} {
  code {int i;
char name[1024], filename[1024], path[1024], *ptr;
struct dirent **files;
int num_files;

fluid_prefs.getUserdataPath(path, sizeof(path));
strlcat(path, "templates", sizeof(path));

num_files = fltk3::filename_list(path, &files);

for (i = 0; i < num_files; i ++) {
  if (fltk3::filename_match(files[i]->d_name, "*.fl")) {
    // Format the name as the filename with "_" replaced with " "
    // and without the trailing ".fl"...
    strlcpy(name, files[i]->d_name, sizeof(name));
    *strstr(name, ".fl") = '\\0';

    for (ptr = name; *ptr; ptr ++) {
      if (*ptr == '_') *ptr = ' ';
    }

    // Add the template to the browser...
    snprintf(filename, sizeof(filename), "%s/%s", path, files[i]->d_name);
    template_browser->add(name, strdup(filename));
  }

  free(files[i]);
}

if (num_files > 0) free(files);} {}
} 

comment {
//
// End of "$Id$".
//} {in_source in_header
} 
