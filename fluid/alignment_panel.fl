# data file for the Fltk User Interface Designer (fluid)
version 3.0000 
header_name {.h} 
code_name {.cxx}
comment {//
// "$Id$"
//
// Setting and shell dialogs for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2010 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//
} {in_source in_header
} 

decl {\#include <fltk3/TextBuffer.h>} {public local
} 

decl {\#include <fltk3/TextDisplay.h>} {public local
} 

decl {\#include <fltk3/filename.h>} {public local
} 

decl {\#include <fltk3/Preferences.h>} {private global
} 

decl {\#include <fltk3/ask.h>} {private global
} 

decl {extern void load_history();} {public local
} 

decl {extern void redraw_browser();} {public local
} 

decl {extern int show_comments;} {public local
} 

decl {extern int show_coredevmenus;} {public local
} 

decl {extern struct fltk3::MenuItem *dbmanager_item;} {public local
} 

decl {extern fltk3::Preferences fluid_prefs;} {public local
} 

decl {fltk3::TextBuffer *shell_run_buffer;} {public local
} 

Function {make_project_window()} {} {
  {fltk3::Window} project_window {
    label {Project Settings} open
    xywh {393 460 400 282} type Double
    code0 {\#include <fltk3/Preferences.h>}
    code1 {\#include <fltk3/Tooltip.h>} modal visible
  } {
    {fltk3::Button} {} {
      label Close
      callback {project_window->hide();}
      tooltip {Close this dialog.} xywh {328 240 60 25}
    }
    {fltk3::TabGroup} {} {open
      xywh {10 10 378 220} selection_color 12
    } {
      {fltk3::Group} {} {
        label Output open
        xywh {10 36 378 194} hide
      } {
        {fltk3::Box} {} {
          label {Use "name.ext" to set a file name or just ".ext" to set extension.}
          xywh {100 49 236 49} align 144
        }
        {fltk3::Input} header_file_input {
          label {Header File:}
          user_data 1 user_data_type {void*}
          callback header_input_cb
          tooltip {The name of the generated header file.} xywh {99 103 272 20} box THIN_DOWN_BOX labelfont 1 when 1 textfont 4
        }
        {fltk3::Input} code_file_input {
          label {Code File:}
          user_data 1 user_data_type {void*}
          callback code_input_cb
          tooltip {The name of the generated code file.} xywh {100 128 272 20} box THIN_DOWN_BOX labelfont 1 when 1 textfont 4
        }
        {fltk3::CheckButton} include_H_from_C_button {
          label {Include Header from Code}
          callback include_H_from_C_button_cb
          tooltip {Include the header file from the code file.} xywh {100 177 272 20} down_box DOWN_BOX
        }
        {fltk3::CheckButton} use_FL_COMMAND_button {
          label {Menu shortcuts use FL_COMMAND}
          callback use_FL_COMMAND_button_cb
          tooltip {Replace FL_CTRL with FL_COMMAND when generating menu shortcut code.} xywh {100 200 272 20} down_box DOWN_BOX
        }
        {fltk3::Choice} proj_version_choice {
          label {Version:}
          callback proj_version_cb open
          xywh {100 152 145 20} down_box BORDER_BOX labelfont 1
        } {
          MenuItem {} {
            label {FLTK 1.3.0}
            user_data 10300 user_data_type long
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {FLTK 2.1.0}
            user_data 20100 user_data_type long
            xywh {0 0 100 20} deactivate
          }
          MenuItem {} {
            label {FLTK 3.0.0}
            user_data 30000 user_data_type long
            xywh {0 0 100 20}
          }
        }
      }
      {fltk3::Group} {} {
        label Internationalization open
        xywh {10 36 378 194}
      } {
        {fltk3::Choice} i18n_type_chooser {
          label {Use:}
          callback i18n_type_cb open
          tooltip {Type of internationalization to use.} xywh {100 48 136 25} box THIN_UP_BOX down_box BORDER_BOX labelfont 1
        } {
          MenuItem {} {
            label None
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {GNU gettext}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {POSIX catgets}
            xywh {0 0 100 20}
          }
        }
        {fltk3::Input} i18n_include_input {
          label {\#include:}
          callback i18n_text_cb
          tooltip {The include file for internationalization.} xywh {100 78 272 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        {fltk3::Input} i18n_file_input {
          label {File:}
          callback i18n_text_cb
          tooltip {The name of the message catalog.} xywh {100 104 272 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        {fltk3::Input} i18n_set_input {
          label {Set:}
          callback i18n_int_cb
          tooltip {The message set number.} xywh {100 128 272 20} type Int box THIN_DOWN_BOX labelfont 1 textfont 4
        }
        {fltk3::Input} i18n_function_input {
          label {Function:}
          callback i18n_text_cb
          tooltip {The function to call to internationalize the labels and tooltips.} xywh {100 103 272 20} box THIN_DOWN_BOX labelfont 1 textfont 4
        }
      }
    }
  }
} 

decl {extern void i18n_cb(fltk3::Choice *,void *);} {public local
} 

decl {void scheme_cb(fltk3::Choice *, void *);} {public local
} 

Function {make_settings_window()} {} {
  {fltk3::Window} settings_window {
    label {GUI Settings} open
    xywh {393 191 339 241} type Double non_modal visible
  } {
    {fltk3::Choice} scheme_choice {
      label {Scheme: }
      callback scheme_cb open
      xywh {116 10 115 25} down_box BORDER_BOX labelfont 1
      code0 {int s;}
      code1 {fluid_prefs.get("scheme", s, 0);}
      code2 {scheme_choice->value(s);}
      code3 {scheme_cb(0, 0);}
    } {
      MenuItem {} {
        label Default
        xywh {0 0 35 25}
      }
      MenuItem {} {
        label None
        xywh {0 0 35 25}
      }
      MenuItem {} {
        label Plastic
        xywh {0 0 35 25}
      }
      MenuItem {} {
        label {GTK+}
        xywh {10 10 35 25}
      }
    }
    {fltk3::Group} {} {open
      xywh {116 43 220 126} labelfont 1 align 0
    } {
      {fltk3::Box} {} {
        label {Options: }
        xywh {116 43 1 25} labelfont 1 align 4
      }
      {fltk3::CheckButton} tooltips_button {
        label {Show Tooltips}
        callback {fltk3::Tooltip::enable(tooltips_button->value());
fluid_prefs.set("show_tooltips", tooltips_button->value());}
        xywh {116 43 113 25} down_box DOWN_BOX
        code0 {int b;}
        code1 {fluid_prefs.get("show_tooltips", b, 1);}
        code2 {tooltips_button->value(b);}
        code3 {fltk3::Tooltip::enable(b);}
      }
      {fltk3::CheckButton} completion_button {
        label {Show Completion Dialogs}
        callback {fluid_prefs.set("show_completion_dialogs", completion_button->value());}
        xywh {116 68 186 25} down_box DOWN_BOX
        code0 {int b;}
        code1 {fluid_prefs.get("show_completion_dialogs", b, 1);}
        code2 {completion_button->value(b);}
      }
      {fltk3::CheckButton} openlast_button {
        label {Open Previous File on Startup}
        callback {fluid_prefs.set("open_previous_file", openlast_button->value());}
        xywh {116 93 214 25} down_box DOWN_BOX
        code0 {int b;}
        code1 {fluid_prefs.get("open_previous_file", b, 0);}
        code2 {openlast_button->value(b);}
      }
      {fltk3::CheckButton} prevpos_button {
        label {Remember Window Positions}
        callback {fluid_prefs.set("prev_window_pos", prevpos_button->value());}
        xywh {116 118 209 25} down_box DOWN_BOX
        code0 {int b;}
        code1 {fluid_prefs.get("prev_window_pos", b, 1);}
        code2 {prevpos_button->value(b);}
      }
      {fltk3::CheckButton} show_comments_button {
        label {Show Comments in Browser}
        callback {show_comments = show_comments_button->value();
fluid_prefs.set("show_comments", show_comments);
redraw_browser();}
        xywh {116 143 209 25} down_box DOWN_BOX
        code1 {fluid_prefs.get("show_comments", show_comments, 1);}
        code2 {show_comments_button->value(show_comments);}
      }
    }
    {fltk3::Spinner} recent_spinner {
      label {\# Recent Files: }
      callback {fluid_prefs.set("recent_files", recent_spinner->value());
load_history();}
      xywh {115 173 40 25} labelfont 1 when 1
      code0 {int c;}
      code1 {fluid_prefs.get("recent_files", c, 5);}
      code2 {recent_spinner->maximum(10);}
      code3 {recent_spinner->value(c);}
    }
    {fltk3::Button} {} {
      label Close
      callback {settings_window->hide();}
      tooltip {Close this dialog.} xywh {266 205 64 25}
    }
  }
} 

Function {make_shell_window()} {} {
  {fltk3::Window} shell_window {
    label {Shell Command} open
    xywh {741 195 365 125} type Double visible
  } {
    {fltk3::Input} shell_command_input {
      label {Command:}
      callback {fluid_prefs.set("shell_command", shell_command_input->value());}
      xywh {10 27 347 25} labelfont 1 align 5
      code0 {char buf[1024];}
      code1 {fluid_prefs.get("shell_command", buf, "", sizeof(buf));}
      code2 {shell_command_input->value(buf);}
    }
    {fltk3::CheckButton} shell_writecode_button {
      label {Write Code}
      callback {fluid_prefs.set("shell_writecode", shell_writecode_button->value());}
      xywh {128 61 93 19} down_box DOWN_BOX
      code0 {int b;}
      code1 {fluid_prefs.get("shell_writecode", b, 1);}
      code2 {shell_writecode_button->value(b);}
    }
    {fltk3::CheckButton} shell_writemsgs_button {
      label {Write Messages}
      callback {fluid_prefs.set("shell_writemsgs", shell_writemsgs_button->value());}
      xywh {231 61 126 19} down_box DOWN_BOX
      code0 {int b;}
      code1 {fluid_prefs.get("shell_writemsgs", b, 0);}
      code2 {shell_writemsgs_button->value(b);}
    }
    {fltk3::CheckButton} shell_savefl_button {
      label {Save .FL File}
      callback {fluid_prefs.set("shell_savefl", shell_savefl_button->value());}
      xywh {10 62 108 19} down_box DOWN_BOX
      code0 {int b;}
      code1 {fluid_prefs.get("shell_savefl", b, 1);}
      code2 {shell_savefl_button->value(b);}
    }
    {fltk3::ReturnButton} {} {
      label {Run Command}
      callback do_shell_command
      xywh {132 90 143 25}
    }
    {fltk3::Button} {} {
      label Cancel
      callback {shell_window->hide();}
      xywh {285 90 72 25}
    }
  }
  {fltk3::Window} shell_run_window {
    label {Shell Command Output} open
    xywh {592 332 555 430} type Double hide resizable
  } {
    {fltk3::TextDisplay} shell_run_display {
      xywh {10 10 535 375} box DOWN_BOX textfont 4 resizable
      code0 {shell_run_buffer = new fltk3::TextBuffer();}
      code1 {shell_run_display->buffer(shell_run_buffer);}
    }
    {fltk3::ReturnButton} shell_run_button {
      label Close
      callback {shell_run_window->hide();}
      xywh {468 395 77 25}
    }
  }
} 

Function {make_layout_window()} {} {
  {fltk3::Window} grid_window {
    label {Layout Settings}
    xywh {760 427 285 245} type Double non_modal visible
  } {
    {fltk3::Input} horizontal_input {
      label x
      user_data 1 user_data_type long
      callback grid_cb
      tooltip {Horizontal grid spacing.} xywh {106 10 50 25} type Int box THIN_DOWN_BOX align 8
      code0 {o->when(fltk3::WHEN_RELEASE|fltk3::WHEN_ENTER_KEY);}
    }
    {fltk3::Input} vertical_input {
      label pixels
      user_data 2 user_data_type long
      callback grid_cb
      tooltip {Vertical grid spacing.} xywh {166 10 50 25} type Int box THIN_DOWN_BOX align 8
      code0 {o->when(fltk3::WHEN_RELEASE|fltk3::WHEN_ENTER_KEY);}
    }
    {fltk3::Input} snap_input {
      label {pixel snap}
      user_data 3 user_data_type long
      callback grid_cb
      tooltip {Snap to grid within this many pixels.} xywh {106 45 50 25} type Int box THIN_DOWN_BOX align 8
      code0 {o->when(fltk3::WHEN_RELEASE|fltk3::WHEN_ENTER_KEY);}
    }
    {fltk3::CheckButton} guides_toggle {
      label {Show Guides}
      user_data 4 user_data_type long
      callback guides_cb
      tooltip {Show distance and alignment guides in overlay} xywh {106 80 110 25} down_box DOWN_BOX
    }
    {fltk3::Button} {} {
      label Close
      callback {grid_window->hide();}
      tooltip {Close this dialog.} xywh {215 210 60 25}
    }
    {fltk3::Box} {} {
      label {Grid:}
      xywh {26 10 70 25} labelfont 1 align 24
    }
    {fltk3::Box} {} {
      label {Widget Size:}
      xywh {-1 115 97 25} labelfont 1 align 24
    }
    {fltk3::Group} {} {open
      xywh {105 115 170 75}
    } {
      {fltk3::RoundButton} {def_widget_size[0]} {
        user_data 8 user_data_type long
        callback default_widget_size_cb
        xywh {105 115 70 25} type Radio down_box ROUND_DOWN_BOX
      }
      {fltk3::Box} {} {
        label tiny
        xywh {120 115 50 25} labelsize 8 align 20
      }
      {fltk3::RoundButton} {def_widget_size[1]} {
        user_data 11 user_data_type long
        callback default_widget_size_cb
        xywh {180 115 70 25} type Radio down_box ROUND_DOWN_BOX
      }
      {fltk3::Box} {} {
        label small
        xywh {195 115 50 25} labelsize 11 align 20
      }
      {fltk3::RoundButton} {def_widget_size[2]} {
        user_data 14 user_data_type long
        callback default_widget_size_cb
        xywh {105 140 70 25} type Radio down_box ROUND_DOWN_BOX
      }
      {fltk3::Box} {} {
        label normal
        xywh {120 140 50 25} align 20
      }
      {fltk3::RoundButton} {def_widget_size[3]} {
        user_data 18 user_data_type long
        callback default_widget_size_cb
        xywh {180 140 90 25} type Radio down_box ROUND_DOWN_BOX
      }
      {fltk3::Box} {} {
        label medium
        xywh {195 140 68 25} labelsize 18 align 20
      }
      {fltk3::RoundButton} {def_widget_size[4]} {
        user_data 24 user_data_type long
        callback default_widget_size_cb
        xywh {105 165 75 25} type Radio down_box ROUND_DOWN_BOX
      }
      {fltk3::Box} {} {
        label large
        xywh {120 165 64 25} labelsize 24 align 20
      }
      {fltk3::RoundButton} {def_widget_size[5]} {
        user_data 32 user_data_type long
        callback default_widget_size_cb
        xywh {180 165 95 25} type Radio down_box ROUND_DOWN_BOX
      }
      {fltk3::Box} {} {
        label huge
        xywh {195 165 76 25} labelsize 32 align 20
      }
    }
  }
} 

decl {int opt[10][2];} {
  comment {Copy of all options in user and system mode} private local
} 

Function {refreshUI()} {
  comment {Update the UI using the values in the opt array} private return_type void
} {
  code {int mode = wUserOrSystem->value();
wVisibleFocus->value(opt[fltk3::OPTION_VISIBLE_FOCUS][mode]);
wArrowFocus->value(opt[fltk3::OPTION_ARROW_FOCUS][mode]);
wShowTooltips->value(opt[fltk3::OPTION_SHOW_TOOLTIPS][mode]);
wDNDText->value(opt[fltk3::OPTION_DND_TEXT][mode]);} {}
} 

Function {readPrefs()} {
  comment {read all preferences and refresh the GUI} open private return_type void
} {
  code {// read all preferences and refresh the GUI
{
  fltk3::Preferences prefs(fltk3::Preferences::SYSTEM, "fltk.org", "fltk");
  fltk3::Preferences opt_prefs(prefs, "options");
  opt_prefs.get("ArrowFocus", opt[fltk3::OPTION_ARROW_FOCUS][1], 2);
  opt_prefs.get("VisibleFocus", opt[fltk3::OPTION_VISIBLE_FOCUS][1], 2);
  opt_prefs.get("DNDText", opt[fltk3::OPTION_DND_TEXT][1], 2);
  opt_prefs.get("ShowTooltips", opt[fltk3::OPTION_SHOW_TOOLTIPS][1], 2);
}
{
  fltk3::Preferences prefs(fltk3::Preferences::USER, "fltk.org", "fltk");
  fltk3::Preferences opt_prefs(prefs, "options");
  opt_prefs.get("ArrowFocus", opt[fltk3::OPTION_ARROW_FOCUS][0], 2);
  opt_prefs.get("VisibleFocus", opt[fltk3::OPTION_VISIBLE_FOCUS][0], 2);
  opt_prefs.get("DNDText", opt[fltk3::OPTION_DND_TEXT][0], 2);
  opt_prefs.get("ShowTooltips", opt[fltk3::OPTION_SHOW_TOOLTIPS][0], 2);
}
refreshUI();} {selected
  }
} 

Function {writePrefs()} {
  comment {write all preferences using the array} private return_type void
} {
  code {// write all preferences using the array
{
  fltk3::Preferences prefs(fltk3::Preferences::SYSTEM, "fltk.org", "fltk");
  fltk3::Preferences opt_prefs(prefs, "options");
  if (opt[fltk3::OPTION_ARROW_FOCUS][1]==2) opt_prefs.deleteEntry("ArrowFocus");
  else opt_prefs.set("ArrowFocus", opt[fltk3::OPTION_ARROW_FOCUS][1]);
  if (opt[fltk3::OPTION_VISIBLE_FOCUS][1]==2) opt_prefs.deleteEntry("VisibleFocus");
  else opt_prefs.set("VisibleFocus", opt[fltk3::OPTION_VISIBLE_FOCUS][1]);
  if (opt[fltk3::OPTION_DND_TEXT][1]==2) opt_prefs.deleteEntry("DNDText");
  else opt_prefs.set("DNDText", opt[fltk3::OPTION_DND_TEXT][1]);
  if (opt[fltk3::OPTION_SHOW_TOOLTIPS][1]==2) opt_prefs.deleteEntry("ShowTooltips");
  else opt_prefs.set("ShowTooltips", opt[fltk3::OPTION_SHOW_TOOLTIPS][1]);
}
{
  fltk3::Preferences prefs(fltk3::Preferences::USER, "fltk.org", "fltk");
  fltk3::Preferences opt_prefs(prefs, "options");
  if (opt[fltk3::OPTION_ARROW_FOCUS][0]==2) opt_prefs.deleteEntry("ArrowFocus");
  else opt_prefs.set("ArrowFocus", opt[fltk3::OPTION_ARROW_FOCUS][0]);
  if (opt[fltk3::OPTION_VISIBLE_FOCUS][0]==2) opt_prefs.deleteEntry("VisibleFocus");
  else opt_prefs.set("VisibleFocus", opt[fltk3::OPTION_VISIBLE_FOCUS][0]);
  if (opt[fltk3::OPTION_DND_TEXT][0]==2) opt_prefs.deleteEntry("DNDText");
  else opt_prefs.set("DNDText", opt[fltk3::OPTION_DND_TEXT][0]);
  if (opt[fltk3::OPTION_SHOW_TOOLTIPS][0]==2) opt_prefs.deleteEntry("ShowTooltips");
  else opt_prefs.set("ShowTooltips", opt[fltk3::OPTION_SHOW_TOOLTIPS][0]);
}} {}
} 

Function {show_global_settings_window()} {return_type void
} {
  code {if (!global_settings_window)
  make_global_settings_window();
readPrefs();
refreshUI();
fltk3::message(
	"WARNING!\\n\\n"
	"The following dialog changes the user interface behavior\\n"
	"of ALL FLTK applications, for the current user, or for \\n"
	"ALL users on this machine.\\n\\n"
	"Please choose these settings carefully, or reset\\n"
	"user and system settings to \\"default\\".");
global_settings_window->show();} {}
} 

Function {make_global_settings_window()} {} {
  {fltk3::Window} global_settings_window {
    label {FLTK Preferences} open
    xywh {445 753 403 317} type Double color 50 visible
  } {
    {fltk3::Group} {} {
      label {Keyboard Focus Options} open
      xywh {10 10 380 100} box DOWN_BOX labelfont 2 align 21
    } {
      {fltk3::Choice} wVisibleFocus {
        label {Visible Keyboard Focus:}
        callback {int mode = wUserOrSystem->value();
opt[fltk3::OPTION_VISIBLE_FOCUS][mode] = wVisibleFocus->value();} open
        tooltip {OPTION_VISIBLE_FOCUS

If visible focus is switched on, FLTK will draw a dotted rectangle inside the widget that will receive the next keystroke. If switched off, no such indicator will be drawn and keyboard navigation is disabled.

Default is on.} xywh {245 40 100 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label off
          user_data 0 user_data_type long
          xywh {10 10 31 20}
        }
        MenuItem {} {
          label on
          user_data 1 user_data_type long
          xywh {10 10 31 20} divider
        }
        MenuItem {} {
          label default
          user_data 2 user_data_type long
          xywh {10 10 31 20}
        }
      }
      {fltk3::Choice} wArrowFocus {
        label {Arrow Keys move Focus:}
        callback {int mode = wUserOrSystem->value();
opt[fltk3::OPTION_ARROW_FOCUS][mode] = wArrowFocus->value();} open
        tooltip {OPTION_ARROW_FOCUS

When switched on, moving the text cursor beyond the start or end of the text in a text widget will change focus to the next widget. When switched off, the cursor will stop at the end of the text. Pressing Tab or Ctrl-Tab will advance the keyboard focus. Switch this on, if you want the old behavior of FLTK 1.1.

Default is off.} xywh {245 75 100 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label off
          user_data 0 user_data_type long
          xywh {0 0 31 20}
        }
        MenuItem {} {
          label on
          user_data 1 user_data_type long
          xywh {0 0 31 20} divider
        }
        MenuItem {} {
          label default
          user_data 2 user_data_type long
          xywh {0 0 31 20}
        }
      }
    }
    {fltk3::Group} {} {
      label {Tooltip Options} open
      xywh {10 120 380 65} box DOWN_BOX labelfont 2 align 21
    } {
      {fltk3::Choice} wShowTooltips {
        label {Show Tooltips:}
        callback {int mode = wUserOrSystem->value();
opt[fltk3::OPTION_SHOW_TOOLTIPS][mode] = wShowTooltips->value();} open
        tooltip {OPTION_SHOW_TOOLTIPS

If tooltips are enabled, hovering the mouse over a widget with a tooltip text will open a little tooltip window until the mouse leaves the widget. If disabled, no tooltip is shown.

Default is on.} xywh {245 150 100 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label off
          user_data 0 user_data_type long
          xywh {10 10 31 20}
        }
        MenuItem {} {
          label on
          user_data 1 user_data_type long
          xywh {10 10 31 20} divider
        }
        MenuItem {} {
          label default
          user_data 2 user_data_type long
          xywh {10 10 31 20}
        }
      }
    }
    {fltk3::Group} {} {
      label {Drag And Drop Options} open
      xywh {10 194 380 66} box DOWN_BOX labelfont 2 align 21
    } {
      {fltk3::Choice} wDNDText {
        label {Allow dragging Text:}
        callback {int mode = wUserOrSystem->value();
opt[fltk3::OPTION_DND_TEXT][mode] = wDNDText->value();} open
        tooltip {OPTION_DND_TEXT

If text drag-and-drop is enabled, the user can select and drag text from any text widget. If disabled, no dragging is possible, however dropping text from other applications still works.

Default is on.} xywh {245 225 100 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label off
          user_data 0 user_data_type long
          xywh {30 30 31 20}
        }
        MenuItem {} {
          label on
          user_data 1 user_data_type long
          xywh {30 30 31 20} divider
        }
        MenuItem {} {
          label default
          user_data 2 user_data_type long
          xywh {30 30 31 20}
        }
      }
    }
    {fltk3::Choice} wUserOrSystem {
      callback {refreshUI();} open
      tooltip {Change settings for the current user, or default values for all users of this computer. Individual users can override system options, if they set their options to specific values (not 'default').} xywh {14 275 141 25} down_box BORDER_BOX
    } {
      MenuItem {} {
        label {User Settings}
        user_data 0 user_data_type long
        xywh {0 0 31 20}
      }
      MenuItem {} {
        label {System Settings}
        user_data 1 user_data_type long
        xywh {0 0 31 20}
      }
    }
    {fltk3::Button} {} {
      label Cancel
      callback {global_settings_window->hide();}
      xywh {230 275 75 25}
    }
    {fltk3::Button} {} {
      label OK
      callback {writePrefs();
global_settings_window->hide();}
      xywh {315 275 75 25}
    }
  }
  code {readPrefs();
  fltk3::option(fltk3::OPTION_SHOW_TOOLTIPS,1); // make sure tooltips are on !} {}
} 

comment {
//
// End of "$Id$".
//} {in_source in_header
} 
