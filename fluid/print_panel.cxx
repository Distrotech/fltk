//
// "$Id$"
//
// FLUID print panel for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2010 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems on the following page:
//
//     http://www.fltk.org/str.php
//

// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "print_panel.h"
#include <stdio.h>
#include <stdlib.h>
#include "../src/flstring.h"
#include <fltk3/Preferences.h>
extern Fl_Preferences fluid_prefs;

fltk3::DoubleWindow *print_panel=(fltk3::DoubleWindow *)0;

fltk3::Group *print_panel_controls=(fltk3::Group *)0;

fltk3::Choice *print_choice=(fltk3::Choice *)0;

static void cb_print_choice(fltk3::Choice*, void*) {
  print_update_status();
}

fltk3::Button *print_properties=(fltk3::Button *)0;

static void cb_print_properties(fltk3::Button*, void*) {
  print_properties_panel->show();
}

fltk3::Box *print_status=(fltk3::Box *)0;

fltk3::RoundButton *print_all=(fltk3::RoundButton *)0;

static void cb_print_all(fltk3::RoundButton*, void*) {
  print_from->deactivate();
print_to->deactivate();
}

fltk3::RoundButton *print_pages=(fltk3::RoundButton *)0;

static void cb_print_pages(fltk3::RoundButton*, void*) {
  print_from->activate();
print_to->activate();
}

fltk3::RoundButton *print_selection=(fltk3::RoundButton *)0;

static void cb_print_selection(fltk3::RoundButton*, void*) {
  print_from->deactivate();
print_to->deactivate();
}

Fl_Int_Input *print_from=(Fl_Int_Input *)0;

Fl_Int_Input *print_to=(Fl_Int_Input *)0;

Fl_Spinner *print_copies=(Fl_Spinner *)0;

static void cb_print_copies(Fl_Spinner*, void*) {
  if (print_copies->value() == 1) {
  print_collate_button->deactivate();
  print_collate_group[0]->deactivate();
  print_collate_group[1]->deactivate();
} else {
  print_collate_button->activate();
  print_collate_group[0]->activate();
  print_collate_group[1]->activate();
};
}

fltk3::CheckButton *print_collate_button=(fltk3::CheckButton *)0;

static void cb_print_collate_button(fltk3::CheckButton*, void*) {
  int i = print_collate_button->value() != 0;
print_collate_group[i]->show();
print_collate_group[1 - i]->hide();
}

fltk3::Group *print_collate_group[2]={(fltk3::Group *)0};

static void cb_Cancel(fltk3::Button*, void*) {
  print_panel->hide();
}

Fl_Progress *print_progress=(Fl_Progress *)0;

fltk3::DoubleWindow *print_properties_panel=(fltk3::DoubleWindow *)0;

static void cb_print_properties_panel(fltk3::DoubleWindow*, void*) {
  print_properties_panel->hide();
print_update_status();
}

fltk3::Choice *print_page_size=(fltk3::Choice *)0;

fltk3::MenuItem menu_print_page_size[] = {
 {"Letter", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 14, 0},
 {"A4", 0,  0, 0, 0, fltk3::NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

#include <fltk3/Pixmap.h>
static const char *idata_print_color[] = {
"24 24 17 1",
" \tc None",
".\tc #FFFF00",
"+\tc #C8FF00",
"@\tc #00FF00",
"#\tc #FFC800",
"$\tc #FF0000",
"%\tc #00FFFF",
"&\tc #000000",
"*\tc #FF00FF",
"=\tc #00FFC8",
"-\tc #FF00C8",
";\tc #00C800",
">\tc #C80000",
",\tc #0000C8",
"\'\tc #0000FF",
")\tc #00C8FF",
"!\tc #C800FF",
"         ......         ",
"       ..........       ",
"      ............      ",
"     ..............     ",
"     ..............     ",
"    ................    ",
"    ................    ",
"    ................    ",
"    +@@@@@@+#$$$$$$#    ",
"   %@@@@@@@&&$$$$$$$*   ",
"  %%@@@@@@&&&&$$$$$$**  ",
" %%%=@@@@&&&&&&$$$$-*** ",
" %%%%@@@;&&&&&&>$$$**** ",
"%%%%%%@@&&&&&&&&$$******",
"%%%%%%%@&&&&&&&&$*******",
"%%%%%%%%,&&&&&&,********",
"%%%%%%%%\'\'\'\'\'\'\'\'********",
"%%%%%%%%\'\'\'\'\'\'\'\'********",
"%%%%%%%%\'\'\'\'\'\'\'\'********",
" %%%%%%%)\'\'\'\'\'\'!******* ",
" %%%%%%%%\'\'\'\'\'\'******** ",
"  %%%%%%%%\'\'\'\'********  ",
"   %%%%%%%%\'\'********   ",
"     %%%%%%  ******     "
};
static Fl_Pixmap image_print_color(idata_print_color);

static const char *idata_print_gray[] = {
"24 24 17 1",
" \tc None",
".\tc #E3E3E3",
"+\tc #D2D2D2",
"@\tc #969696",
"#\tc #C2C2C2",
"$\tc #4C4C4C",
"%\tc #B2B2B2",
"&\tc #000000",
"*\tc #696969",
"=\tc #ACACAC",
"-\tc #626262",
";\tc #767676",
">\tc #3C3C3C",
",\tc #161616",
"\'\tc #1C1C1C",
")\tc #929292",
"!\tc #585858",
"         ......         ",
"       ..........       ",
"      ............      ",
"     ..............     ",
"     ..............     ",
"    ................    ",
"    ................    ",
"    ................    ",
"    +@@@@@@+#$$$$$$#    ",
"   %@@@@@@@&&$$$$$$$*   ",
"  %%@@@@@@&&&&$$$$$$**  ",
" %%%=@@@@&&&&&&$$$$-*** ",
" %%%%@@@;&&&&&&>$$$**** ",
"%%%%%%@@&&&&&&&&$$******",
"%%%%%%%@&&&&&&&&$*******",
"%%%%%%%%,&&&&&&,********",
"%%%%%%%%\'\'\'\'\'\'\'\'********",
"%%%%%%%%\'\'\'\'\'\'\'\'********",
"%%%%%%%%\'\'\'\'\'\'\'\'********",
" %%%%%%%)\'\'\'\'\'\'!******* ",
" %%%%%%%%\'\'\'\'\'\'******** ",
"  %%%%%%%%\'\'\'\'********  ",
"   %%%%%%%%\'\'********   ",
"     %%%%%%  ******     "
};
static Fl_Pixmap image_print_gray(idata_print_gray);

fltk3::Button *print_output_mode[4]={(fltk3::Button *)0};

static void cb_Save(fltk3::ReturnButton*, void*) {
  print_properties_panel->hide();

char name[1024];
int val;
const char *printer = (const char *)print_choice->menu()[print_choice->value()].user_data();

snprintf(name, sizeof(name), "%s/page_size", printer);
fluid_prefs.set(name, print_page_size->value());

snprintf(name, sizeof(name), "%s/output_mode", printer);
for (val = 0; val < 4; val ++) {
  if (print_output_mode[val]->value()) break;
}
fluid_prefs.set(name, val);
}

static void cb_Cancel1(fltk3::Button*, void*) {
  print_properties_panel->hide();
print_update_status();
}

static void cb_Use(fltk3::Button*, void*) {
  print_properties_panel->hide();
}

fltk3::DoubleWindow* make_print_panel() {
  { print_panel = new fltk3::DoubleWindow(465, 235, "Print");
    { print_panel_controls = new fltk3::Group(10, 10, 447, 216);
      { print_choice = new fltk3::Choice(113, 10, 181, 25, "Printer:");
        print_choice->down_box(fltk3::BORDER_BOX);
        print_choice->labelfont(1);
        print_choice->callback((fltk3::Callback*)cb_print_choice);
        print_choice->when(fltk3::WHEN_CHANGED);
      } // fltk3::Choice* print_choice
      { print_properties = new fltk3::Button(294, 10, 105, 25, "Properties...");
        print_properties->callback((fltk3::Callback*)cb_print_properties);
      } // fltk3::Button* print_properties
      { print_status = new fltk3::Box(111, 41, 288, 17, "printer/job status");
        print_status->align(fltk3::Align(68|fltk3::ALIGN_INSIDE));
      } // fltk3::Box* print_status
      { fltk3::Group* o = new fltk3::Group(10, 86, 227, 105, "Print Range");
        o->box(fltk3::THIN_DOWN_BOX);
        o->labelfont(1);
        o->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
        { print_all = new fltk3::RoundButton(20, 96, 38, 25, "All");
          print_all->type(102);
          print_all->down_box(fltk3::ROUND_DOWN_BOX);
          print_all->value(1);
          print_all->callback((fltk3::Callback*)cb_print_all);
        } // fltk3::RoundButton* print_all
        { print_pages = new fltk3::RoundButton(20, 126, 64, 25, "Pages");
          print_pages->type(102);
          print_pages->down_box(fltk3::ROUND_DOWN_BOX);
          print_pages->callback((fltk3::Callback*)cb_print_pages);
        } // fltk3::RoundButton* print_pages
        { print_selection = new fltk3::RoundButton(20, 156, 82, 25, "Selection");
          print_selection->type(102);
          print_selection->down_box(fltk3::ROUND_DOWN_BOX);
          print_selection->callback((fltk3::Callback*)cb_print_selection);
        } // fltk3::RoundButton* print_selection
        { print_from = new Fl_Int_Input(136, 126, 28, 25, "From:");
          print_from->type(2);
          print_from->textfont(4);
          print_from->deactivate();
        } // Fl_Int_Input* print_from
        { print_to = new Fl_Int_Input(199, 126, 28, 25, "To:");
          print_to->type(2);
          print_to->textfont(4);
          print_to->deactivate();
        } // Fl_Int_Input* print_to
        o->end();
      } // fltk3::Group* o
      { fltk3::Group* o = new fltk3::Group(247, 86, 210, 105, "Copies");
        o->box(fltk3::THIN_DOWN_BOX);
        o->labelfont(1);
        o->align(fltk3::Align(fltk3::ALIGN_TOP_LEFT));
        { print_copies = new Fl_Spinner(321, 96, 45, 25, "# Copies:");
          print_copies->callback((fltk3::Callback*)cb_print_copies);
          print_copies->when(fltk3::WHEN_CHANGED);
        } // Fl_Spinner* print_copies
        { print_collate_button = new fltk3::CheckButton(376, 96, 64, 25, "Collate");
          print_collate_button->down_box(fltk3::DOWN_BOX);
          print_collate_button->callback((fltk3::Callback*)cb_print_collate_button);
          print_collate_button->when(fltk3::WHEN_CHANGED);
          print_collate_button->deactivate();
        } // fltk3::CheckButton* print_collate_button
        { print_collate_group[0] = new fltk3::Group(257, 131, 191, 50);
          print_collate_group[0]->deactivate();
          { fltk3::Box* o = new fltk3::Box(287, 141, 30, 40, "1");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(272, 136, 30, 40, "1");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(257, 131, 30, 40, "1");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(352, 141, 30, 40, "2");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(337, 136, 30, 40, "2");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(322, 131, 30, 40, "2");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(417, 141, 30, 40, "3");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(402, 136, 30, 40, "3");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(387, 131, 30, 40, "3");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
            o->deactivate();
          } // fltk3::Box* o
          print_collate_group[0]->end();
        } // fltk3::Group* print_collate_group[0]
        { print_collate_group[1] = new fltk3::Group(257, 131, 191, 50);
          print_collate_group[1]->hide();
          print_collate_group[1]->deactivate();
          { fltk3::Box* o = new fltk3::Box(287, 141, 30, 40, "3");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(272, 136, 30, 40, "2");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(257, 131, 30, 40, "1");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(352, 141, 30, 40, "3");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(337, 136, 30, 40, "2");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(322, 131, 30, 40, "1");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(417, 141, 30, 40, "3");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(402, 136, 30, 40, "2");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          { fltk3::Box* o = new fltk3::Box(387, 131, 30, 40, "1");
            o->box(fltk3::BORDER_BOX);
            o->color(fltk3::BACKGROUND2_COLOR);
            o->labelsize(11);
            o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_RIGHT|fltk3::ALIGN_INSIDE));
          } // fltk3::Box* o
          print_collate_group[1]->end();
        } // fltk3::Group* print_collate_group[1]
        o->end();
      } // fltk3::Group* o
      { fltk3::ReturnButton* o = new fltk3::ReturnButton(309, 201, 70, 25, "Print");
        o->callback((fltk3::Callback*)print_cb);
      } // fltk3::ReturnButton* o
      { fltk3::Button* o = new fltk3::Button(389, 201, 68, 25, "Cancel");
        o->callback((fltk3::Callback*)cb_Cancel);
      } // fltk3::Button* o
      print_panel_controls->end();
    } // fltk3::Group* print_panel_controls
    { print_progress = new Fl_Progress(10, 203, 289, 21);
      print_progress->selection_color((fltk3::Color)4);
      print_progress->hide();
    } // Fl_Progress* print_progress
    print_panel->set_modal();
    print_panel->end();
  } // fltk3::DoubleWindow* print_panel
  { print_properties_panel = new fltk3::DoubleWindow(290, 130, "Printer Properties");
    print_properties_panel->callback((fltk3::Callback*)cb_print_properties_panel);
    { print_page_size = new fltk3::Choice(110, 10, 80, 25, "Page Size:");
      print_page_size->down_box(fltk3::BORDER_BOX);
      print_page_size->labelfont(1);
      print_page_size->menu(menu_print_page_size);
    } // fltk3::Choice* print_page_size
    { fltk3::Group* o = new fltk3::Group(110, 45, 170, 40, "Output Mode:");
      o->labelfont(1);
      o->align(fltk3::Align(fltk3::ALIGN_LEFT));
      { print_output_mode[0] = new fltk3::Button(110, 45, 30, 40);
        print_output_mode[0]->type(102);
        print_output_mode[0]->box(fltk3::BORDER_BOX);
        print_output_mode[0]->down_box(fltk3::BORDER_BOX);
        print_output_mode[0]->value(1);
        print_output_mode[0]->color(fltk3::BACKGROUND2_COLOR);
        print_output_mode[0]->selection_color(fltk3::FOREGROUND_COLOR);
        print_output_mode[0]->image(image_print_color);
      } // fltk3::Button* print_output_mode[0]
      { print_output_mode[1] = new fltk3::Button(150, 50, 40, 30);
        print_output_mode[1]->type(102);
        print_output_mode[1]->box(fltk3::BORDER_BOX);
        print_output_mode[1]->down_box(fltk3::BORDER_BOX);
        print_output_mode[1]->color(fltk3::BACKGROUND2_COLOR);
        print_output_mode[1]->selection_color(fltk3::FOREGROUND_COLOR);
        print_output_mode[1]->image(image_print_color);
      } // fltk3::Button* print_output_mode[1]
      { print_output_mode[2] = new fltk3::Button(200, 45, 30, 40);
        print_output_mode[2]->type(102);
        print_output_mode[2]->box(fltk3::BORDER_BOX);
        print_output_mode[2]->down_box(fltk3::BORDER_BOX);
        print_output_mode[2]->color(fltk3::BACKGROUND2_COLOR);
        print_output_mode[2]->selection_color(fltk3::FOREGROUND_COLOR);
        print_output_mode[2]->image(image_print_gray);
      } // fltk3::Button* print_output_mode[2]
      { print_output_mode[3] = new fltk3::Button(240, 50, 40, 30);
        print_output_mode[3]->type(102);
        print_output_mode[3]->box(fltk3::BORDER_BOX);
        print_output_mode[3]->down_box(fltk3::BORDER_BOX);
        print_output_mode[3]->color(fltk3::BACKGROUND2_COLOR);
        print_output_mode[3]->selection_color(fltk3::FOREGROUND_COLOR);
        print_output_mode[3]->image(image_print_gray);
      } // fltk3::Button* print_output_mode[3]
      o->end();
    } // fltk3::Group* o
    { fltk3::ReturnButton* o = new fltk3::ReturnButton(123, 95, 79, 25, "Save");
      o->callback((fltk3::Callback*)cb_Save);
    } // fltk3::ReturnButton* o
    { fltk3::Button* o = new fltk3::Button(212, 95, 68, 25, "Cancel");
      o->callback((fltk3::Callback*)cb_Cancel1);
    } // fltk3::Button* o
    { fltk3::Button* o = new fltk3::Button(60, 95, 53, 25, "Use");
      o->callback((fltk3::Callback*)cb_Use);
    } // fltk3::Button* o
    print_properties_panel->set_modal();
    print_properties_panel->end();
  } // fltk3::DoubleWindow* print_properties_panel
  return print_properties_panel;
}
void print_cb(fltk3::ReturnButton *, void *); 

void print_load() {
  FILE *lpstat;
  char line[1024], name[1024], *nptr, qname[2048], *qptr, defname[1024];
  int i;
  
  if (print_choice->size() > 1) {
    for (i = 1; print_choice->text(i); i ++) {
      free(print_choice->menu()[i].user_data());
    }
  }
  
  print_choice->clear();
  print_choice->add("Print To File", 0, 0, 0, FL_MENU_DIVIDER);
  print_choice->value(0);
  
  defname[0] = '\0';
  
  if ((lpstat = popen("LC_MESSAGES=C LANG=C lpstat -p -d", "r")) != NULL) {
    while (fgets(line, sizeof(line), lpstat)) {
      if (!strncmp(line, "printer ", 8) &&
          sscanf(line + 8, "%s", name) == 1) {
        for (nptr = name, qptr = qname; *nptr; *qptr++ = *nptr++) {
          if (*nptr == '/') *qptr++ = '\\';
        }
        *qptr = '\0';
  
        print_choice->add(qname, 0, 0, (void *)strdup(name), 0);
      } else if (!strncmp(line, "system default destination: ", 28)) {
        if (sscanf(line + 28, "%s", defname) != 1) defname[0] = '\0';
      }
    }
    pclose(lpstat);
  }
  
  if (defname[0]) {
    for (i = 1; print_choice->text(i); i ++) {
      if (!strcmp((char *)print_choice->menu()[i].user_data(), defname)) {
        print_choice->value(i);
        break;
      }
    }
  } else if (print_choice->size() > 2) print_choice->value(1);
  
  
  print_update_status();
}

void print_update_status() {
  FILE *lpstat;
  char command[1024];
  static char status[1024];
  const char *printer = (const char *)print_choice->menu()[print_choice->value()].user_data();
  
  if (print_choice->value()) {
    snprintf(command, sizeof(command), "lpstat -p '%s'", printer);
    if ((lpstat = popen(command, "r")) != NULL) {
      if (fgets(status, sizeof(status), lpstat)==0) { /* ignore */ }
      pclose(lpstat);
    } else strcpy(status, "printer status unavailable");
  } else status[0] = '\0';
  
  print_status->label(status);
  
  char name[1024];
  int val;
  
  snprintf(name, sizeof(name), "%s/page_size", printer);
  fluid_prefs.get(name, val, 0);
  print_page_size->value(val);
  
  snprintf(name, sizeof(name), "%s/output_mode", printer);
  fluid_prefs.get(name, val, 0);
  print_output_mode[val]->setonly();
}

//
// End of "$Id$".
//
