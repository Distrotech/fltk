//
// "$Id$"
//
// Workspace Panels for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2011 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems to "fltk-bugs@fltk.org".
//

// generated by Fast Light User Interface Designer (fluid) version 3.0000

#include "workspace_panel.h"

void Fl_Environment_Choice::cb_pMenuAll_i(fltk3::Menu_*, void* v) {
  // this is what we want to set or clear, pEnv is what we currently have
unsigned int e = (intptr_t)v;
// find a good logic for settting, clearing, and partial values
if ( (pEnv&e)==e ) {
  // if all bits in the menu are set, toggle the bits off
  pEnv = pEnv ^ e;
} else {
  // some bits don't match, so switch all bits on
  pEnv = pEnv | e;
}

update_all();

if (callback())
  do_callback();
}
void Fl_Environment_Choice::cb_pMenuAll(fltk3::Menu_* o, void* v) {
  ((Fl_Environment_Choice*)(o->parent()))->cb_pMenuAll_i(o,v);
}

fltk3::MenuItem Fl_Environment_Choice::menu_pEnvMenu[] = {
 {"All Environments", 0,  (fltk3::Callback*)Fl_Environment_Choice::cb_pMenuAll, (void*)(FL_ENV_ALL), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Command Line", 0,  0, 0, 64, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"All", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_ALL_SHELL), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Makefile (make, gmake)", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_MAKE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"CMake File (cmake)", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_CMAKE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"MS Windows", 0,  0, 0, 64, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"All", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_ALL_VC), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"VisualC 6", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_VC6), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"VisualC 2008", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_VC2008), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"VisualC 2010", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_VC2010), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Apple OS X", 0,  0, 0, 64, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"All", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_ALL_XC), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Xcode 3", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_XC3), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Xcode 4", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(FL_ENV_XC4), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
fltk3::MenuItem* Fl_Environment_Choice::pMenuAll = Fl_Environment_Choice::menu_pEnvMenu + 0;
Fl_Environment_Choice::Fl_Environment_Choice(int X, int Y, int W, int H, const char *L)
  : fltk3::Group(0, 0, W, H, L) {
this->box(fltk3::FLAT_BOX);
this->color(fltk3::BACKGROUND_COLOR);
this->selection_color(fltk3::BACKGROUND_COLOR);
this->labeltype(fltk3::NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(fltk3::FOREGROUND_COLOR);
this->align(fltk3::Align(fltk3::ALIGN_TOP));
this->when(fltk3::WHEN_RELEASE);
{ pEnvMenu = new fltk3::MenuButton(0, 0, 170, 25, "- unknown -");
  pEnvMenu->labelsize(9);
  pEnvMenu->align(fltk3::Align(192));
  pEnvMenu->menu(menu_pEnvMenu);
} // fltk3::MenuButton* pEnvMenu
pEnvMenu->copy(menu_pEnvMenu);
fltk3::MenuItem *mi = (fltk3::MenuItem*)pEnvMenu->menu();
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = new fltk3::MultiLabel;
    ml->labela = (char*)&menu_none_pixmap;
    ml->labelb = mi->text;
    ml->typea = fltk3::IMAGE_LABEL;
    ml->typeb = fltk3::NORMAL_LABEL;
    ml->label( mi );  
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}
position(X, Y);
end();
}

void Fl_Environment_Choice::update_all() {
  // now update all menus
  unsigned int e = pEnv;
  fltk3::MenuItem *mi = (fltk3::MenuItem*)pEnvMenu->menu();
  int level = 0;
  while (mi->label()) {
    unsigned int me = (intptr_t)mi->user_data();
    if (me) {
      fltk3::MultiLabel *ml = (fltk3::MultiLabel*)mi->label();
      if ( (me&e)==0 ) {
        ml->labela = (char*)&menu_none_pixmap;
      } else if ( (me&e)==me ) {
        ml->labela = (char*)&menu_all_pixmap;
      } else {
        ml->labela = (char*)&menu_multi_pixmap;
      }
    }
    if (mi->flags&fltk3::SUBMENU) level++;
    mi++;
    while (level && !mi->label()) {
      level--; 
      mi++;
    }
  }
  
  // update the text
  if (pEnv==FL_ENV_ALL) {
    pEnvMenu->label("- all -");
  } else if (pEnv==FL_ENV_NONE) {
    pEnvMenu->label("- none -");
  } else {
    char buf[1024]; buf[0] = 0;
    if (pEnv&FL_ENV_MAKE) strcat(buf, "make, ");
    if (pEnv&FL_ENV_CMAKE) strcat(buf, "cmake, ");
    if (pEnv&FL_ENV_VC6) strcat(buf, "VC6, ");
    if (pEnv&FL_ENV_VC2008) strcat(buf, "VC2008, ");
    if (pEnv&FL_ENV_VC2010) strcat(buf, "VC2010, ");
    if (pEnv&FL_ENV_XC3) strcat(buf, "Xcode3, ");
    if (pEnv&FL_ENV_XC4) strcat(buf, "Xcode4, ");
    int n = strlen(buf);
    if (n>2) buf[n-2] = 0;
    pEnvMenu->copy_label(buf);
  }
}

/**
   Set the environment flags
*/
void Fl_Environment_Choice::value(unsigned int v) {
  pEnv = v;
  update_all();
}

/**
   Get the environment flags
*/
unsigned int Fl_Environment_Choice::value() {
  return pEnv;
}

fltk3::DoubleWindow *workspace_panel=(fltk3::DoubleWindow *)0;

fltk3::Input *wName=(fltk3::Input *)0;

Fl_Environment_Choice *pEnv=(Fl_Environment_Choice *)0;

static void cb_OK(fltk3::Button*, void*) {
  if (wks_name) free(wks_name);
wks_name = strdup(wName->value());
wks_env = pEnv->value();
workspace_panel->hide();
}

fltk3::DoubleWindow* show_workspace_panel() {
  if (!workspace_panel) {
    { workspace_panel = new fltk3::DoubleWindow(274, 173, "Workspace Properties");
      { wName = new fltk3::Input(85, 15, 170, 25, "Name:");
        wName->tooltip("name of the target - this will be used in the IDEs and as a general reference\
.");
        wName->labelsize(12);
        wName->textsize(12);
      } // fltk3::Input* wName
      { fltk3::Box* o = new fltk3::Box(10, 50, 288, 2, "Create Build Enviroments for:");
        o->box(fltk3::THIN_DOWN_FRAME);
        o->labelsize(12);
        o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_LEFT));
      } // fltk3::Box* o
      { pEnv = new Fl_Environment_Choice(85, 71, 170, 40);
        pEnv->box(fltk3::FLAT_BOX);
        pEnv->color(fltk3::BACKGROUND_COLOR);
        pEnv->selection_color(fltk3::SELECTION_COLOR);
        pEnv->labeltype(fltk3::NORMAL_LABEL);
        pEnv->labelfont(0);
        pEnv->labelsize(14);
        pEnv->labelcolor(fltk3::FOREGROUND_COLOR);
        pEnv->align(fltk3::Align(fltk3::ALIGN_CENTER));
        pEnv->when(fltk3::WHEN_RELEASE_ALWAYS);
      } // Fl_Environment_Choice* pEnv
      { fltk3::Button* o = new fltk3::Button(160, 130, 95, 25, "OK");
        o->labelsize(12);
        o->callback((fltk3::Callback*)cb_OK);
      } // fltk3::Button* o
      workspace_panel->set_modal();
      workspace_panel->end();
    } // fltk3::DoubleWindow* workspace_panel
      }
      if (wks_name) 
        wName->value(wks_name);
      else
        wName->value("unnamed workspace");
      if (wks_env)  
        pEnv->value(wks_env);  
      else
        pEnv->value(FL_ENV_ALL);
      workspace_panel->show();
  return workspace_panel;
}
extern Fl_Panel *the_file_panel;

void file_panel_set_cb(fltk3::Widget*, void *v) {
  if (v == Fl_Panel::LOAD) {
    } else {
      fltk3::Widget*const* a = the_file_panel->array();
      for (int i=the_file_panel->children(); i--;) {
        fltk3::Widget* o = *a++;
        if (o->changed()) {
          o->do_callback();
          //if (haderror) return;
          o->clear_changed();
        }
      }
    }
}

static void cb_(fltk3::Input* o, void* v) {
  if (v == Fl_Panel::LOAD) {
    static char buf[1024];
    if (Fl_Panel::numselected != 1) {
      o->static_value("<Multiple Values>");
      o->deactivate();
      sprintf(buf, "File Properties (%d files)", Fl_Panel::numselected);
    } else {
      o->static_value(Fl_Panel::current_file()->filename());
      o->activate();
      sprintf(buf, "%s Properties", Fl_Panel::current_file()->name());
    }
    the_file_panel->label(buf);
  } else {
    if (Fl_Panel::numselected == 1) {
      Fl_Panel::current_file()->filename(o->value());
      if (o->changed()) set_modflag(1);
    }
  };
}

static void cb_Build(Fl_Environment_Choice* o, void* v) {
  if (v == Fl_Panel::LOAD) {
    o->value(Fl_Panel::current_file()->build_env());
  } else {
    int mod = 0;
    unsigned int e = o->value();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->build_env() != e) {
          ((Fl_File_Type*)t)->build_env(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  };
}

static void cb_List(Fl_Environment_Choice* o, void* v) {
  if (v == Fl_Panel::LOAD) {
    o->value(Fl_Panel::current_file()->list_env());
  } else {
    int mod = 0;
    unsigned int e = o->value();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->list_env() != e) {
          ((Fl_File_Type*)t)->list_env(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  };
}

static void cb_Unknown(fltk3::MenuButton* o, void* v) {
  if (v == Fl_Panel::LOAD) {
  } else {
    int mod = 0;
    const fltk3::MenuItem *mi = o->mvalue();
    int e = mi->argument();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->filetype() != e) {
          if (e==FL_FILE_EXPLICIT)
            ((Fl_File_Type*)t)->set_default_type();
          else
            ((Fl_File_Type*)t)->filetype(e|FL_FILE_EXPLICIT);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }
      char buf[64];
      unsigned int ft = Fl_Panel::current_file()->filetype();
      if (ft&FL_FILE_EXPLICIT) {
        strcpy(buf, "explicit - ");
      } else {
        strcpy(buf, "default - ");
      }
      ft = ft & 0x7fff;
      for (const fltk3::MenuItem *mi = o->menu(); ; mi++) {
        if (!mi->label()) {
          strcat(buf, "<unknown>");
          break;
        }
        if (mi->argument()==ft) {
          strcat(buf, mi->label());
          break;
        }
      }
      o->copy_label(buf);
}

fltk3::MenuItem menu_Unknown[] = {
 {"Default", 0,  0, (void*)(FL_FILE_EXPLICIT), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"C Source Code", 0,  0, (void*)(FL_FILE_C_SOURCE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"C Header", 0,  0, (void*)(FL_FILE_C_HEADER), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"C++ Source Code", 0,  0, (void*)(FL_FILE_CPP_SOURCE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"C++ Header", 0,  0, (void*)(FL_FILE_CPP_HEADER), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"ObjectiveC Source", 0,  0, (void*)(FL_FILE_OBJC_SOURCE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"ObjectiveC Header", 0,  0, (void*)(FL_FILE_OBJC_HEADER), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Text", 0,  0, (void*)(FL_FILE_TEXT), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Shell Script", 0,  0, (void*)(FL_FILE_TEXT_SCRIPT), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"OS X Framework", 0,  0, (void*)(FL_FILE_FRAMEWORK), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Fluid UI Design", 0,  0, (void*)(FL_FILE_FLUID_UI), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Unknown", 0,  0, (void*)(FL_FILE_UNKNOWN), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_Relative(fltk3::MenuButton* o, void* v) {
  if (v == Fl_Panel::LOAD) {
  /*...*/
  } else {
    int mod = 0;
    const fltk3::MenuItem *mi = o->mvalue();
    int e = mi->argument();
    for (Fl_Type *t = Fl_Type::first; t; t = t->next) {
      if (t->selected && t->is_file()) {
        if (((Fl_File_Type*)t)->location() != e) {
          ((Fl_File_Type*)t)->location(e);
          mod = 1;
        }
      }
    }
    if (mod) set_modflag(1);
  }
      // FIXME: we should show <multiple values> is required
    unsigned int fl = Fl_Panel::current_file()->location();
    for (const fltk3::MenuItem *mi = o->menu(); ; mi++) {
      if (!mi->label()) break;
      if (mi->argument()==fl) {
        o->label(mi->label());
        break;
      }
    };
}

fltk3::MenuItem menu_Relative[] = {
 {"Relative to Workspace", 0,  0, (void*)(FL_LOCATION_WORKSPACE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Absolute Path", 0,  0, (void*)(FL_LOCATION_ABSOLUTE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Relative to IDE", 0,  0, (void*)(FL_LOCATION_IDE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Relative to SDK", 0,  0, (void*)(FL_LOCATION_SDK), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_Close(fltk3::ReturnButton*, void* v) {
  if (v == Fl_Panel::LOAD) {
  } else {
    file_panel_set_cb(0, 0);
    the_file_panel->hide();
  };
}

Fl_Panel* make_file_panel() {
  Fl_Panel* w;
  { Fl_Panel* o = new Fl_Panel(0, 0, 291, 245, "File Properties");
    w = o;
    o->box(fltk3::FLAT_BOX);
    o->color(fltk3::BACKGROUND_COLOR);
    o->selection_color(fltk3::BACKGROUND_COLOR);
    o->labeltype(fltk3::NO_LABEL);
    o->labelfont(0);
    o->labelsize(11);
    o->labelcolor(fltk3::FOREGROUND_COLOR);
    o->align(fltk3::Align(fltk3::ALIGN_CLIP|fltk3::ALIGN_INSIDE));
    o->when(fltk3::WHEN_RELEASE);
    o->hotspot(o);
    { fltk3::Group* o = new fltk3::Group(75, 15, 309, 20, "File Name:");
      o->labelsize(12);
      o->callback((fltk3::Callback*)Fl_Panel::propagate_load);
      o->align(fltk3::Align(fltk3::ALIGN_LEFT));
      { fltk3::Input* o = new fltk3::Input(75, 15, 170, 20);
        o->tooltip("The label text for the widget.\nUse Ctrl-J for newlines.");
        o->labelsize(12);
        o->textsize(12);
        o->callback((fltk3::Callback*)cb_);
        o->when(fltk3::WHEN_CHANGED);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Input* o
      o->end();
    } // fltk3::Group* o
    { Fl_Environment_Choice* o = new Fl_Environment_Choice(75, 45, 170, 25, "Build in:");
      o->box(fltk3::FLAT_BOX);
      o->color(fltk3::BACKGROUND_COLOR);
      o->selection_color(fltk3::SELECTION_COLOR);
      o->labeltype(fltk3::NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(fltk3::FOREGROUND_COLOR);
      o->callback((fltk3::Callback*)cb_Build);
      o->align(fltk3::Align(fltk3::ALIGN_LEFT));
      o->when(fltk3::WHEN_RELEASE_ALWAYS);
    } // Fl_Environment_Choice* o
    { Fl_Environment_Choice* o = new Fl_Environment_Choice(75, 75, 170, 25, "List in:");
      o->box(fltk3::FLAT_BOX);
      o->color(fltk3::BACKGROUND_COLOR);
      o->selection_color(fltk3::SELECTION_COLOR);
      o->labeltype(fltk3::NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(fltk3::FOREGROUND_COLOR);
      o->callback((fltk3::Callback*)cb_List);
      o->align(fltk3::Align(fltk3::ALIGN_LEFT));
      o->when(fltk3::WHEN_RELEASE_ALWAYS);
    } // Fl_Environment_Choice* o
    { fltk3::Group* o = new fltk3::Group(75, 105, 170, 20, "File Type:");
      o->labelsize(12);
      o->callback((fltk3::Callback*)Fl_Panel::propagate_load);
      o->align(fltk3::Align(fltk3::ALIGN_LEFT));
      { fltk3::MenuButton* o = new fltk3::MenuButton(75, 105, 170, 20, "Unknown");
        o->labelsize(12);
        o->callback((fltk3::Callback*)cb_Unknown);
        o->menu(menu_Unknown);
      } // fltk3::MenuButton* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(75, 130, 170, 20, "Location:");
      o->labelsize(12);
      o->callback((fltk3::Callback*)Fl_Panel::propagate_load);
      o->align(fltk3::Align(fltk3::ALIGN_LEFT));
      { fltk3::MenuButton* o = new fltk3::MenuButton(75, 130, 170, 20, "Relative to Workspace");
        o->labelsize(12);
        o->callback((fltk3::Callback*)cb_Relative);
        o->menu(menu_Relative);
      } // fltk3::MenuButton* o
      o->end();
    } // fltk3::Group* o
    { fltk3::Group* o = new fltk3::Group(9, 195, 261, 25);
      o->labelsize(11);
      o->callback((fltk3::Callback*)Fl_Panel::propagate_load);
      { fltk3::Box* o = new fltk3::Box(9, 195, 166, 25);
        o->labelsize(11);
        fltk3::Group::current()->resizable(o);
      } // fltk3::Box* o
      { fltk3::ReturnButton* o = new fltk3::ReturnButton(175, 195, 94, 25, "Close");
        o->labelsize(12);
        o->callback((fltk3::Callback*)cb_Close);
      } // fltk3::ReturnButton* o
      o->end();
    } // fltk3::Group* o
    o->size_range(o->w(), o->h());
    o->set_non_modal();
    o->end();
    o->resizable(o);
  } // Fl_Panel* o
  return w;
}

//
// End of "$Id$".
//
