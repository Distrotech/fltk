//
// "$Id$"
//
// Workspace Panels for the Fast Light Tool Kit (FLTK).
//
// Copyright 1998-2011 by Bill Spitzak and others.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
//
// Please report all bugs and problems to "fltk-bugs@fltk.org".
//

// generated by Fast Light User Interface Designer (fluid) version 3.0000

#include "workspace_panel.h"

void Fl_Environment_Choice::cb_pMenuAll_i(fltk3::Menu_*, void* v) {
  // this is what we want to set or clear, pEnv is what we currently have
unsigned int e = (intptr_t)v;
// find a good logic for settting, clearing, and partial values
if ( (pEnv&e)==e ) {
  // if all bits in the menu are set, toggle the bits off
  pEnv = pEnv ^ e;
} else {
  // some bits don't match, so switch all bits on
  pEnv = pEnv | e;
}

// now update all menus
e = pEnv;
fltk3::MenuItem *mi = menu_pEnvMenu;
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = (fltk3::MultiLabel*)mi->label();
    if ( (me&e)==0 ) {
      ml->labela = (char*)&menu_none_pixmap;
    } else if ( (me&e)==me ) {
      ml->labela = (char*)&menu_all_pixmap;
    } else {
      ml->labela = (char*)&menu_multi_pixmap;
    }
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}

// update the text
if (pEnv==ENV_ALL) {
  pEnvList->label("- all -");
} else if (pEnv==ENV_NONE) {
  pEnvList->label("- none -");
} else {
  char buf[1024]; buf[0] = 0;
  if (pEnv&ENV_MAKE) strcat(buf, "make, ");
  if (pEnv&ENV_CMAKE) strcat(buf, "cmake, ");
  if (pEnv&ENV_VC6) strcat(buf, "VC6, ");
  if (pEnv&ENV_VC2008) strcat(buf, "VC2008, ");
  if (pEnv&ENV_VC2010) strcat(buf, "VC2010, ");
  if (pEnv&ENV_XC3) strcat(buf, "Xcode3, ");
  if (pEnv&ENV_XC4) strcat(buf, "Xcode4, ");
  int n = strlen(buf);
  if (n>2) buf[n-2] = 0;
  pEnvList->copy_label(buf);
};
}
void Fl_Environment_Choice::cb_pMenuAll(fltk3::Menu_* o, void* v) {
  ((Fl_Environment_Choice*)(o->parent()))->cb_pMenuAll_i(o,v);
}

fltk3::MenuItem Fl_Environment_Choice::menu_pEnvMenu[] = {
 {"All Environments", 0,  (fltk3::Callback*)Fl_Environment_Choice::cb_pMenuAll, (void*)(ENV_ALL), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Command Line", 0,  0, 0, 64, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"All", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_ALL_SHELL), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Makefile (make, gmake)", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_MAKE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"CMake File (cmake)", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_CMAKE), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"MS Windows", 0,  0, 0, 64, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"All", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_ALL_VC), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"VisualC 6", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_VC6), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"VisualC 2008", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_VC2008), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"VisualC 2010", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_VC2010), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Apple OS X", 0,  0, 0, 64, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"All", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_ALL_XC), 128, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Xcode 3", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_XC3), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {"Xcode 4", 0,  (fltk3::Callback*)cb_pMenuAll, (void*)(ENV_XC4), 0, fltk3::NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
fltk3::MenuItem* Fl_Environment_Choice::pMenuAll = Fl_Environment_Choice::menu_pEnvMenu + 0;
Fl_Environment_Choice::Fl_Environment_Choice(int X, int Y, int W, int H, const char *L)
  : fltk3::Group(0, 0, W, H, L) {
this->box(fltk3::FLAT_BOX);
this->color(fltk3::BACKGROUND_COLOR);
this->selection_color(fltk3::BACKGROUND_COLOR);
this->labeltype(fltk3::NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(fltk3::FOREGROUND_COLOR);
this->align(fltk3::Align(fltk3::ALIGN_TOP));
this->when(fltk3::WHEN_RELEASE);
{ pEnvMenu = new fltk3::MenuButton(0, 0, 170, 20, "Environent");
  pEnvMenu->labelsize(12);
  pEnvMenu->menu(menu_pEnvMenu);
} // fltk3::MenuButton* pEnvMenu
{ pEnvList = new fltk3::Box(0, 20, 170, 20, "make, cmake, Xcode3 Xcode4, VC6, VC2010, VC2008");
  pEnvList->labelsize(9);
  pEnvList->align(fltk3::Align(193|fltk3::ALIGN_INSIDE));
} // fltk3::Box* pEnvList
fltk3::MenuItem *mi = menu_pEnvMenu;
int level = 0;
while (mi->label()) {
  unsigned int me = (intptr_t)mi->user_data();
  if (me) {
    fltk3::MultiLabel *ml = new fltk3::MultiLabel;
    ml->labela = (char*)&menu_none_pixmap;
    ml->labelb = mi->text;
    ml->typea = fltk3::IMAGE_LABEL;
    ml->typeb = fltk3::NORMAL_LABEL;
    ml->label( mi );  
  }
  if (mi->flags&fltk3::SUBMENU) level++;
  mi++;
  while (level && !mi->label()) {
    level--; 
    mi++;
  }
}
position(X, Y);
end();
}

fltk3::DoubleWindow *workspace_panel=(fltk3::DoubleWindow *)0;

fltk3::DoubleWindow* show_workspace_panel() {
  if (!workspace_panel) {
    { workspace_panel = new fltk3::DoubleWindow(385, 416);
      { fltk3::Button* o = new fltk3::Button(265, 365, 95, 25, "OK");
        o->labelsize(12);
      } // fltk3::Button* o
      { fltk3::Input* o = new fltk3::Input(85, 15, 213, 25, "Name:");
        o->tooltip("name of the target - this will be used in the IDEs and as a general reference\
.");
        o->labelsize(12);
        o->textsize(12);
      } // fltk3::Input* o
      { fltk3::Box* o = new fltk3::Box(10, 49, 362, 2, "Environments");
        o->box(fltk3::THIN_DOWN_FRAME);
        o->labelsize(12);
        o->align(fltk3::Align(fltk3::ALIGN_BOTTOM_LEFT));
      } // fltk3::Box* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(85, 83, 215, 20, "Universal Command Line");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(85, 143, 215, 20, "MS Windows (tm)");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(100, 163, 215, 20, "VisualC 6 ");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(100, 183, 215, 20, "VisualC 2008");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(100, 203, 215, 20, "VisualC 2010");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(85, 223, 215, 20, "Apple OS X (tm)");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(100, 243, 215, 20, "Xcode 3");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
        o->deactivate();
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(100, 263, 215, 20, "Xcode 4");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(101, 103, 215, 20, "Makefile (make, gmake)");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(101, 123, 215, 20, "CMake File (cmake)");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
        o->deactivate();
      } // fltk3::CheckButton* o
      { fltk3::CheckButton* o = new fltk3::CheckButton(70, 64, 215, 20, "all supported Environments");
        o->down_box(fltk3::DOWN_BOX);
        o->labelsize(12);
      } // fltk3::CheckButton* o
      { Fl_Environment_Choice* o = new Fl_Environment_Choice(85, 295, 170, 40);
        o->box(fltk3::FLAT_BOX);
        o->color(fltk3::LIGHT2);
        o->selection_color(fltk3::SELECTION_COLOR);
        o->labeltype(fltk3::NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(fltk3::FOREGROUND_COLOR);
        o->align(fltk3::Align(fltk3::ALIGN_CENTER));
        o->when(fltk3::WHEN_RELEASE_ALWAYS);
      } // Fl_Environment_Choice* o
      workspace_panel->end();
    } // fltk3::DoubleWindow* workspace_panel
      }
      workspace_panel->show();
  return workspace_panel;
}

fltk3::DoubleWindow* make_app_target_panel() {
  fltk3::DoubleWindow* w;
  { fltk3::DoubleWindow* o = new fltk3::DoubleWindow(307, 281, "Appliction Target");
    w = o;
    { fltk3::Input* o = new fltk3::Input(70, 20, 213, 25, "Name:");
      o->tooltip("name of the target - this will be used in the IDEs and as a general reference\
.");
      o->labelsize(12);
      o->textsize(12);
    } // fltk3::Input* o
    { fltk3::Input* o = new fltk3::Input(70, 55, 213, 25, "File Name:");
      o->tooltip("name of the final executable - the appropriate file extension will be added");
      o->labelsize(12);
      o->textsize(12);
      o->deactivate();
    } // fltk3::Input* o
    { fltk3::Choice* o = new fltk3::Choice(70, 90, 215, 25, "File Type:");
      o->down_box(fltk3::BORDER_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->deactivate();
    } // fltk3::Choice* o
    { fltk3::Choice* o = new fltk3::Choice(70, 125, 215, 25, "Location:");
      o->down_box(fltk3::BORDER_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->deactivate();
    } // fltk3::Choice* o
    { fltk3::Output* o = new fltk3::Output(70, 160, 215, 25, "Full Path:");
      o->labelsize(12);
      o->textsize(12);
      o->deactivate();
    } // fltk3::Output* o
    { fltk3::Button* o = new fltk3::Button(85, 240, 95, 25, "OK");
      o->labelsize(12);
    } // fltk3::Button* o
    { fltk3::Button* o = new fltk3::Button(190, 240, 95, 25, "Cancel");
      o->labelsize(12);
    } // fltk3::Button* o
    { fltk3::Choice* o = new fltk3::Choice(70, 195, 215, 25, "Use:");
      o->down_box(fltk3::BORDER_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->deactivate();
    } // fltk3::Choice* o
    o->end();
  } // fltk3::DoubleWindow* o
  return w;
}

//
// End of "$Id$".
//
